{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/dog.jpg","path":"img/dog.jpg","modified":1,"renderable":0},{"_id":"themes/yele/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/yele/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/yele/source/js/instagram.js","path":"js/instagram.js","modified":1,"renderable":1},{"_id":"themes/yele/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/yele/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/yele/source/img/coderwall.png","path":"img/coderwall.png","modified":1,"renderable":1},{"_id":"themes/yele/source/js/mobile.js","path":"js/mobile.js","modified":1,"renderable":1},{"_id":"themes/yele/source/js/pc.js","path":"js/pc.js","modified":1,"renderable":1},{"_id":"themes/yele/source/img/delicious.png","path":"img/delicious.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/google.png","path":"img/google.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/facebook.png","path":"img/facebook.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/img-err.png","path":"img/img-err.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/douban.png","path":"img/douban.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/img-loading.png","path":"img/img-loading.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/linkedin.png","path":"img/linkedin.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/pinboard.png","path":"img/pinboard.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/pinterest.png","path":"img/pinterest.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/mail.png","path":"img/mail.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/weibo.png","path":"img/weibo.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/twitter.png","path":"img/twitter.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/zhihu.png","path":"img/zhihu.png","modified":1,"renderable":1},{"_id":"themes/yele/source/img/rss.png","path":"img/rss.png","modified":1,"renderable":1},{"_id":"themes/yele/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/yele/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/yele/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":1,"renderable":1},{"_id":"themes/yele/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/yele/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/yele/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yele/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1669297125662},{"_id":"themes/yele/_config.yml","hash":"e5a7f394174f48f76c8a1b6b046cd65e809884df","modified":1669297125663},{"_id":"themes/yele/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1669297125682},{"_id":"themes/yele/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1669297125679},{"_id":"themes/yele/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1669297125679},{"_id":"themes/yele/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1669297125680},{"_id":"themes/yele/layout/layout.ejs","hash":"370c30627fa94e28607605e215139ceff17715d1","modified":1669297125680},{"_id":"themes/yele/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1669297125681},{"_id":"themes/yele/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1669297125680},{"_id":"themes/yele/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1669297125681},{"_id":"themes/yele/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1669297125663},{"_id":"themes/yele/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1669297125664},{"_id":"themes/yele/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1669297125665},{"_id":"themes/yele/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1669297125665},{"_id":"themes/yele/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1669297125664},{"_id":"themes/yele/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1669297125665},{"_id":"themes/yele/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1669297125666},{"_id":"themes/yele/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1669297125667},{"_id":"source/img/dog.jpg","hash":"9b6f4fec581f9087ff6dba1019c992235ed810bf","modified":1669297125609},{"_id":"themes/yele/layout/_partial/archive-post.ejs","hash":"5b29a383418cfdcf8d5c5719b4fc4608aaba6fe7","modified":1669297125668},{"_id":"themes/yele/layout/_partial/after-footer.ejs","hash":"d815e2a30f08b6f4d4170c50810f3f9dda60aa61","modified":1669297125668},{"_id":"themes/yele/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1669297125670},{"_id":"themes/yele/layout/_partial/footer.ejs","hash":"871f81cacd5d41cb2eb001cd56254217a857dc2f","modified":1669297125669},{"_id":"themes/yele/layout/_partial/article.ejs","hash":"52f1db04af2e060b0d4d76c218d4d5e0a5ff078c","modified":1669297125669},{"_id":"themes/yele/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1669297125669},{"_id":"themes/yele/layout/_partial/head.ejs","hash":"4e5807d6cc2cd5c46843e20b25af8ca053291c49","modified":1669297125670},{"_id":"themes/yele/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1669297125671},{"_id":"themes/yele/layout/_partial/left-col.ejs","hash":"065f840f8f8b6b01974a13e4938114bdc37d7575","modified":1669297125671},{"_id":"themes/yele/layout/_partial/mathjax.ejs","hash":"12f666501fe175c257231fe1fa030c86b093edb7","modified":1669297125672},{"_id":"themes/yele/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1669297125698},{"_id":"themes/yele/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1669297125692},{"_id":"themes/yele/source/css/style.styl","hash":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1669297125697},{"_id":"themes/yele/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1669297125683},{"_id":"themes/yele/layout/_partial/mobile-nav.ejs","hash":"6a7a2a4960dabf9d7cd523573da7869eebf4b02d","modified":1669297125674},{"_id":"themes/yele/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1669297125698},{"_id":"themes/yele/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1669297125699},{"_id":"themes/yele/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1669297125699},{"_id":"themes/yele/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1669297125700},{"_id":"themes/yele/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1669297125706},{"_id":"themes/yele/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1669297125705},{"_id":"themes/yele/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1669297125701},{"_id":"themes/yele/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1669297125706},{"_id":"themes/yele/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1669297125729},{"_id":"themes/yele/source/js/jquery.lazyload.js","hash":"9c34c37b4dca82386648d364da913153d1db902e","modified":1669297125729},{"_id":"themes/yele/source/js/main.js","hash":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1669297125729},{"_id":"themes/yele/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1669297125707},{"_id":"themes/yele/source/js/mobile.js","hash":"387c047e661f04fbb5f5bfc4b2db617023e836ce","modified":1669297125730},{"_id":"themes/yele/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1669297125730},{"_id":"themes/yele/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1669297125707},{"_id":"themes/yele/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1669297125709},{"_id":"themes/yele/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1669297125708},{"_id":"themes/yele/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1669297125709},{"_id":"themes/yele/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1669297125722},{"_id":"themes/yele/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1669297125708},{"_id":"themes/yele/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1669297125723},{"_id":"themes/yele/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1669297125724},{"_id":"themes/yele/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1669297125725},{"_id":"themes/yele/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1669297125725},{"_id":"themes/yele/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1669297125724},{"_id":"themes/yele/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1669297125726},{"_id":"themes/yele/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1669297125727},{"_id":"themes/yele/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1669297125727},{"_id":"themes/yele/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1669297125726},{"_id":"themes/yele/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1669297125728},{"_id":"themes/yele/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1669297125726},{"_id":"source/_posts/git-chapter-one.md","hash":"873b55f88052f866fca30bd793b348f1d2ad7e30","modified":1669297125589},{"_id":"source/_posts/chapter-one-for-vue.md","hash":"5a236ac8dbbfde2d08e93dd076e8da39f07adf4b","modified":1669297125585},{"_id":"source/_posts/chapter-two-for-vue.md","hash":"3be58a28b338fc5e628bd7d4d79bacf70a06f324","modified":1669297125586},{"_id":"source/_posts/eclipse-create-Maven-Project.md","hash":"96388fc422f02c52fdafd7ebcf262137305f97d8","modified":1669297125586},{"_id":"source/_posts/git-chapter-four.md","hash":"0405bc3124dcb54c56e967071a824265dbab6cd4","modified":1669297125587},{"_id":"source/_posts/fileUpload.md","hash":"f5757a99d7e20d798281a08fa02cdb3107564d52","modified":1669297125587},{"_id":"source/_posts/git-chapter-two.md","hash":"29fb66cf000fc1350e3014ba867d5b18c602c7f7","modified":1669297125591},{"_id":"source/_posts/gradle-start.md","hash":"f091296cf2bdd2bcbbbbeae78fb8200e655404af","modified":1669297125591},{"_id":"source/_posts/hello-world.md","hash":"774d0be0298c5b47a909de2911a71e6c0070a56e","modified":1669297125592},{"_id":"source/_posts/git-chapter-three.md","hash":"55ca4007facf2771bfec85a07ca4468afbf4b597","modified":1669297125589},{"_id":"source/_posts/javaweb-project.md","hash":"58ba4f8a0c2ac14f4f70d75d7a24dccccd760e25","modified":1669297125593},{"_id":"source/_posts/java-top.md","hash":"845123b7c28c4883d38430635cccf4060a7ad1f2","modified":1669297125592},{"_id":"source/_posts/javaweb-filter.md","hash":"bbc3c41fceb67127bf12f44d0c6499d9b302c76a","modified":1669297125593},{"_id":"source/_posts/logback.md","hash":"01d363b14b4b8605dd3e28e2f334030e37aa7f2c","modified":1669297125594},{"_id":"source/_posts/map-top.md","hash":"e65e4636170de02cc7887a08d472aa2b0d582c9d","modified":1669297125594},{"_id":"source/_posts/mybatis-in-action.md","hash":"a43aca52169bdc2b8d1ed20ff46d4d94a7ed6611","modified":1669297125596},{"_id":"source/_posts/mongodb.md","hash":"1967112a207e5c19f78184de237bfb9df3faafd1","modified":1669297125595},{"_id":"source/_posts/pageList.md","hash":"a827bcf6bc861ec45013ccc19c8f414f744fcb4e","modified":1669297125597},{"_id":"source/_posts/mybatis-oneday.md","hash":"b0b791ae1edd6c21a4878835b2ad4de48ab9e3e8","modified":1669297125596},{"_id":"source/_posts/prevent-xss.md","hash":"ddc858f02704a0b1ddfdb9b1a46e69818ef7d772","modified":1669297125597},{"_id":"source/_posts/redis-one.md","hash":"b5758d1d4c35baf4debe27c596f5a0b27f8a71a2","modified":1669297125598},{"_id":"source/_posts/security1.md","hash":"3f6dfcb86b234840976b59f726218df789fe0bbb","modified":1669297125598},{"_id":"source/_posts/security2.md","hash":"fadb8e2fd9e94b2bd22e56b5d977e01282f7f570","modified":1669297125599},{"_id":"source/_posts/security3.md","hash":"85e443ec26931a0cec5561ea3c6bb6b6a008667e","modified":1669297125599},{"_id":"source/_posts/sitemap.md","hash":"560838aee4a265408d19f071a794ebfa1d20d872","modified":1669297125600},{"_id":"source/_posts/simplified.md","hash":"c0241240b9939045325891fa455e088f65edce97","modified":1669297125600},{"_id":"source/_posts/spring-aop.md","hash":"d28ce682f173b0cf43b6ea96536910409c189307","modified":1669297125600},{"_id":"source/_posts/spring-factoryBean.md","hash":"a8b781dbc564e1654620bf4baeacfce5316e3c52","modified":1669297125601},{"_id":"source/_posts/spring-uploadfile.md","hash":"fd953836739ded53931140864a4a6bdc2c2280a2","modified":1669297125602},{"_id":"source/_posts/spring-tip.md","hash":"f1668b69a8e56369e146facee48c254c17847b22","modified":1669297125601},{"_id":"source/_posts/springboot-automake.md","hash":"0f72a01b451052f93347217dad72a869237717b1","modified":1669297125602},{"_id":"source/_posts/springparam.md","hash":"33f504edecbfd9b645090b7076b95fd14cb2a25b","modified":1669297125603},{"_id":"source/_posts/springmvc-json-pojo.md","hash":"91d84bf4126bad7ce87ae9888433a851e966c1be","modified":1669297125603},{"_id":"source/_posts/springsecurity-ifram.md","hash":"96f10d45f89d2fcf274ca9baacacff7f0aa245f0","modified":1669297125604},{"_id":"source/_posts/static-resource.md","hash":"e88fdbd2f70e8488d7a51e30cb00ed77f77d51d7","modified":1669297125605},{"_id":"source/_posts/thymeleaf.md","hash":"1e56f4c54ffa4bc52c9b22df452a7e715fe22764","modified":1669297125607},{"_id":"source/_posts/thymeleaf2.md","hash":"671f270f3234ae8a03b3a59942e1b7b0a540a96e","modified":1669297125607},{"_id":"source/_posts/tag-web.md","hash":"d9409fceadc70ac414b2e66e1a638f62e9c3e18b","modified":1669297125606},{"_id":"source/_posts/validator.md","hash":"8865502b3c9cce760ebc81d1a9d2e99030174d0a","modified":1669297125608},{"_id":"source/_posts/thymeleaf3.md","hash":"bbfdc6f224059f9ea733cdf9ec431ebdd4e2c109","modified":1669297125608},{"_id":"themes/yele/layout/_partial/post/category.ejs","hash":"27fab3e6ccc41c075dc4c5ba3ca9e7f3b6247945","modified":1669297125675},{"_id":"themes/yele/layout/_partial/post/date.ejs","hash":"06d8914b5aef73b5ec2cabb0105e275ff821b321","modified":1669297125676},{"_id":"themes/yele/layout/_partial/post/share_addthis.ejs","hash":"4ab6cab2a975a4df8419448b33dec4724279d85c","modified":1669297125676},{"_id":"themes/yele/layout/_partial/post/tag.ejs","hash":"acf1b9d79ccec172881f9f0080e96667f4178885","modified":1669297125678},{"_id":"themes/yele/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1669297125678},{"_id":"themes/yele/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1669297125684},{"_id":"themes/yele/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1669297125683},{"_id":"themes/yele/source/css/_partial/article.styl","hash":"0c9ab753cb9b4ed28b5aeb4d7a33c5ae3fa49865","modified":1669297125684},{"_id":"themes/yele/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1669297125685},{"_id":"themes/yele/layout/_partial/post/share_jia.ejs","hash":"d50294bf9858e7942208c380e851a37ed37f1d6f","modified":1669297125677},{"_id":"themes/yele/source/css/_partial/highlight.styl","hash":"8871dade866a1de55d1c76dca2d7732a6f41da40","modified":1669297125685},{"_id":"themes/yele/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1669297125687},{"_id":"themes/yele/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1669297125686},{"_id":"themes/yele/source/css/_partial/main.styl","hash":"e503139f9103cdae0cd422a553d87b53c421c23a","modified":1669297125687},{"_id":"themes/yele/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1669297125688},{"_id":"themes/yele/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1669297125688},{"_id":"themes/yele/source/css/_partial/scroll.styl","hash":"88b32e8cf7a79d65c63591e2f8c11ed646beffa5","modified":1669297125689},{"_id":"themes/yele/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1669297125690},{"_id":"themes/yele/source/css/_partial/tagcloud.styl","hash":"14f05b982e104fb0300f6af5047b7b26922675e7","modified":1669297125690},{"_id":"themes/yele/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1669297125691},{"_id":"themes/yele/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1669297125692},{"_id":"themes/yele/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1669297125692},{"_id":"themes/yele/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1669297125694},{"_id":"themes/yele/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1669297125696},{"_id":"themes/yele/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1669297125695},{"_id":"themes/yele/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1669297125696},{"_id":"themes/yele/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1669297125702},{"_id":"themes/yele/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1669297125701},{"_id":"themes/yele/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1669297125702},{"_id":"themes/yele/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1669297125703},{"_id":"themes/yele/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1669297125704},{"_id":"themes/yele/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1669297125704},{"_id":"themes/yele/layout/_partial/post/nav.ejs","hash":"c115c282eebfb6b18612d2d8733272c270b03066","modified":1669297125676},{"_id":"themes/yele/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1669297125694},{"_id":"public/springboot-automake/index.html","hash":"ce10a00aee93297569eff4393bedc08d5293258b","modified":1669465385682},{"_id":"public/prevent-xss/index.html","hash":"cfde5a531b31e3135ae0dc90ce70189efe55e4c6","modified":1669465385682},{"_id":"public/spring-uploadfile/index.html","hash":"2cd0ee2f68ece1b540d204090399ef861472f257","modified":1669465385682},{"_id":"public/mongodb/index.html","hash":"7a031b6fb6f054e520935f7ba397c5d82c514b49","modified":1669465385683},{"_id":"public/java-top/index.html","hash":"7041c79563e76c1c9f4119cf716339206492ca31","modified":1669465385683},{"_id":"public/git-chapter-four/index.html","hash":"a3b1f7e5bded2c839fd207a99985c42470fec809","modified":1669465385683},{"_id":"public/git-chapter-three/index.html","hash":"d19f4656678b2b22e345487c6398cdd39f56643c","modified":1669465385683},{"_id":"public/git-chapter-two/index.html","hash":"e3208ce5ff7d207f92c7b69ee03edf4e4d20e100","modified":1669465385683},{"_id":"public/git-chapter-one/index.html","hash":"bca5a8838f2e7eabf36e872615004166f6fae3f6","modified":1669465385683},{"_id":"public/chapter-two-for-vue/index.html","hash":"7663f95ca7c4f7a4789e60a4b85a374d4e528428","modified":1669465385683},{"_id":"public/chapter-one-for-vue/index.html","hash":"504ab6ac08dc5530012023753096545bbd3db6b0","modified":1669465385683},{"_id":"public/springsecurity-ifram/index.html","hash":"f4eb3a7b41d1a1e98fd0103092c93effd61e1cce","modified":1669465385684},{"_id":"public/redis-one/index.html","hash":"b3f57afe03e8d53e5803723106834fc46654f8e5","modified":1669465385684},{"_id":"public/springparam/index.html","hash":"f24399709ffb2b29089d7b0c87e9bf829e4c297d","modified":1669465385684},{"_id":"public/map-top/index.html","hash":"5232cc70c849161b7765b565316a093f69caa6cb","modified":1669465385684},{"_id":"public/spring-factoryBean/index.html","hash":"b324a747a66ef2e0e6c949b605479475935891cf","modified":1669465385684},{"_id":"public/spring-tip/index.html","hash":"639fdb963874e06c9e8089ba2150fb53e8064fb3","modified":1669465385684},{"_id":"public/gradle-start/index.html","hash":"070308e40cf6a0117b1ead8fc6def11da283fe37","modified":1669465385684},{"_id":"public/pageList/index.html","hash":"8cb2e5001b3dbd65b3e2dcb2d6ec9dfe7f0d8426","modified":1669465385684},{"_id":"public/springmvc-json-pojo/index.html","hash":"fe1b36b0200e996f350aa313b090fadf100f1702","modified":1669465385685},{"_id":"public/javaweb-project/index.html","hash":"d99ae5a1b30bef480e62b0d976f4e2ec368d7342","modified":1669465385685},{"_id":"public/tag-web/index.html","hash":"c28fb52f860d4514d03f5e677e6c0450c9c1738c","modified":1669465385685},{"_id":"public/logback/index.html","hash":"876cef54553e250e749d6e90e2629cdc9b34e19f","modified":1669465385685},{"_id":"public/security3/index.html","hash":"b133ff804d58d0255359b1f9157e61782836828a","modified":1669465385685},{"_id":"public/security2/index.html","hash":"954b782088bed680f32013b446829fa926281be6","modified":1669465385686},{"_id":"public/security1/index.html","hash":"2bfdd278193cbc8e97722a33407e175ec78be904","modified":1669465385686},{"_id":"public/thymeleaf3/index.html","hash":"d3f19ead94e7e7693e87b6ce3df2fc1216082671","modified":1669465385686},{"_id":"public/thymeleaf2/index.html","hash":"04a148926d460e3efb3bbcddad639c2595b74cd5","modified":1669465385686},{"_id":"public/static-resource/index.html","hash":"ac3fce37f32a4be9dd96646d37292f9f2a80a287","modified":1669465385686},{"_id":"public/fileUpload/index.html","hash":"c0f2ed4880ab2a9ca792a51078444135304d4ea4","modified":1669465385686},{"_id":"public/validator/index.html","hash":"200da43f81e0850ca9334816ef454f55ff0e39d3","modified":1669465385686},{"_id":"public/thymeleaf/index.html","hash":"38cb7a7058cccac2a7b8ab1b33838ba6eae5e199","modified":1669465385686},{"_id":"public/simplified/index.html","hash":"06aa807db08d327fa5cafb9444501df9070ee720","modified":1669465385686},{"_id":"public/mybatis-oneday/index.html","hash":"576670fc6827e4891989738421359e7811cd7755","modified":1669465385686},{"_id":"public/mybatis-in-action/index.html","hash":"70d71edc0c302853156b3ef6f3db0b1e98977e7d","modified":1669465385686},{"_id":"public/javaweb-filter/index.html","hash":"f169de295e932390eeaa8033f23454e73c8d1339","modified":1669465385686},{"_id":"public/eclipse-create-Maven-Project/index.html","hash":"56a16c3b7dcf48a2009f3711d049e7b74d955c60","modified":1669465385686},{"_id":"public/spring-aop/index.html","hash":"2a3106c4badb84c37a194127cd62ad150cbc15c5","modified":1669465385686},{"_id":"public/hello-world/index.html","hash":"ab50bf169309cd93e2e3b86b8b4fc176667f6ca7","modified":1669465385687},{"_id":"public/sitemap/index.html","hash":"f54e9bb4a3b38cbddbe88f292d32772504af3a10","modified":1669465385687},{"_id":"public/page/2/index.html","hash":"d36e81f4f88584504f0c6ccddc950d5aba4a93ce","modified":1669465385687},{"_id":"public/page/3/index.html","hash":"d3c1cd19fe93773861a1f3a2c6d7b0dc9c5a0225","modified":1669465385687},{"_id":"public/index.html","hash":"b59aab94af3dcc126a6c0e3e8df5bd0d30bfa252","modified":1669465385687},{"_id":"public/page/4/index.html","hash":"1dea278d03c0b1488c871850c80e591a1c550d3c","modified":1669465385687},{"_id":"public/archives/index.html","hash":"8f6babb294f9d5673232923213dd59834e3acf01","modified":1669465385687},{"_id":"public/archives/page/2/index.html","hash":"78d3b54d4b215fcb9a28f15862168e3e22a68c12","modified":1669465385687},{"_id":"public/archives/page/3/index.html","hash":"4324cfd36b3cda8d7e926baf5c47056d0d2adcea","modified":1669465385687},{"_id":"public/archives/page/4/index.html","hash":"ea53e7e05ea0ee9b6dae28b1be1a3ba4e5e03d24","modified":1669465385687},{"_id":"public/archives/2015/index.html","hash":"9034afc12a2950889fa226e8f3e20e1ffd109df2","modified":1669465385687},{"_id":"public/archives/2015/06/index.html","hash":"a35fbbf1de0820d1d66dcd5497ced10381dea942","modified":1669465385687},{"_id":"public/archives/2016/index.html","hash":"4a1faa856edbeff7b8062dce7b7ba31b4cd107c3","modified":1669465385687},{"_id":"public/archives/2016/11/index.html","hash":"92c894b61a93794da9cc22faad5017658998d17f","modified":1669465385687},{"_id":"public/archives/2016/12/index.html","hash":"6fefd6db30cf26d96582c79be463ec56405bae6a","modified":1669465385687},{"_id":"public/archives/2017/index.html","hash":"552c0f6f4ff2edd77b328479866086aaf4169e3e","modified":1669465385687},{"_id":"public/archives/2017/page/2/index.html","hash":"de2d9dc07a78017251102dce4ed98753a1270279","modified":1669465385687},{"_id":"public/archives/2017/04/index.html","hash":"3249bd7a6f30d348c94120a85920e8e4e36ce400","modified":1669465385687},{"_id":"public/archives/2017/07/index.html","hash":"2774050d9b23c8f844ffb0a3f7d33a934caa09e1","modified":1669465385687},{"_id":"public/archives/2017/11/index.html","hash":"9403d68194e7c66161be7770d63cea5abb8e5b8b","modified":1669465385688},{"_id":"public/archives/2017/12/index.html","hash":"fb1da1047d2190c2cf00d0757e4ff970951926ac","modified":1669465385688},{"_id":"public/archives/2017/12/page/2/index.html","hash":"a0e82d5a916c34ee17534ed6681c576548432c7d","modified":1669465385688},{"_id":"public/archives/2018/index.html","hash":"328571af023710ef042483aba0bed8e578ebfa4a","modified":1669465385688},{"_id":"public/archives/2018/page/2/index.html","hash":"dd27ab193a8f977a5367b896dc28ffafae72219e","modified":1669465385688},{"_id":"public/archives/2018/06/index.html","hash":"d1d31da9841ade069832e19e8705777aa4376865","modified":1669465385688},{"_id":"public/archives/2018/07/index.html","hash":"8e528e22a0614c0945b8b588b498bc136dbcd852","modified":1669465385688},{"_id":"public/archives/2018/09/index.html","hash":"25eea234e0bf05325bedb55a5170851ae9d2f2ef","modified":1669465385688},{"_id":"public/archives/2018/10/index.html","hash":"33ad7cd10a3adb1087f26c314f3fc28a4bae23fb","modified":1669465385688},{"_id":"public/archives/2018/11/index.html","hash":"5b5d9c078b9c84d97e6c7da30202a30eb4c9341d","modified":1669465385688},{"_id":"public/archives/2019/index.html","hash":"d3a2259f9da2e624f1e7f436d855d09945a0deb7","modified":1669465385688},{"_id":"public/archives/2019/02/index.html","hash":"cc894e734b006cf88a98201418e46fc9a08859a0","modified":1669465385688},{"_id":"public/archives/2019/03/index.html","hash":"3b87625cc6e37557172e843961144ac203ea78e6","modified":1669465385688},{"_id":"public/archives/2019/05/index.html","hash":"5376bef6693825b2a750c5a096c44492c1ab0048","modified":1669465385688},{"_id":"public/archives/2020/index.html","hash":"e21454509e96ac58b14541cdcc58b7c7c1e46171","modified":1669465385688},{"_id":"public/archives/2020/02/index.html","hash":"e52335b7ca099e8dc86cf267e0c40afe5772ec3d","modified":1669465385688},{"_id":"public/tags/vue/index.html","hash":"3a2165fe372837b879cdbc9a44a4d692ddee622f","modified":1669465385688},{"_id":"public/tags/Git/index.html","hash":"3a541258543923eae32189dc323f410056a0856e","modified":1669465385688},{"_id":"public/tags/spring/index.html","hash":"24cdd09cab1f74bf94c178f8774f1162f67f8ae7","modified":1669465385688},{"_id":"public/tags/maven/index.html","hash":"cfec5199e7b91876dd4c701b97ca0cb2492d022e","modified":1669465385688},{"_id":"public/tags/springmvc/index.html","hash":"45c14c48af2166fc6728e835149c306e0d83c187","modified":1669465385688},{"_id":"public/tags/Gradle/index.html","hash":"c10d0e0b9d27016db82da00c6ff92f4079794bf5","modified":1669465385688},{"_id":"public/tags/hexo/index.html","hash":"d0e472eff4f1f8bb6c95ea2667cca0e17e250d8c","modified":1669465385688},{"_id":"public/tags/java/index.html","hash":"a1950a6ef8e3aecb2f3f4891331e8a34fb66c4b0","modified":1669465385689},{"_id":"public/tags/javaweb/index.html","hash":"7d8762c53262a1550aed378e526e6bfb505a2b18","modified":1669465385689},{"_id":"public/tags/test/index.html","hash":"ab1d9ce701bd2b31a579366a3b23d3bb102627dc","modified":1669465385689},{"_id":"public/tags/mybatis/index.html","hash":"1dd205fbdbaa4dd2212a2f6716fcc83d4d1ea501","modified":1669465385689},{"_id":"public/tags/mongoDB/index.html","hash":"8f010512e0099e323cd069007734d0390c110d3f","modified":1669465385689},{"_id":"public/tags/redis/index.html","hash":"582a3268f2aa6d4868922aa503f52c221a9d57f2","modified":1669465385689},{"_id":"public/tags/Index/index.html","hash":"04069938deef411371ec6d12e05ec7dca9358d53","modified":1669465385689},{"_id":"public/tags/security/index.html","hash":"488f73676f66948ee44e471aef9556dda4e7d1bb","modified":1669465385689},{"_id":"public/tags/springboot/index.html","hash":"287bb12ad68f707b01336e0d96fb6dbc10136579","modified":1669465385689},{"_id":"public/tags/thymeleaf/index.html","hash":"c17fba6a8503a0e04a018515aa64feac91b7ecba","modified":1669465385690},{"_id":"public/img/dog.jpg","hash":"9b6f4fec581f9087ff6dba1019c992235ed810bf","modified":1669465385711},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1669465385711},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1669465385711},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1669465385711},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1669465385711},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1669465385712},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1669465385712},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1669465385712},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1669465385712},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1669465385712},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1669465385712},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1669465385712},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1669465385712},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1669465385712},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1669465385712},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1669465385712},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1669465385712},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1669465385712},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1669465385712},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1669465385712},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1669465385712},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1669465385713},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1669465385713},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1669465385713},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1669465385713},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1669465385713},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1669465385713},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1669465385713},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1669465385713},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1669465385713},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1669465386577},{"_id":"public/css/style.css","hash":"fdeec85b8b544501b612c24322f0a21a45558737","modified":1669465386589},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1669465386589},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1669465386589},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1669465386589},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1669465386589},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1669465386589},{"_id":"public/js/main.js","hash":"0640b68a76fab3c693b3cd1e4d04d14be1e53940","modified":1669465386589},{"_id":"public/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1669465386589},{"_id":"public/js/pc.js","hash":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10","modified":1669465386589},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1669465386589},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1669465386589},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1669465386589},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1669465386589},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1669465386589}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"初识VUE","date":"2018-11-05T01:39:47.000Z","_content":"\n# Vue简介\n\nVue是一套用于构建用户界面的`渐进式框架`,Vue的核心库只关注视图层，Vue通过操控数据来驱动视图层的变化。学习成本不高，下面开始学习Vue吧。\n\nVue可以通过页面引入js文件来使用，也可以通过 vue cli创建Vue项目工程，初学者建议先用简单的页面引用js文件，来慢慢熟悉Vue。使用Vue时，要放弃自己操作dom的想法，因为vue会帮你做。\n\n<!-- more -->\n\n# 引入Vue.js\n\n引入Vue.js有多种方式\n\n>    1.官网下载js文件，存放到本地，在页面中引入\n>\n>    2.直接在页面中引入这段代码\n>\n>    ```html\n>    <!-- 开发环境版本，包含了有帮助的命令行警告 -->\n>    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"/>\n>    <!-- 开发环境版本，包含了有帮助的命令行警告 -->\n>    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"/>\n>    ```\n>\n\n# 第一Vue实例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n  </head>\n  <body>\n\n    <script type=\"text/javascript\">\n      window.onload=function(){\n        new Vue({\n          el:'#my',//2.0以后版本不允许直接挂载到html,body等元素标签上\n          data:{\n            msg:'hello word!'\n          }\n        });\n      }\n    </script>\n\n    <div id=\"my\">\n      {{msg}}\n    </div>\n  </body>\n</html>\n```\n\n访问页面输出内容：\n\n>    hello word!\n\n1.new Vue()创建了一个vue实例，el表示element，根据ID选择器选中一个dom模块作为该vue的操作区域，在该区域中可以调用vue中的数据，方法等。例如上面的例子，在vue实例中，在data里声明msg数据，在下方Id为my的div中，使用{{msg}}显示vue中定义的内容。\n\n# Vue中的指令\n\n指令带有前缀：v-，以表示它们是Vue提供的特殊特性，其实就是自定义属性。它们会在渲染的dom上应用特殊的响应式行为。\n\n`v-bind`  绑定指令，例如：将这个元素节点的title特性和vue中的message属性保持一致，谁的值变化，两个都会同步。\n\n```html\n<scan v-bind:title=\"message\">鼠标悬浮一会，会看到弹出的title</scan>\n```\n\n`v-if`、`v-else-if`、`v-else` Vue中的条件判断\n\n```html\n<div id=\"app1\">\n\t<p v-if=\"day==1\">今天星期一</p>\n    <p v-else-if=\"day == 2\">今天星期二</p>\n    <p v-else>今天星期三</p>\n</div>\n\n```\n\n```js\nnew Vue({\n  el:\"#app1\",\n  data:{\n    day:3\n  }\n});\n```\n\n`v-for` 循环指令\n\n```js\nnew Vue({\n   el:\"#app3\",\n   data:{\n        courses:[\n         '数学','英语','语文'\n        ] //vue中声明数组\n       }\n });\n```\n\n\n\n```html\n<div id=\"app3\">\n   <ul>\n      <li v-for=\"course in courses\">{{course}}</li>\n   </ul>\n</div>\n```\n\n>    -    数学\n>    -    英语\n>    -    语文\n\n也可以使用索引形式\n\n```html\n\t<div id=\"app3\">\n      <ul>\n          <li v-for=\"(course,index) in courses\">{{index}}.{{course}}</li>\n      </ul>\n    </div>\n    <!-- 这里的index表示数组索引 -->\n```\n\n在Vue中对象数组也用v-for指令来循环\n\n`v-on` 该指令可以给dom上添加事件，例如：click，load，unload，change，mouseover，mouseout事件等等。\n\n```js\nnew Vue({\n\tel:\"#app4\",\n    data:{\n    \tmessage:'hello Vue.js'\n    },\n    methods:{//methods属性中声明vue方法\n    \treverseMessage:function(){\n        \tthis.message = this.message.split(' ').reverse().join(' ');\n        }\n    }\n});\n```\n\n```html\n\t<div id=\"app4\">\n    \t{{message}}\n    \t<button v-on:click=\"reverseMessage\">逆转消息</button>\n    </div>\n```\n\n`v-model` 该指令可以实现表单输入和应用状态直接的双向绑定。修改输入框的值，message的值也会跟着变化，同样修改message的值，text输入框也跟着变化\n\n```js\n        new Vue({\n          el:\"#app5\",\n          data:{\n            message:'hello Vue.js'\n          }\n        });\n```\n\n```html\n    <div id=\"app5\">\n    {{message}}\n    <input type=\"text\" v-model=\"message\">\n    </div>\n```\n\n`v-html` 该指令可以输出html文本内容\n\n在上面的例子中{{message}}可以输出内容，会把原始的文本内容输出，如果想显示html内容的话，可以使用v-html指令进行绑定\n\n```html\n    <div id=\"app6\">\n      <p>{{message}}</p>\n      <p><scan v-html=\"message\"></scan></p>\n    </div>\n```\n\n```js\n\t\tvar vue6 = new Vue({\n          el:\"#app6\",\n          data:{\n            message:'<scan style=\"color:red\">Hello Vue.js</scan>'\n          }\n        });\n```\n\n>    1.<scan style=\"color:red\">Hello Vue.js</scan>\n>\n>    2.Hello Vue.js(红色)","source":"_posts/chapter-one-for-vue.md","raw":"---\ntitle: 初识VUE\ndate: 2018-11-05 09:39:47\ntags: [vue]\n---\n\n# Vue简介\n\nVue是一套用于构建用户界面的`渐进式框架`,Vue的核心库只关注视图层，Vue通过操控数据来驱动视图层的变化。学习成本不高，下面开始学习Vue吧。\n\nVue可以通过页面引入js文件来使用，也可以通过 vue cli创建Vue项目工程，初学者建议先用简单的页面引用js文件，来慢慢熟悉Vue。使用Vue时，要放弃自己操作dom的想法，因为vue会帮你做。\n\n<!-- more -->\n\n# 引入Vue.js\n\n引入Vue.js有多种方式\n\n>    1.官网下载js文件，存放到本地，在页面中引入\n>\n>    2.直接在页面中引入这段代码\n>\n>    ```html\n>    <!-- 开发环境版本，包含了有帮助的命令行警告 -->\n>    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"/>\n>    <!-- 开发环境版本，包含了有帮助的命令行警告 -->\n>    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"/>\n>    ```\n>\n\n# 第一Vue实例\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n  <head>\n    <meta charset=\"utf-8\">\n    <title></title>\n    <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n  </head>\n  <body>\n\n    <script type=\"text/javascript\">\n      window.onload=function(){\n        new Vue({\n          el:'#my',//2.0以后版本不允许直接挂载到html,body等元素标签上\n          data:{\n            msg:'hello word!'\n          }\n        });\n      }\n    </script>\n\n    <div id=\"my\">\n      {{msg}}\n    </div>\n  </body>\n</html>\n```\n\n访问页面输出内容：\n\n>    hello word!\n\n1.new Vue()创建了一个vue实例，el表示element，根据ID选择器选中一个dom模块作为该vue的操作区域，在该区域中可以调用vue中的数据，方法等。例如上面的例子，在vue实例中，在data里声明msg数据，在下方Id为my的div中，使用{{msg}}显示vue中定义的内容。\n\n# Vue中的指令\n\n指令带有前缀：v-，以表示它们是Vue提供的特殊特性，其实就是自定义属性。它们会在渲染的dom上应用特殊的响应式行为。\n\n`v-bind`  绑定指令，例如：将这个元素节点的title特性和vue中的message属性保持一致，谁的值变化，两个都会同步。\n\n```html\n<scan v-bind:title=\"message\">鼠标悬浮一会，会看到弹出的title</scan>\n```\n\n`v-if`、`v-else-if`、`v-else` Vue中的条件判断\n\n```html\n<div id=\"app1\">\n\t<p v-if=\"day==1\">今天星期一</p>\n    <p v-else-if=\"day == 2\">今天星期二</p>\n    <p v-else>今天星期三</p>\n</div>\n\n```\n\n```js\nnew Vue({\n  el:\"#app1\",\n  data:{\n    day:3\n  }\n});\n```\n\n`v-for` 循环指令\n\n```js\nnew Vue({\n   el:\"#app3\",\n   data:{\n        courses:[\n         '数学','英语','语文'\n        ] //vue中声明数组\n       }\n });\n```\n\n\n\n```html\n<div id=\"app3\">\n   <ul>\n      <li v-for=\"course in courses\">{{course}}</li>\n   </ul>\n</div>\n```\n\n>    -    数学\n>    -    英语\n>    -    语文\n\n也可以使用索引形式\n\n```html\n\t<div id=\"app3\">\n      <ul>\n          <li v-for=\"(course,index) in courses\">{{index}}.{{course}}</li>\n      </ul>\n    </div>\n    <!-- 这里的index表示数组索引 -->\n```\n\n在Vue中对象数组也用v-for指令来循环\n\n`v-on` 该指令可以给dom上添加事件，例如：click，load，unload，change，mouseover，mouseout事件等等。\n\n```js\nnew Vue({\n\tel:\"#app4\",\n    data:{\n    \tmessage:'hello Vue.js'\n    },\n    methods:{//methods属性中声明vue方法\n    \treverseMessage:function(){\n        \tthis.message = this.message.split(' ').reverse().join(' ');\n        }\n    }\n});\n```\n\n```html\n\t<div id=\"app4\">\n    \t{{message}}\n    \t<button v-on:click=\"reverseMessage\">逆转消息</button>\n    </div>\n```\n\n`v-model` 该指令可以实现表单输入和应用状态直接的双向绑定。修改输入框的值，message的值也会跟着变化，同样修改message的值，text输入框也跟着变化\n\n```js\n        new Vue({\n          el:\"#app5\",\n          data:{\n            message:'hello Vue.js'\n          }\n        });\n```\n\n```html\n    <div id=\"app5\">\n    {{message}}\n    <input type=\"text\" v-model=\"message\">\n    </div>\n```\n\n`v-html` 该指令可以输出html文本内容\n\n在上面的例子中{{message}}可以输出内容，会把原始的文本内容输出，如果想显示html内容的话，可以使用v-html指令进行绑定\n\n```html\n    <div id=\"app6\">\n      <p>{{message}}</p>\n      <p><scan v-html=\"message\"></scan></p>\n    </div>\n```\n\n```js\n\t\tvar vue6 = new Vue({\n          el:\"#app6\",\n          data:{\n            message:'<scan style=\"color:red\">Hello Vue.js</scan>'\n          }\n        });\n```\n\n>    1.<scan style=\"color:red\">Hello Vue.js</scan>\n>\n>    2.Hello Vue.js(红色)","slug":"chapter-one-for-vue","published":1,"updated":"2022-11-24T13:38:45.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1dp00004ovkr79mt24h","content":"<h1 id=\"Vue简介\"><a href=\"#Vue简介\" class=\"headerlink\" title=\"Vue简介\"></a>Vue简介</h1><p>Vue是一套用于构建用户界面的<code>渐进式框架</code>,Vue的核心库只关注视图层，Vue通过操控数据来驱动视图层的变化。学习成本不高，下面开始学习Vue吧。</p>\n<p>Vue可以通过页面引入js文件来使用，也可以通过 vue cli创建Vue项目工程，初学者建议先用简单的页面引用js文件，来慢慢熟悉Vue。使用Vue时，要放弃自己操作dom的想法，因为vue会帮你做。</p>\n<a id=\"more\"></a>\n<h1 id=\"引入Vue-js\"><a href=\"#引入Vue-js\" class=\"headerlink\" title=\"引入Vue.js\"></a>引入Vue.js</h1><p>引入Vue.js有多种方式</p>\n<blockquote>\n<p>   1.官网下载js文件，存放到本地，在页面中引入</p>\n<p>   2.直接在页面中引入这段代码</p>\n   <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;    <span class=\"comment\">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"xml\">&gt;    <span class=\"comment\">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span>/&gt;</span></span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n<h1 id=\"第一Vue实例\"><a href=\"#第一Vue实例\" class=\"headerlink\" title=\"第一Vue实例\"></a>第一Vue实例</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"ltr\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\">      window.onload=function()&#123;</span><br><span class=\"line\">        new Vue(&#123;</span><br><span class=\"line\">          el:'#my',//2.0以后版本不允许直接挂载到html,body等元素标签上</span><br><span class=\"line\">          data:&#123;</span><br><span class=\"line\">            msg:'hello word!'</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"my\"</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;msg&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>访问页面输出内容：</p>\n<blockquote>\n<p>   hello word!</p>\n</blockquote>\n<p>1.new Vue()创建了一个vue实例，el表示element，根据ID选择器选中一个dom模块作为该vue的操作区域，在该区域中可以调用vue中的数据，方法等。例如上面的例子，在vue实例中，在data里声明msg数据，在下方Id为my的div中，使用显示vue中定义的内容。</p>\n<h1 id=\"Vue中的指令\"><a href=\"#Vue中的指令\" class=\"headerlink\" title=\"Vue中的指令\"></a>Vue中的指令</h1><p>指令带有前缀：v-，以表示它们是Vue提供的特殊特性，其实就是自定义属性。它们会在渲染的dom上应用特殊的响应式行为。</p>\n<p><code>v-bind</code>  绑定指令，例如：将这个元素节点的title特性和vue中的message属性保持一致，谁的值变化，两个都会同步。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scan</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"message\"</span>&gt;</span>鼠标悬浮一会，会看到弹出的title<span class=\"tag\">&lt;/<span class=\"name\">scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-if</code>、<code>v-else-if</code>、<code>v-else</code> Vue中的条件判断</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app1\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"day==1\"</span>&gt;</span>今天星期一<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"day == 2\"</span>&gt;</span>今天星期二<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>今天星期三<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">\"#app1\"</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    day:<span class=\"number\">3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>v-for</code> 循环指令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">   el:<span class=\"string\">\"#app3\"</span>,</span><br><span class=\"line\">   data:&#123;</span><br><span class=\"line\">        courses:[</span><br><span class=\"line\">         <span class=\"string\">'数学'</span>,<span class=\"string\">'英语'</span>,<span class=\"string\">'语文'</span></span><br><span class=\"line\">        ] <span class=\"comment\">//vue中声明数组</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app3\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"course in courses\"</span>&gt;</span>&#123;&#123;course&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>数学</li>\n<li>英语</li>\n<li>语文</li>\n</ul>\n</blockquote>\n<p>也可以使用索引形式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app3\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(course,index) in courses\"</span>&gt;</span>&#123;&#123;index&#125;&#125;.&#123;&#123;course&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 这里的index表示数组索引 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在Vue中对象数组也用v-for指令来循环</p>\n<p><code>v-on</code> 该指令可以给dom上添加事件，例如：click，load，unload，change，mouseover，mouseout事件等等。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel:<span class=\"string\">\"#app4\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">    \tmessage:<span class=\"string\">'hello Vue.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;<span class=\"comment\">//methods属性中声明vue方法</span></span><br><span class=\"line\">    \treverseMessage:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">this</span>.message = <span class=\"keyword\">this</span>.message.split(<span class=\"string\">' '</span>).reverse().join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app4\"</span>&gt;</span></span><br><span class=\"line\">   \t&#123;&#123;message&#125;&#125;</span><br><span class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"reverseMessage\"</span>&gt;</span>逆转消息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-model</code> 该指令可以实现表单输入和应用状态直接的双向绑定。修改输入框的值，message的值也会跟着变化，同样修改message的值，text输入框也跟着变化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">\"#app5\"</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    message:<span class=\"string\">'hello Vue.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app5\"</span>&gt;</span></span><br><span class=\"line\">&#123;&#123;message&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-html</code> 该指令可以输出html文本内容</p>\n<p>在上面的例子中可以输出内容，会把原始的文本内容输出，如果想显示html内容的话，可以使用v-html指令进行绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app6\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">scan</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">scan</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vue6 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        el:<span class=\"string\">\"#app6\"</span>,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          message:<span class=\"string\">'&lt;scan style=\"color:red\"&gt;Hello Vue.js&lt;/scan&gt;'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   1.<scan style=\"color:red\">Hello Vue.js</scan></p>\n<p>   2.Hello Vue.js(红色)</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"Vue简介\"><a href=\"#Vue简介\" class=\"headerlink\" title=\"Vue简介\"></a>Vue简介</h1><p>Vue是一套用于构建用户界面的<code>渐进式框架</code>,Vue的核心库只关注视图层，Vue通过操控数据来驱动视图层的变化。学习成本不高，下面开始学习Vue吧。</p>\n<p>Vue可以通过页面引入js文件来使用，也可以通过 vue cli创建Vue项目工程，初学者建议先用简单的页面引用js文件，来慢慢熟悉Vue。使用Vue时，要放弃自己操作dom的想法，因为vue会帮你做。</p>","more":"<h1 id=\"引入Vue-js\"><a href=\"#引入Vue-js\" class=\"headerlink\" title=\"引入Vue.js\"></a>引入Vue.js</h1><p>引入Vue.js有多种方式</p>\n<blockquote>\n<p>   1.官网下载js文件，存放到本地，在页面中引入</p>\n<p>   2.直接在页面中引入这段代码</p>\n   <figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;    <span class=\"comment\">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class=\"line\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"xml\">&gt;    <span class=\"comment\">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">&gt;    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span>/&gt;</span></span></span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n<h1 id=\"第一Vue实例\"><a href=\"#第一Vue实例\" class=\"headerlink\" title=\"第一Vue实例\"></a>第一Vue实例</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"ltr\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\">      window.onload=function()&#123;</span><br><span class=\"line\">        new Vue(&#123;</span><br><span class=\"line\">          el:'#my',//2.0以后版本不允许直接挂载到html,body等元素标签上</span><br><span class=\"line\">          data:&#123;</span><br><span class=\"line\">            msg:'hello word!'</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"my\"</span>&gt;</span></span><br><span class=\"line\">      &#123;&#123;msg&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>访问页面输出内容：</p>\n<blockquote>\n<p>   hello word!</p>\n</blockquote>\n<p>1.new Vue()创建了一个vue实例，el表示element，根据ID选择器选中一个dom模块作为该vue的操作区域，在该区域中可以调用vue中的数据，方法等。例如上面的例子，在vue实例中，在data里声明msg数据，在下方Id为my的div中，使用显示vue中定义的内容。</p>\n<h1 id=\"Vue中的指令\"><a href=\"#Vue中的指令\" class=\"headerlink\" title=\"Vue中的指令\"></a>Vue中的指令</h1><p>指令带有前缀：v-，以表示它们是Vue提供的特殊特性，其实就是自定义属性。它们会在渲染的dom上应用特殊的响应式行为。</p>\n<p><code>v-bind</code>  绑定指令，例如：将这个元素节点的title特性和vue中的message属性保持一致，谁的值变化，两个都会同步。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scan</span> <span class=\"attr\">v-bind:title</span>=<span class=\"string\">\"message\"</span>&gt;</span>鼠标悬浮一会，会看到弹出的title<span class=\"tag\">&lt;/<span class=\"name\">scan</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-if</code>、<code>v-else-if</code>、<code>v-else</code> Vue中的条件判断</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app1\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-if</span>=<span class=\"string\">\"day==1\"</span>&gt;</span>今天星期一<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else-if</span>=<span class=\"string\">\"day == 2\"</span>&gt;</span>今天星期二<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-else</span>&gt;</span>今天星期三<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">\"#app1\"</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    day:<span class=\"number\">3</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>v-for</code> 循环指令</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">   el:<span class=\"string\">\"#app3\"</span>,</span><br><span class=\"line\">   data:&#123;</span><br><span class=\"line\">        courses:[</span><br><span class=\"line\">         <span class=\"string\">'数学'</span>,<span class=\"string\">'英语'</span>,<span class=\"string\">'语文'</span></span><br><span class=\"line\">        ] <span class=\"comment\">//vue中声明数组</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app3\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"course in courses\"</span>&gt;</span>&#123;&#123;course&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>数学</li>\n<li>英语</li>\n<li>语文</li>\n</ul>\n</blockquote>\n<p>也可以使用索引形式</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app3\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">\"(course,index) in courses\"</span>&gt;</span>&#123;&#123;index&#125;&#125;.&#123;&#123;course&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 这里的index表示数组索引 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在Vue中对象数组也用v-for指令来循环</p>\n<p><code>v-on</code> 该指令可以给dom上添加事件，例如：click，load，unload，change，mouseover，mouseout事件等等。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">\tel:<span class=\"string\">\"#app4\"</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">    \tmessage:<span class=\"string\">'hello Vue.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;<span class=\"comment\">//methods属性中声明vue方法</span></span><br><span class=\"line\">    \treverseMessage:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">this</span>.message = <span class=\"keyword\">this</span>.message.split(<span class=\"string\">' '</span>).reverse().join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app4\"</span>&gt;</span></span><br><span class=\"line\">   \t&#123;&#123;message&#125;&#125;</span><br><span class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"reverseMessage\"</span>&gt;</span>逆转消息<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-model</code> 该指令可以实现表单输入和应用状态直接的双向绑定。修改输入框的值，message的值也会跟着变化，同样修改message的值，text输入框也跟着变化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">\"#app5\"</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    message:<span class=\"string\">'hello Vue.js'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app5\"</span>&gt;</span></span><br><span class=\"line\">&#123;&#123;message&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"message\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>v-html</code> 该指令可以输出html文本内容</p>\n<p>在上面的例子中可以输出内容，会把原始的文本内容输出，如果想显示html内容的话，可以使用v-html指令进行绑定</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app6\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">scan</span> <span class=\"attr\">v-html</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">scan</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vue6 = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">        el:<span class=\"string\">\"#app6\"</span>,</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">          message:<span class=\"string\">'&lt;scan style=\"color:red\"&gt;Hello Vue.js&lt;/scan&gt;'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   1.<scan style=\"color:red\">Hello Vue.js</scan></p>\n<p>   2.Hello Vue.js(红色)</p>\n</blockquote>"},{"title":"Git（一）","date":"2018-11-19T03:32:34.000Z","_content":"\n# Git\n\n分布式版本管理系统，关键是免费。^_^\n\n# windows install Git\n\n直接从git官网下载安装程序即可，在开始-全部程序-git中有Git Bash 表示安装成功。\n\n# Git config\n\n查看本地user.name，user.email\n\n>    $git config user.name\n>\n>    $git config user.email\n\n设置本地global属性\n\n>    $git config --global user.name \"username\"\n>\n>    $git config --global user.email \"email@163.com\"\n\n# version manager\n\n创建仓库，添加文件，提交版本\n\n<!-- more -->\n\n## mark repository\n\n第一步需要创建一个空目录（也可以是在其他目录下，建议创建新的目录，个人习惯哈）\n\n```shll\n#mkdir learngit   ---创建目录\n#git init      ---初始化成git仓库  pwd 命令可以查看当前目录\n```\n\n## add file\n\n在该目录下创建一个文件readme.md\n\nGit is a version control system.\n\nGit is free software.\n\n把文件添加到仓库中，然后在提交到仓库。\n\n```shll\n#git add readme.md\n#git commit -m \"fisrt git file\"\n```\n\n*git commit -m \"message\"* 文件提交命令，这里为什么需要`add`和`commit`命令呢，因为`add`可以多次添加文件，而`commit`命令只需要执行一次，就可以把之前所有添加的文件提交到仓库中去。 `-m`参数表示本次提交的描述信息。\n\n## change file\n\n打开文件，修改第一行内容  Git is a distributed version control system.\n\n这个时候，可以输入`git status`命令查看文件状态\n\n>    $ git status\n>    On branch master\n>    Changes not staged for commit:\n>      (use \"git add <file>...\" to update what will be committed)\n>      (use \"git checkout -- <file>...\" to discard changes in working directory)\n>\n>            modified:   readme.md\n>\n>    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n>\n\n会告诉你，内容被修改，并且还没有提交，可以使用`git add`命令添加修改，或者`git checkout`放弃修改。\n\n也可以使用`git diff`命令查看具体修改\n\n>    $ git diff\n>    diff --git a/readme.md b/readme.md\n>    index 02086ec..5dfce89 100644\n>    --- a/readme.md\n>    +++ b/readme.md\n>    @@ -1,3 +1,3 @@\n>    -git is a version control system,\n>    +git is a distributed version control system,\n>\n>     git is a free software.\n>    \\ No newline at end of file\n>    warning: LF will be replaced by CRLF in readme.md.\n>    The file will have its original line endings in your working directory.\n>\n\n看到具体修改后，可以进行提交了，操作步骤和添加文件一样，先执行一次`git add`命令后，在查看一下状态\n\n>    $git add readme.md\n\n>    $ git status\n>    warning: LF will be replaced by CRLF in readme.md.\n>    The file will have its original line endings in your working directory.\n>    On branch master\n>    Changes to be committed:\n>      (use \"git reset HEAD <file>...\" to unstage)\n>\n>            modified:   readme.md\n\n>    $ git commit -m \"change file after commit\"\n>    [master warning: LF will be replaced by CRLF in readme.md.\n>    The file will have its original line endings in your working directory.\n>    02df42d] change file after commit\n>    warning: LF will be replaced by CRLF in readme.md.\n>    The file will have its original line endings in your working directory.\n>     1 file changed, 1 insertion(+), 1 deletion(-)\n\n提交完成后，再次查看状态\n\n>    $ git status\n>    On branch master\n>    nothing to commit, working directory clean\n\n可以看到没有内容需要提交。由此总结一下：\n\n1.   修改某个文件，查看状态，会提示有内容修改，并且是未提交状态\n2.   add命令之后，查看状态，提醒文件已经添加，但是还没有提交\n3.   commit 状态恢复成初始状态\n\n# version manager\n\n## 查看版本\n\n多次提交以后，可以是使用`git log`查看往期版本\n\n>    $ git log\n>    commit 981e4f291d6d2174d47dbb78fe10cd4b40e8cf57\n>    Author: gaofeng <gaofeng0527@163.com>\n>    Date:   Mon Nov 19 14:19:27 2018 +0800\n>\n>        update file\n>\n>    commit 02df42d061245b3ee56514f0120079d5b2c9f798\n>    Author: gaofeng <gaofeng0527@163.com>\n>    Date:   Mon Nov 19 11:59:51 2018 +0800\n>\n>        change file after commit\n>\n>    commit f313c7c79377be500c5da315984a8a401ad9f582\n>    Author: gaofeng <gaofeng0527@163.com>\n>    Date:   Mon Nov 19 11:27:55 2018 +0800\n>\n>        wrote a readme file\n\n`git log`命令显示从最近到最远的提交日志\n\n如果觉得内容比较多，可以使用`git log --pretty=oneline`，把内容缩减在一行\n\n>    $ git log --pretty=oneline\n>    981e4f291d6d2174d47dbb78fe10cd4b40e8cf57 update file\n>    02df42d061245b3ee56514f0120079d5b2c9f798 change file after commit\n>    f313c7c79377be500c5da315984a8a401ad9f582 wrote a readme file\n\n## 版本回退\n\n首先我们需要知道，当前版本。在Git中使用*HEAD*表示当前版本，上一个版本*HEAD^*，上上个版本*HEAD^^*，之前n个版本的话，可以使用*HEAD~n*\n\n按照之前的例子的话，最后一次提交应该是`update file`\n\n回退到上一个版本:git reset --hard HEAD^\n\n>    $ git reset --hard HEAD^\n>    HEAD is now at 02df42d change file after commit\n\n查看一下文件内容，是否是自己想要的版本。\n\n版本回退成功之后，在用`git log`查看提交记录的话，就只有两个结果了\n\n>    $ git log\n>    commit 02df42d061245b3ee56514f0120079d5b2c9f798\n>    Author: gaofeng <gaofeng0527@163.com>\n>    Date:   Mon Nov 19 11:59:51 2018 +0800\n>\n>        change file after commit\n>\n>    commit f313c7c79377be500c5da315984a8a401ad9f582\n>    Author: gaofeng <gaofeng0527@163.com>\n>    Date:   Mon Nov 19 11:27:55 2018 +0800\n>\n>        wrote a readme file\n\n我们回发现，在很早之前我们提交的那个版本找不到了，那如果想回到最后那个版本怎么办呢，有一个办法。如果之前的命令行窗口没有关的话，可以获取到想要去的那个commit id号。使用命令：`git reset --hard 981e4f`，981e4f是commit的前几位，不需要输入完整的commit id，git会自动去查找，但是也不能太简约，太简约了git如果找到多个版本，也不知道去哪里了。\n\n>    $ git reset --hard 981e4f\n>    HEAD is now at 981e4f2 update file\n\n看版本又回到之前那个了。\n\n如果命令行已经关了呢，这可咋办呢！！！\n\n放心，Git提供了`reflog`命令，哇咔咔咔，这就可以找到之前的commit id了。\n\n>    $ git reflog\n>    981e4f2 HEAD@{0}: reset: moving to 981e4f\n>    02df42d HEAD@{1}: reset: moving to HEAD^\n>    981e4f2 HEAD@{2}: commit: update file\n>    02df42d HEAD@{3}: commit: change file after commit\n>    f313c7c HEAD@{4}: commit (initial): wrote a readme file\n\n是不是可以舒口气了。","source":"_posts/git-chapter-one.md","raw":"---\ntitle: Git（一）\ndate: 2018-11-19 11:32:34\ntags: [Git]\n---\n\n# Git\n\n分布式版本管理系统，关键是免费。^_^\n\n# windows install Git\n\n直接从git官网下载安装程序即可，在开始-全部程序-git中有Git Bash 表示安装成功。\n\n# Git config\n\n查看本地user.name，user.email\n\n>    $git config user.name\n>\n>    $git config user.email\n\n设置本地global属性\n\n>    $git config --global user.name \"username\"\n>\n>    $git config --global user.email \"email@163.com\"\n\n# version manager\n\n创建仓库，添加文件，提交版本\n\n<!-- more -->\n\n## mark repository\n\n第一步需要创建一个空目录（也可以是在其他目录下，建议创建新的目录，个人习惯哈）\n\n```shll\n#mkdir learngit   ---创建目录\n#git init      ---初始化成git仓库  pwd 命令可以查看当前目录\n```\n\n## add file\n\n在该目录下创建一个文件readme.md\n\nGit is a version control system.\n\nGit is free software.\n\n把文件添加到仓库中，然后在提交到仓库。\n\n```shll\n#git add readme.md\n#git commit -m \"fisrt git file\"\n```\n\n*git commit -m \"message\"* 文件提交命令，这里为什么需要`add`和`commit`命令呢，因为`add`可以多次添加文件，而`commit`命令只需要执行一次，就可以把之前所有添加的文件提交到仓库中去。 `-m`参数表示本次提交的描述信息。\n\n## change file\n\n打开文件，修改第一行内容  Git is a distributed version control system.\n\n这个时候，可以输入`git status`命令查看文件状态\n\n>    $ git status\n>    On branch master\n>    Changes not staged for commit:\n>      (use \"git add <file>...\" to update what will be committed)\n>      (use \"git checkout -- <file>...\" to discard changes in working directory)\n>\n>            modified:   readme.md\n>\n>    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n>\n\n会告诉你，内容被修改，并且还没有提交，可以使用`git add`命令添加修改，或者`git checkout`放弃修改。\n\n也可以使用`git diff`命令查看具体修改\n\n>    $ git diff\n>    diff --git a/readme.md b/readme.md\n>    index 02086ec..5dfce89 100644\n>    --- a/readme.md\n>    +++ b/readme.md\n>    @@ -1,3 +1,3 @@\n>    -git is a version control system,\n>    +git is a distributed version control system,\n>\n>     git is a free software.\n>    \\ No newline at end of file\n>    warning: LF will be replaced by CRLF in readme.md.\n>    The file will have its original line endings in your working directory.\n>\n\n看到具体修改后，可以进行提交了，操作步骤和添加文件一样，先执行一次`git add`命令后，在查看一下状态\n\n>    $git add readme.md\n\n>    $ git status\n>    warning: LF will be replaced by CRLF in readme.md.\n>    The file will have its original line endings in your working directory.\n>    On branch master\n>    Changes to be committed:\n>      (use \"git reset HEAD <file>...\" to unstage)\n>\n>            modified:   readme.md\n\n>    $ git commit -m \"change file after commit\"\n>    [master warning: LF will be replaced by CRLF in readme.md.\n>    The file will have its original line endings in your working directory.\n>    02df42d] change file after commit\n>    warning: LF will be replaced by CRLF in readme.md.\n>    The file will have its original line endings in your working directory.\n>     1 file changed, 1 insertion(+), 1 deletion(-)\n\n提交完成后，再次查看状态\n\n>    $ git status\n>    On branch master\n>    nothing to commit, working directory clean\n\n可以看到没有内容需要提交。由此总结一下：\n\n1.   修改某个文件，查看状态，会提示有内容修改，并且是未提交状态\n2.   add命令之后，查看状态，提醒文件已经添加，但是还没有提交\n3.   commit 状态恢复成初始状态\n\n# version manager\n\n## 查看版本\n\n多次提交以后，可以是使用`git log`查看往期版本\n\n>    $ git log\n>    commit 981e4f291d6d2174d47dbb78fe10cd4b40e8cf57\n>    Author: gaofeng <gaofeng0527@163.com>\n>    Date:   Mon Nov 19 14:19:27 2018 +0800\n>\n>        update file\n>\n>    commit 02df42d061245b3ee56514f0120079d5b2c9f798\n>    Author: gaofeng <gaofeng0527@163.com>\n>    Date:   Mon Nov 19 11:59:51 2018 +0800\n>\n>        change file after commit\n>\n>    commit f313c7c79377be500c5da315984a8a401ad9f582\n>    Author: gaofeng <gaofeng0527@163.com>\n>    Date:   Mon Nov 19 11:27:55 2018 +0800\n>\n>        wrote a readme file\n\n`git log`命令显示从最近到最远的提交日志\n\n如果觉得内容比较多，可以使用`git log --pretty=oneline`，把内容缩减在一行\n\n>    $ git log --pretty=oneline\n>    981e4f291d6d2174d47dbb78fe10cd4b40e8cf57 update file\n>    02df42d061245b3ee56514f0120079d5b2c9f798 change file after commit\n>    f313c7c79377be500c5da315984a8a401ad9f582 wrote a readme file\n\n## 版本回退\n\n首先我们需要知道，当前版本。在Git中使用*HEAD*表示当前版本，上一个版本*HEAD^*，上上个版本*HEAD^^*，之前n个版本的话，可以使用*HEAD~n*\n\n按照之前的例子的话，最后一次提交应该是`update file`\n\n回退到上一个版本:git reset --hard HEAD^\n\n>    $ git reset --hard HEAD^\n>    HEAD is now at 02df42d change file after commit\n\n查看一下文件内容，是否是自己想要的版本。\n\n版本回退成功之后，在用`git log`查看提交记录的话，就只有两个结果了\n\n>    $ git log\n>    commit 02df42d061245b3ee56514f0120079d5b2c9f798\n>    Author: gaofeng <gaofeng0527@163.com>\n>    Date:   Mon Nov 19 11:59:51 2018 +0800\n>\n>        change file after commit\n>\n>    commit f313c7c79377be500c5da315984a8a401ad9f582\n>    Author: gaofeng <gaofeng0527@163.com>\n>    Date:   Mon Nov 19 11:27:55 2018 +0800\n>\n>        wrote a readme file\n\n我们回发现，在很早之前我们提交的那个版本找不到了，那如果想回到最后那个版本怎么办呢，有一个办法。如果之前的命令行窗口没有关的话，可以获取到想要去的那个commit id号。使用命令：`git reset --hard 981e4f`，981e4f是commit的前几位，不需要输入完整的commit id，git会自动去查找，但是也不能太简约，太简约了git如果找到多个版本，也不知道去哪里了。\n\n>    $ git reset --hard 981e4f\n>    HEAD is now at 981e4f2 update file\n\n看版本又回到之前那个了。\n\n如果命令行已经关了呢，这可咋办呢！！！\n\n放心，Git提供了`reflog`命令，哇咔咔咔，这就可以找到之前的commit id了。\n\n>    $ git reflog\n>    981e4f2 HEAD@{0}: reset: moving to 981e4f\n>    02df42d HEAD@{1}: reset: moving to HEAD^\n>    981e4f2 HEAD@{2}: commit: update file\n>    02df42d HEAD@{3}: commit: change file after commit\n>    f313c7c HEAD@{4}: commit (initial): wrote a readme file\n\n是不是可以舒口气了。","slug":"git-chapter-one","published":1,"updated":"2022-11-24T13:38:45.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1du00014ovkrgtj0v3l","content":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><p>分布式版本管理系统，关键是免费。^_^</p>\n<h1 id=\"windows-install-Git\"><a href=\"#windows-install-Git\" class=\"headerlink\" title=\"windows install Git\"></a>windows install Git</h1><p>直接从git官网下载安装程序即可，在开始-全部程序-git中有Git Bash 表示安装成功。</p>\n<h1 id=\"Git-config\"><a href=\"#Git-config\" class=\"headerlink\" title=\"Git config\"></a>Git config</h1><p>查看本地user.name，user.email</p>\n<blockquote>\n<p>   $git config user.name</p>\n<p>   $git config user.email</p>\n</blockquote>\n<p>设置本地global属性</p>\n<blockquote>\n<p>   $git config –global user.name “username”</p>\n<p>   $git config –global user.email “<a href=\"mailto:email@163.com\" target=\"_blank\" rel=\"noopener\">email@163.com</a>“</p>\n</blockquote>\n<h1 id=\"version-manager\"><a href=\"#version-manager\" class=\"headerlink\" title=\"version manager\"></a>version manager</h1><p>创建仓库，添加文件，提交版本</p>\n<a id=\"more\"></a>\n<h2 id=\"mark-repository\"><a href=\"#mark-repository\" class=\"headerlink\" title=\"mark repository\"></a>mark repository</h2><p>第一步需要创建一个空目录（也可以是在其他目录下，建议创建新的目录，个人习惯哈）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#mkdir learngit   ---创建目录</span><br><span class=\"line\">#git init      ---初始化成git仓库  pwd 命令可以查看当前目录</span><br></pre></td></tr></table></figure>\n<h2 id=\"add-file\"><a href=\"#add-file\" class=\"headerlink\" title=\"add file\"></a>add file</h2><p>在该目录下创建一个文件readme.md</p>\n<p>Git is a version control system.</p>\n<p>Git is free software.</p>\n<p>把文件添加到仓库中，然后在提交到仓库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#git add readme.md</span><br><span class=\"line\">#git commit -m &quot;fisrt git file&quot;</span><br></pre></td></tr></table></figure>\n<p><em>git commit -m “message”</em> 文件提交命令，这里为什么需要<code>add</code>和<code>commit</code>命令呢，因为<code>add</code>可以多次添加文件，而<code>commit</code>命令只需要执行一次，就可以把之前所有添加的文件提交到仓库中去。 <code>-m</code>参数表示本次提交的描述信息。</p>\n<h2 id=\"change-file\"><a href=\"#change-file\" class=\"headerlink\" title=\"change file\"></a>change file</h2><p>打开文件，修改第一行内容  Git is a distributed version control system.</p>\n<p>这个时候，可以输入<code>git status</code>命令查看文件状态</p>\n<blockquote>\n<p>   $ git status<br>   On branch master<br>   Changes not staged for commit:<br>     (use “git add <file>…” to update what will be committed)<br>     (use “git checkout – <file>…” to discard changes in working directory)</file></file></p>\n<pre><code>modified:   readme.md\n</code></pre><p>   no changes added to commit (use “git add” and/or “git commit -a”)</p>\n</blockquote>\n<p>会告诉你，内容被修改，并且还没有提交，可以使用<code>git add</code>命令添加修改，或者<code>git checkout</code>放弃修改。</p>\n<p>也可以使用<code>git diff</code>命令查看具体修改</p>\n<blockquote>\n<p>   $ git diff<br>   diff –git a/readme.md b/readme.md<br>   index 02086ec..5dfce89 100644<br>   — a/readme.md<br>   +++ b/readme.md<br>   @@ -1,3 +1,3 @@<br>   -git is a version control system,<br>   +git is a distributed version control system,</p>\n<pre><code>git is a free software.\n</code></pre><p>   \\ No newline at end of file<br>   warning: LF will be replaced by CRLF in readme.md.<br>   The file will have its original line endings in your working directory.</p>\n</blockquote>\n<p>看到具体修改后，可以进行提交了，操作步骤和添加文件一样，先执行一次<code>git add</code>命令后，在查看一下状态</p>\n<blockquote>\n<p>   $git add readme.md</p>\n</blockquote>\n<blockquote>\n<p>   $ git status<br>   warning: LF will be replaced by CRLF in readme.md.<br>   The file will have its original line endings in your working directory.<br>   On branch master<br>   Changes to be committed:<br>     (use “git reset HEAD <file>…” to unstage)</file></p>\n<pre><code>modified:   readme.md\n</code></pre></blockquote>\n<blockquote>\n<p>   $ git commit -m “change file after commit”<br>   [master warning: LF will be replaced by CRLF in readme.md.<br>   The file will have its original line endings in your working directory.<br>   02df42d] change file after commit<br>   warning: LF will be replaced by CRLF in readme.md.<br>   The file will have its original line endings in your working directory.<br>    1 file changed, 1 insertion(+), 1 deletion(-)</p>\n</blockquote>\n<p>提交完成后，再次查看状态</p>\n<blockquote>\n<p>   $ git status<br>   On branch master<br>   nothing to commit, working directory clean</p>\n</blockquote>\n<p>可以看到没有内容需要提交。由此总结一下：</p>\n<ol>\n<li>修改某个文件，查看状态，会提示有内容修改，并且是未提交状态</li>\n<li>add命令之后，查看状态，提醒文件已经添加，但是还没有提交</li>\n<li>commit 状态恢复成初始状态</li>\n</ol>\n<h1 id=\"version-manager-1\"><a href=\"#version-manager-1\" class=\"headerlink\" title=\"version manager\"></a>version manager</h1><h2 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h2><p>多次提交以后，可以是使用<code>git log</code>查看往期版本</p>\n<blockquote>\n<p>   $ git log<br>   commit 981e4f291d6d2174d47dbb78fe10cd4b40e8cf57<br>   Author: gaofeng <a href=\"mailto:&#103;&#x61;&#111;&#102;&#101;&#x6e;&#103;&#48;&#x35;&#50;&#x37;&#64;&#x31;&#54;&#51;&#x2e;&#99;&#111;&#109;\" target=\"_blank\" rel=\"noopener\">&#103;&#x61;&#111;&#102;&#101;&#x6e;&#103;&#48;&#x35;&#50;&#x37;&#64;&#x31;&#54;&#51;&#x2e;&#99;&#111;&#109;</a><br>   Date:   Mon Nov 19 14:19:27 2018 +0800</p>\n<pre><code>update file\n</code></pre><p>   commit 02df42d061245b3ee56514f0120079d5b2c9f798<br>   Author: gaofeng <a href=\"mailto:&#103;&#x61;&#111;&#102;&#x65;&#110;&#103;&#48;&#53;&#50;&#x37;&#64;&#x31;&#x36;&#51;&#46;&#x63;&#111;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#103;&#x61;&#111;&#102;&#x65;&#110;&#103;&#48;&#53;&#50;&#x37;&#64;&#x31;&#x36;&#51;&#46;&#x63;&#111;&#x6d;</a><br>   Date:   Mon Nov 19 11:59:51 2018 +0800</p>\n<pre><code>change file after commit\n</code></pre><p>   commit f313c7c79377be500c5da315984a8a401ad9f582<br>   Author: gaofeng <a href=\"mailto:&#103;&#97;&#111;&#x66;&#x65;&#110;&#x67;&#x30;&#53;&#50;&#55;&#64;&#49;&#54;&#x33;&#x2e;&#99;&#111;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#103;&#97;&#111;&#x66;&#x65;&#110;&#x67;&#x30;&#53;&#50;&#55;&#64;&#49;&#54;&#x33;&#x2e;&#99;&#111;&#x6d;</a><br>   Date:   Mon Nov 19 11:27:55 2018 +0800</p>\n<pre><code>wrote a readme file\n</code></pre></blockquote>\n<p><code>git log</code>命令显示从最近到最远的提交日志</p>\n<p>如果觉得内容比较多，可以使用<code>git log --pretty=oneline</code>，把内容缩减在一行</p>\n<blockquote>\n<p>   $ git log –pretty=oneline<br>   981e4f291d6d2174d47dbb78fe10cd4b40e8cf57 update file<br>   02df42d061245b3ee56514f0120079d5b2c9f798 change file after commit<br>   f313c7c79377be500c5da315984a8a401ad9f582 wrote a readme file</p>\n</blockquote>\n<h2 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h2><p>首先我们需要知道，当前版本。在Git中使用<em>HEAD</em>表示当前版本，上一个版本<em>HEAD^</em>，上上个版本<em>HEAD^^</em>，之前n个版本的话，可以使用<em>HEAD~n</em></p>\n<p>按照之前的例子的话，最后一次提交应该是<code>update file</code></p>\n<p>回退到上一个版本:git reset –hard HEAD^</p>\n<blockquote>\n<p>   $ git reset –hard HEAD^<br>   HEAD is now at 02df42d change file after commit</p>\n</blockquote>\n<p>查看一下文件内容，是否是自己想要的版本。</p>\n<p>版本回退成功之后，在用<code>git log</code>查看提交记录的话，就只有两个结果了</p>\n<blockquote>\n<p>   $ git log<br>   commit 02df42d061245b3ee56514f0120079d5b2c9f798<br>   Author: gaofeng <a href=\"mailto:&#x67;&#97;&#111;&#x66;&#101;&#x6e;&#x67;&#x30;&#x35;&#x32;&#55;&#x40;&#49;&#x36;&#51;&#46;&#x63;&#x6f;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#x67;&#97;&#111;&#x66;&#101;&#x6e;&#x67;&#x30;&#x35;&#x32;&#55;&#x40;&#49;&#x36;&#51;&#46;&#x63;&#x6f;&#x6d;</a><br>   Date:   Mon Nov 19 11:59:51 2018 +0800</p>\n<pre><code>change file after commit\n</code></pre><p>   commit f313c7c79377be500c5da315984a8a401ad9f582<br>   Author: gaofeng <a href=\"mailto:&#x67;&#x61;&#x6f;&#x66;&#x65;&#x6e;&#103;&#x30;&#53;&#x32;&#x37;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#109;\" target=\"_blank\" rel=\"noopener\">&#x67;&#x61;&#x6f;&#x66;&#x65;&#x6e;&#103;&#x30;&#53;&#x32;&#x37;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#109;</a><br>   Date:   Mon Nov 19 11:27:55 2018 +0800</p>\n<pre><code>wrote a readme file\n</code></pre></blockquote>\n<p>我们回发现，在很早之前我们提交的那个版本找不到了，那如果想回到最后那个版本怎么办呢，有一个办法。如果之前的命令行窗口没有关的话，可以获取到想要去的那个commit id号。使用命令：<code>git reset --hard 981e4f</code>，981e4f是commit的前几位，不需要输入完整的commit id，git会自动去查找，但是也不能太简约，太简约了git如果找到多个版本，也不知道去哪里了。</p>\n<blockquote>\n<p>   $ git reset –hard 981e4f<br>   HEAD is now at 981e4f2 update file</p>\n</blockquote>\n<p>看版本又回到之前那个了。</p>\n<p>如果命令行已经关了呢，这可咋办呢！！！</p>\n<p>放心，Git提供了<code>reflog</code>命令，哇咔咔咔，这就可以找到之前的commit id了。</p>\n<blockquote>\n<p>   $ git reflog<br>   981e4f2 HEAD@{0}: reset: moving to 981e4f<br>   02df42d HEAD@{1}: reset: moving to HEAD^<br>   981e4f2 HEAD@{2}: commit: update file<br>   02df42d HEAD@{3}: commit: change file after commit<br>   f313c7c HEAD@{4}: commit (initial): wrote a readme file</p>\n</blockquote>\n<p>是不是可以舒口气了。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h1><p>分布式版本管理系统，关键是免费。^_^</p>\n<h1 id=\"windows-install-Git\"><a href=\"#windows-install-Git\" class=\"headerlink\" title=\"windows install Git\"></a>windows install Git</h1><p>直接从git官网下载安装程序即可，在开始-全部程序-git中有Git Bash 表示安装成功。</p>\n<h1 id=\"Git-config\"><a href=\"#Git-config\" class=\"headerlink\" title=\"Git config\"></a>Git config</h1><p>查看本地user.name，user.email</p>\n<blockquote>\n<p>   $git config user.name</p>\n<p>   $git config user.email</p>\n</blockquote>\n<p>设置本地global属性</p>\n<blockquote>\n<p>   $git config –global user.name “username”</p>\n<p>   $git config –global user.email “<a href=\"mailto:email@163.com\" target=\"_blank\" rel=\"noopener\">email@163.com</a>“</p>\n</blockquote>\n<h1 id=\"version-manager\"><a href=\"#version-manager\" class=\"headerlink\" title=\"version manager\"></a>version manager</h1><p>创建仓库，添加文件，提交版本</p>","more":"<h2 id=\"mark-repository\"><a href=\"#mark-repository\" class=\"headerlink\" title=\"mark repository\"></a>mark repository</h2><p>第一步需要创建一个空目录（也可以是在其他目录下，建议创建新的目录，个人习惯哈）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#mkdir learngit   ---创建目录</span><br><span class=\"line\">#git init      ---初始化成git仓库  pwd 命令可以查看当前目录</span><br></pre></td></tr></table></figure>\n<h2 id=\"add-file\"><a href=\"#add-file\" class=\"headerlink\" title=\"add file\"></a>add file</h2><p>在该目录下创建一个文件readme.md</p>\n<p>Git is a version control system.</p>\n<p>Git is free software.</p>\n<p>把文件添加到仓库中，然后在提交到仓库。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#git add readme.md</span><br><span class=\"line\">#git commit -m &quot;fisrt git file&quot;</span><br></pre></td></tr></table></figure>\n<p><em>git commit -m “message”</em> 文件提交命令，这里为什么需要<code>add</code>和<code>commit</code>命令呢，因为<code>add</code>可以多次添加文件，而<code>commit</code>命令只需要执行一次，就可以把之前所有添加的文件提交到仓库中去。 <code>-m</code>参数表示本次提交的描述信息。</p>\n<h2 id=\"change-file\"><a href=\"#change-file\" class=\"headerlink\" title=\"change file\"></a>change file</h2><p>打开文件，修改第一行内容  Git is a distributed version control system.</p>\n<p>这个时候，可以输入<code>git status</code>命令查看文件状态</p>\n<blockquote>\n<p>   $ git status<br>   On branch master<br>   Changes not staged for commit:<br>     (use “git add <file>…” to update what will be committed)<br>     (use “git checkout – <file>…” to discard changes in working directory)</file></file></p>\n<pre><code>modified:   readme.md\n</code></pre><p>   no changes added to commit (use “git add” and/or “git commit -a”)</p>\n</blockquote>\n<p>会告诉你，内容被修改，并且还没有提交，可以使用<code>git add</code>命令添加修改，或者<code>git checkout</code>放弃修改。</p>\n<p>也可以使用<code>git diff</code>命令查看具体修改</p>\n<blockquote>\n<p>   $ git diff<br>   diff –git a/readme.md b/readme.md<br>   index 02086ec..5dfce89 100644<br>   — a/readme.md<br>   +++ b/readme.md<br>   @@ -1,3 +1,3 @@<br>   -git is a version control system,<br>   +git is a distributed version control system,</p>\n<pre><code>git is a free software.\n</code></pre><p>   \\ No newline at end of file<br>   warning: LF will be replaced by CRLF in readme.md.<br>   The file will have its original line endings in your working directory.</p>\n</blockquote>\n<p>看到具体修改后，可以进行提交了，操作步骤和添加文件一样，先执行一次<code>git add</code>命令后，在查看一下状态</p>\n<blockquote>\n<p>   $git add readme.md</p>\n</blockquote>\n<blockquote>\n<p>   $ git status<br>   warning: LF will be replaced by CRLF in readme.md.<br>   The file will have its original line endings in your working directory.<br>   On branch master<br>   Changes to be committed:<br>     (use “git reset HEAD <file>…” to unstage)</file></p>\n<pre><code>modified:   readme.md\n</code></pre></blockquote>\n<blockquote>\n<p>   $ git commit -m “change file after commit”<br>   [master warning: LF will be replaced by CRLF in readme.md.<br>   The file will have its original line endings in your working directory.<br>   02df42d] change file after commit<br>   warning: LF will be replaced by CRLF in readme.md.<br>   The file will have its original line endings in your working directory.<br>    1 file changed, 1 insertion(+), 1 deletion(-)</p>\n</blockquote>\n<p>提交完成后，再次查看状态</p>\n<blockquote>\n<p>   $ git status<br>   On branch master<br>   nothing to commit, working directory clean</p>\n</blockquote>\n<p>可以看到没有内容需要提交。由此总结一下：</p>\n<ol>\n<li>修改某个文件，查看状态，会提示有内容修改，并且是未提交状态</li>\n<li>add命令之后，查看状态，提醒文件已经添加，但是还没有提交</li>\n<li>commit 状态恢复成初始状态</li>\n</ol>\n<h1 id=\"version-manager-1\"><a href=\"#version-manager-1\" class=\"headerlink\" title=\"version manager\"></a>version manager</h1><h2 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h2><p>多次提交以后，可以是使用<code>git log</code>查看往期版本</p>\n<blockquote>\n<p>   $ git log<br>   commit 981e4f291d6d2174d47dbb78fe10cd4b40e8cf57<br>   Author: gaofeng <a href=\"mailto:&#103;&#x61;&#111;&#102;&#101;&#x6e;&#103;&#48;&#x35;&#50;&#x37;&#64;&#x31;&#54;&#51;&#x2e;&#99;&#111;&#109;\" target=\"_blank\" rel=\"noopener\">&#103;&#x61;&#111;&#102;&#101;&#x6e;&#103;&#48;&#x35;&#50;&#x37;&#64;&#x31;&#54;&#51;&#x2e;&#99;&#111;&#109;</a><br>   Date:   Mon Nov 19 14:19:27 2018 +0800</p>\n<pre><code>update file\n</code></pre><p>   commit 02df42d061245b3ee56514f0120079d5b2c9f798<br>   Author: gaofeng <a href=\"mailto:&#103;&#x61;&#111;&#102;&#x65;&#110;&#103;&#48;&#53;&#50;&#x37;&#64;&#x31;&#x36;&#51;&#46;&#x63;&#111;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#103;&#x61;&#111;&#102;&#x65;&#110;&#103;&#48;&#53;&#50;&#x37;&#64;&#x31;&#x36;&#51;&#46;&#x63;&#111;&#x6d;</a><br>   Date:   Mon Nov 19 11:59:51 2018 +0800</p>\n<pre><code>change file after commit\n</code></pre><p>   commit f313c7c79377be500c5da315984a8a401ad9f582<br>   Author: gaofeng <a href=\"mailto:&#103;&#97;&#111;&#x66;&#x65;&#110;&#x67;&#x30;&#53;&#50;&#55;&#64;&#49;&#54;&#x33;&#x2e;&#99;&#111;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#103;&#97;&#111;&#x66;&#x65;&#110;&#x67;&#x30;&#53;&#50;&#55;&#64;&#49;&#54;&#x33;&#x2e;&#99;&#111;&#x6d;</a><br>   Date:   Mon Nov 19 11:27:55 2018 +0800</p>\n<pre><code>wrote a readme file\n</code></pre></blockquote>\n<p><code>git log</code>命令显示从最近到最远的提交日志</p>\n<p>如果觉得内容比较多，可以使用<code>git log --pretty=oneline</code>，把内容缩减在一行</p>\n<blockquote>\n<p>   $ git log –pretty=oneline<br>   981e4f291d6d2174d47dbb78fe10cd4b40e8cf57 update file<br>   02df42d061245b3ee56514f0120079d5b2c9f798 change file after commit<br>   f313c7c79377be500c5da315984a8a401ad9f582 wrote a readme file</p>\n</blockquote>\n<h2 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h2><p>首先我们需要知道，当前版本。在Git中使用<em>HEAD</em>表示当前版本，上一个版本<em>HEAD^</em>，上上个版本<em>HEAD^^</em>，之前n个版本的话，可以使用<em>HEAD~n</em></p>\n<p>按照之前的例子的话，最后一次提交应该是<code>update file</code></p>\n<p>回退到上一个版本:git reset –hard HEAD^</p>\n<blockquote>\n<p>   $ git reset –hard HEAD^<br>   HEAD is now at 02df42d change file after commit</p>\n</blockquote>\n<p>查看一下文件内容，是否是自己想要的版本。</p>\n<p>版本回退成功之后，在用<code>git log</code>查看提交记录的话，就只有两个结果了</p>\n<blockquote>\n<p>   $ git log<br>   commit 02df42d061245b3ee56514f0120079d5b2c9f798<br>   Author: gaofeng <a href=\"mailto:&#x67;&#97;&#111;&#x66;&#101;&#x6e;&#x67;&#x30;&#x35;&#x32;&#55;&#x40;&#49;&#x36;&#51;&#46;&#x63;&#x6f;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#x67;&#97;&#111;&#x66;&#101;&#x6e;&#x67;&#x30;&#x35;&#x32;&#55;&#x40;&#49;&#x36;&#51;&#46;&#x63;&#x6f;&#x6d;</a><br>   Date:   Mon Nov 19 11:59:51 2018 +0800</p>\n<pre><code>change file after commit\n</code></pre><p>   commit f313c7c79377be500c5da315984a8a401ad9f582<br>   Author: gaofeng <a href=\"mailto:&#x67;&#x61;&#x6f;&#x66;&#x65;&#x6e;&#103;&#x30;&#53;&#x32;&#x37;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#109;\" target=\"_blank\" rel=\"noopener\">&#x67;&#x61;&#x6f;&#x66;&#x65;&#x6e;&#103;&#x30;&#53;&#x32;&#x37;&#x40;&#x31;&#54;&#x33;&#x2e;&#x63;&#x6f;&#109;</a><br>   Date:   Mon Nov 19 11:27:55 2018 +0800</p>\n<pre><code>wrote a readme file\n</code></pre></blockquote>\n<p>我们回发现，在很早之前我们提交的那个版本找不到了，那如果想回到最后那个版本怎么办呢，有一个办法。如果之前的命令行窗口没有关的话，可以获取到想要去的那个commit id号。使用命令：<code>git reset --hard 981e4f</code>，981e4f是commit的前几位，不需要输入完整的commit id，git会自动去查找，但是也不能太简约，太简约了git如果找到多个版本，也不知道去哪里了。</p>\n<blockquote>\n<p>   $ git reset –hard 981e4f<br>   HEAD is now at 981e4f2 update file</p>\n</blockquote>\n<p>看版本又回到之前那个了。</p>\n<p>如果命令行已经关了呢，这可咋办呢！！！</p>\n<p>放心，Git提供了<code>reflog</code>命令，哇咔咔咔，这就可以找到之前的commit id了。</p>\n<blockquote>\n<p>   $ git reflog<br>   981e4f2 HEAD@{0}: reset: moving to 981e4f<br>   02df42d HEAD@{1}: reset: moving to HEAD^<br>   981e4f2 HEAD@{2}: commit: update file<br>   02df42d HEAD@{3}: commit: change file after commit<br>   f313c7c HEAD@{4}: commit (initial): wrote a readme file</p>\n</blockquote>\n<p>是不是可以舒口气了。</p>"},{"title":"Vue中的计算属性和侦听器","date":"2018-11-06T01:36:48.000Z","_content":"\n# 计算属性\n\n当我们要显示一个需要依赖现有属性，通过逻辑运算得到的结果时，vue引入了计算属性的概念。计算属性的值依赖于现有属性，只有当现有属性发生改变的时候，才会重新计算计算属性的值（缓存）。所以，对于任何复杂的逻辑，都应当使用计算属性。\n\n<!-- more -->\n\n# 声明计算属性\n\n```js\n        var vm = new Vue({\n          el:'#my',\n          data:{\n            message:'hello vue.js'\n          },\n          computed:{//声明计算属性\n            reverseMessage:function(){//这里的function是作用在reverseMessage的getter方法上\n              return this.message.split(' ').reverse().join(' ');\n            }\n          }\n        });\n```\n\n```html\n    <div id=\"my\">\n        {{message}}\n        <hr>\n        {{reverseMessage}}<!-- 显示计算属性和显示普通属性一样 -->\n    </div>\n```\n\n>    hello vue.js\n>\n>    vue.js hello\n\n## 计算属性VS方法\n\n```js\n      var vm = new Vue({\n          el:'#my',\n          data:{\n            message:'hello vue.js'\n          },\n          computed:{\n            reverseMessage:function(){\n              return this.message.split(' ').reverse().join(' ');\n            }\n          },\n          methods:{//声明方法\n            rmessage:function(){\n              return this.message.split(' ').reverse().join(' ');\n            }\n          }\n        });\n```\n\n```html\n    <div id=\"my\">\n        {{message}}\n        <hr>\n        {{reverseMessage}}\n        <hr>\n        {{rmessage()}}\n    </div>\n```\n\n>    hello vue.js\n>\n>    vue.js hello\n>\n>    vue.js hello\n\n我们可以看到，效果是一样的，那他们有什么区别呢，想象一下，如果这个结果需要复杂的逻辑运算，消耗大量的资源的话，没调用一次方法，都会消耗一次。而计算属性呢，只计算一次，只有当依赖属性变化的时候才会再次计算，从性能上来讲，肯定是计算属性要高。当然如果不需要使用缓存的话，可以使用方法。\n\n# 侦听器\n\n侦听器的效果和计算属性类是，当需要在数据变化时执行异步或开销较大的操作时可以使用侦听器，例如查询功能。使用 `watch` 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title></title>\n  <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n</head>\n\n<body>\n  <div id=\"watch-example\">\n    <p>\n      Ask a yes/no question:\n      <input v-model=\"question\">\n    </p>\n    <p>{{ answer }}</p>\n  </div>\n  <!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 -->\n  <!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 -->\n  <script src=\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"></script>\n  <script>\n  var watchExampleVM = new Vue({\n    el: '#watch-example',\n    data: {\n      question: '',\n      answer: 'I cannot give you an answer until you ask a question!'\n    },\n    watch: {\n      // 如果 `question` 发生改变，这个函数就会运行\n      question: function (newQuestion, oldQuestion) {\n        this.answer = 'Waiting for you to stop typing...'\n        this.debouncedGetAnswer()\n      }\n    },\n    created: function () {\n      // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。\n      // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率\n      // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于\n      // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，\n      // 请参考：https://lodash.com/docs#debounce\n      this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)\n    },\n    methods: {\n      getAnswer: function () {\n        if (this.question.indexOf('?') === -1) {\n          this.answer = 'Questions usually contain a question mark. ;-)'\n          return\n        }\n        this.answer = 'Thinking...'\n        var vm = this\n        axios.get('https://yesno.wtf/api')\n          .then(function (response) {\n            vm.answer = _.capitalize(response.data.answer)\n          })\n          .catch(function (error) {\n            vm.answer = 'Error! Could not reach the API. ' + error\n          })\n      }\n    }\n  })\n  </script>\n</body>\n\n</html>\n\n```\n\n","source":"_posts/chapter-two-for-vue.md","raw":"---\ntitle: Vue中的计算属性和侦听器\ndate: 2018-11-06 09:36:48\ntags: [vue]\n---\n\n# 计算属性\n\n当我们要显示一个需要依赖现有属性，通过逻辑运算得到的结果时，vue引入了计算属性的概念。计算属性的值依赖于现有属性，只有当现有属性发生改变的时候，才会重新计算计算属性的值（缓存）。所以，对于任何复杂的逻辑，都应当使用计算属性。\n\n<!-- more -->\n\n# 声明计算属性\n\n```js\n        var vm = new Vue({\n          el:'#my',\n          data:{\n            message:'hello vue.js'\n          },\n          computed:{//声明计算属性\n            reverseMessage:function(){//这里的function是作用在reverseMessage的getter方法上\n              return this.message.split(' ').reverse().join(' ');\n            }\n          }\n        });\n```\n\n```html\n    <div id=\"my\">\n        {{message}}\n        <hr>\n        {{reverseMessage}}<!-- 显示计算属性和显示普通属性一样 -->\n    </div>\n```\n\n>    hello vue.js\n>\n>    vue.js hello\n\n## 计算属性VS方法\n\n```js\n      var vm = new Vue({\n          el:'#my',\n          data:{\n            message:'hello vue.js'\n          },\n          computed:{\n            reverseMessage:function(){\n              return this.message.split(' ').reverse().join(' ');\n            }\n          },\n          methods:{//声明方法\n            rmessage:function(){\n              return this.message.split(' ').reverse().join(' ');\n            }\n          }\n        });\n```\n\n```html\n    <div id=\"my\">\n        {{message}}\n        <hr>\n        {{reverseMessage}}\n        <hr>\n        {{rmessage()}}\n    </div>\n```\n\n>    hello vue.js\n>\n>    vue.js hello\n>\n>    vue.js hello\n\n我们可以看到，效果是一样的，那他们有什么区别呢，想象一下，如果这个结果需要复杂的逻辑运算，消耗大量的资源的话，没调用一次方法，都会消耗一次。而计算属性呢，只计算一次，只有当依赖属性变化的时候才会再次计算，从性能上来讲，肯定是计算属性要高。当然如果不需要使用缓存的话，可以使用方法。\n\n# 侦听器\n\n侦听器的效果和计算属性类是，当需要在数据变化时执行异步或开销较大的操作时可以使用侦听器，例如查询功能。使用 `watch` 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\" dir=\"ltr\">\n\n<head>\n  <meta charset=\"utf-8\">\n  <title></title>\n  <script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"></script>\n</head>\n\n<body>\n  <div id=\"watch-example\">\n    <p>\n      Ask a yes/no question:\n      <input v-model=\"question\">\n    </p>\n    <p>{{ answer }}</p>\n  </div>\n  <!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 -->\n  <!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 -->\n  <script src=\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"></script>\n  <script>\n  var watchExampleVM = new Vue({\n    el: '#watch-example',\n    data: {\n      question: '',\n      answer: 'I cannot give you an answer until you ask a question!'\n    },\n    watch: {\n      // 如果 `question` 发生改变，这个函数就会运行\n      question: function (newQuestion, oldQuestion) {\n        this.answer = 'Waiting for you to stop typing...'\n        this.debouncedGetAnswer()\n      }\n    },\n    created: function () {\n      // `_.debounce` 是一个通过 Lodash 限制操作频率的函数。\n      // 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率\n      // AJAX 请求直到用户输入完毕才会发出。想要了解更多关于\n      // `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，\n      // 请参考：https://lodash.com/docs#debounce\n      this.debouncedGetAnswer = _.debounce(this.getAnswer, 500)\n    },\n    methods: {\n      getAnswer: function () {\n        if (this.question.indexOf('?') === -1) {\n          this.answer = 'Questions usually contain a question mark. ;-)'\n          return\n        }\n        this.answer = 'Thinking...'\n        var vm = this\n        axios.get('https://yesno.wtf/api')\n          .then(function (response) {\n            vm.answer = _.capitalize(response.data.answer)\n          })\n          .catch(function (error) {\n            vm.answer = 'Error! Could not reach the API. ' + error\n          })\n      }\n    }\n  })\n  </script>\n</body>\n\n</html>\n\n```\n\n","slug":"chapter-two-for-vue","published":1,"updated":"2022-11-24T13:38:45.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1dz00034ovkgwrtoy27","content":"<h1 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h1><p>当我们要显示一个需要依赖现有属性，通过逻辑运算得到的结果时，vue引入了计算属性的概念。计算属性的值依赖于现有属性，只有当现有属性发生改变的时候，才会重新计算计算属性的值（缓存）。所以，对于任何复杂的逻辑，都应当使用计算属性。</p>\n<a id=\"more\"></a>\n<h1 id=\"声明计算属性\"><a href=\"#声明计算属性\" class=\"headerlink\" title=\"声明计算属性\"></a>声明计算属性</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">'#my'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    message:<span class=\"string\">'hello vue.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed:&#123;<span class=\"comment\">//声明计算属性</span></span><br><span class=\"line\">    reverseMessage:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//这里的function是作用在reverseMessage的getter方法上</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">' '</span>).reverse().join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"my\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;reverseMessage&#125;&#125;<span class=\"comment\">&lt;!-- 显示计算属性和显示普通属性一样 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   hello vue.js</p>\n<p>   vue.js hello</p>\n</blockquote>\n<h2 id=\"计算属性VS方法\"><a href=\"#计算属性VS方法\" class=\"headerlink\" title=\"计算属性VS方法\"></a>计算属性VS方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">'#my'</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">      message:<span class=\"string\">'hello vue.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed:&#123;</span><br><span class=\"line\">      reverseMessage:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">' '</span>).reverse().join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;<span class=\"comment\">//声明方法</span></span><br><span class=\"line\">      rmessage:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">' '</span>).reverse().join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"my\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;reverseMessage&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;rmessage()&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   hello vue.js</p>\n<p>   vue.js hello</p>\n<p>   vue.js hello</p>\n</blockquote>\n<p>我们可以看到，效果是一样的，那他们有什么区别呢，想象一下，如果这个结果需要复杂的逻辑运算，消耗大量的资源的话，没调用一次方法，都会消耗一次。而计算属性呢，只计算一次，只有当依赖属性变化的时候才会再次计算，从性能上来讲，肯定是计算属性要高。当然如果不需要使用缓存的话，可以使用方法。</p>\n<h1 id=\"侦听器\"><a href=\"#侦听器\" class=\"headerlink\" title=\"侦听器\"></a>侦听器</h1><p>侦听器的效果和计算属性类是，当需要在数据变化时执行异步或开销较大的操作时可以使用侦听器，例如查询功能。使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"ltr\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"watch-example\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      Ask a yes/no question:</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"question\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">'#watch-example'</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      question: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      answer: <span class=\"string\">'I cannot give you an answer until you ask a question!'</span></span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 如果 `question` 发生改变，这个函数就会运行</span></span></span><br><span class=\"line\"><span class=\"javascript\">      question: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion, oldQuestion</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Waiting for you to stop typing...'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.debouncedGetAnswer()</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"javascript\">    created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 请参考：https://lodash.com/docs#debounce</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.debouncedGetAnswer = _.debounce(<span class=\"keyword\">this</span>.getAnswer, <span class=\"number\">500</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      getAnswer: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.question.indexOf(<span class=\"string\">'?'</span>) === <span class=\"number\">-1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Questions usually contain a question mark. ;-)'</span></span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Thinking...'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></span></span><br><span class=\"line\"><span class=\"javascript\">        axios.get(<span class=\"string\">'https://yesno.wtf/api'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">          .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span></span><br><span class=\"line\">            vm.answer = _.capitalize(response.data.answer)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\"><span class=\"javascript\">          .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            vm.answer = <span class=\"string\">'Error! Could not reach the API. '</span> + error</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h1><p>当我们要显示一个需要依赖现有属性，通过逻辑运算得到的结果时，vue引入了计算属性的概念。计算属性的值依赖于现有属性，只有当现有属性发生改变的时候，才会重新计算计算属性的值（缓存）。所以，对于任何复杂的逻辑，都应当使用计算属性。</p>","more":"<h1 id=\"声明计算属性\"><a href=\"#声明计算属性\" class=\"headerlink\" title=\"声明计算属性\"></a>声明计算属性</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el:<span class=\"string\">'#my'</span>,</span><br><span class=\"line\">  data:&#123;</span><br><span class=\"line\">    message:<span class=\"string\">'hello vue.js'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed:&#123;<span class=\"comment\">//声明计算属性</span></span><br><span class=\"line\">    reverseMessage:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">//这里的function是作用在reverseMessage的getter方法上</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">' '</span>).reverse().join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"my\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;reverseMessage&#125;&#125;<span class=\"comment\">&lt;!-- 显示计算属性和显示普通属性一样 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   hello vue.js</p>\n<p>   vue.js hello</p>\n</blockquote>\n<h2 id=\"计算属性VS方法\"><a href=\"#计算属性VS方法\" class=\"headerlink\" title=\"计算属性VS方法\"></a>计算属性VS方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    el:<span class=\"string\">'#my'</span>,</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">      message:<span class=\"string\">'hello vue.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed:&#123;</span><br><span class=\"line\">      reverseMessage:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">' '</span>).reverse().join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods:&#123;<span class=\"comment\">//声明方法</span></span><br><span class=\"line\">      rmessage:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.message.split(<span class=\"string\">' '</span>).reverse().join(<span class=\"string\">' '</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"my\"</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;message&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;reverseMessage&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">hr</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;rmessage()&#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   hello vue.js</p>\n<p>   vue.js hello</p>\n<p>   vue.js hello</p>\n</blockquote>\n<p>我们可以看到，效果是一样的，那他们有什么区别呢，想象一下，如果这个结果需要复杂的逻辑运算，消耗大量的资源的话，没调用一次方法，都会消耗一次。而计算属性呢，只计算一次，只有当依赖属性变化的时候才会再次计算，从性能上来讲，肯定是计算属性要高。当然如果不需要使用缓存的话，可以使用方法。</p>\n<h1 id=\"侦听器\"><a href=\"#侦听器\" class=\"headerlink\" title=\"侦听器\"></a>侦听器</h1><p>侦听器的效果和计算属性类是，当需要在数据变化时执行异步或开销较大的操作时可以使用侦听器，例如查询功能。使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span> <span class=\"attr\">dir</span>=<span class=\"string\">\"ltr\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"watch-example\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      Ask a yes/no question:</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">\"question\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> watchExampleVM = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    el: <span class=\"string\">'#watch-example'</span>,</span></span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      question: <span class=\"string\">''</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      answer: <span class=\"string\">'I cannot give you an answer until you ask a question!'</span></span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    watch: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 如果 `question` 发生改变，这个函数就会运行</span></span></span><br><span class=\"line\"><span class=\"javascript\">      question: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">newQuestion, oldQuestion</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Waiting for you to stop typing...'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.debouncedGetAnswer()</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"javascript\">    created: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 请参考：https://lodash.com/docs#debounce</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.debouncedGetAnswer = _.debounce(<span class=\"keyword\">this</span>.getAnswer, <span class=\"number\">500</span>)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">      getAnswer: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.question.indexOf(<span class=\"string\">'?'</span>) === <span class=\"number\">-1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Questions usually contain a question mark. ;-)'</span></span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span></span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">this</span>.answer = <span class=\"string\">'Thinking...'</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> vm = <span class=\"keyword\">this</span></span></span><br><span class=\"line\"><span class=\"javascript\">        axios.get(<span class=\"string\">'https://yesno.wtf/api'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">          .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">response</span>) </span>&#123;</span></span><br><span class=\"line\">            vm.answer = _.capitalize(response.data.answer)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\"><span class=\"javascript\">          .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            vm.answer = <span class=\"string\">'Error! Could not reach the API. '</span> + error</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"eclipse 创建maven项目，并添加spring依赖","date":"2016-11-28T03:56:21.000Z","_content":"\n## Maven 下载安装\n\n>    1.先去官网下载需要的maven版本 :http://maven.apache.org/\n>\n>    下载完成后，解压到想要安装的目录即可，免安装的。\n>\n>    2.配置Maven环境变量，和jdk环境变量配置大同小异，可参考：http://jingyan.baidu.com/article/cb5d61050b8ee7005d2fe04e.html\n\n<!--more-->\n\n## Eclipse添加Maven支持\n\n>    1.打开eclipse的Help菜单Help->Eclipse Marketplace搜索关键字maven到插件Maven Integration for Eclipse 并点击安装即可\n>\n>    2.安装完成后，重启eclipse；为了使得Eclipse中安装的Maven插件，同windows中安装的那个相同，需要让eclipse中的maven重新定位一下，点击Window -> Preference -> Maven -> Installation -> Add进行设置\n\nMaven还有很多内容，这里不是以Maven为主，所以要了解更多的Maven知识请参考：http://www.yiibai.com/maven/\n\n# eclipse篇\n\n## 使用maven插件在eclipse中创建Maven项目\n\n1.File-->New-->other-->Maven-->Maven Project-->next 创建Maven项目，如图：\n\n![](http://ohhigdkar.bkt.clouddn.com/1.png)\n\n\n\n![](http://ohhigdkar.bkt.clouddn.com/2.png)\n\n![](http://ohhigdkar.bkt.clouddn.com/3.png)\n\n![](http://ohhigdkar.bkt.clouddn.com/4.png)\n\n成功创建带有pom.xml文件的项目工程\n\n![](http://ohhigdkar.bkt.clouddn.com/5.png)\n\n# Maven & Spring篇\n\n## pom.xml详解\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.spring</groupId><!-- 项目或组织的唯一标志，并且配置时生成的路径也是依据这个配置的，例如 com.spring  生成的目录com/spring -->\n  <artifactId>mvn</artifactId><!-- 项目的通用名 -->\n  <packaging>war</packaging><!-- 项目打包方式，常用方式有war,jar等 -->\n  <version>0.0.1-SNAPSHOT</version><!-- 版本 -->\n  <name>mvn Maven Webapp</name><!-- 描述信息，可选 -->\n  <url>http://maven.apache.org</url><!-- 一般都会写开发团队或者公司的连接，可选 -->\n  \n  <!-- 设置上下文属性 -->\n  <properties>\n  \t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><!-- 统一项目编码 -->\n  \t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><!-- 输出统一编码 -->\n  \t<java.version>1.8</java.version><!-- jdk版本 -->\n  </properties>\n  \n  <!-- 依赖关系-->\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId><!-- 添加junit依赖，依赖的坐标可以去maven中央仓库查询 -->\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n       <!-- Scope表示这个library存在的时期，有compile，runtime，test和provided，provided表示在运行时这个app所在的device会给他提供,test表示测试的时候 -->  \n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n  \n   <!-- Build 节点配置的是项目编译的时候需要用到的一些东西,一个build节点下面有一个plugins子节点，在下面有多个plugin子节点，每个plugin子节点有groupId，artifactId，version等子节点，含义跟上面说到的基本一样。此外，plugin节点一般还有configuration节点，表示对这个plugin进一步的配置-->  \n  <build>\n    <finalName>mvn</finalName>\n  </build>\n</project>\n\n```\n\n\n\n## 在项目中添加spring依赖\n\n1.确定要使用的spring版本，在*properties* 节点中添加下面语句\n\n```xml\n<org.springframework.version>4.1.6.RELEASE</org.springframework.version><!-- 方便控制spring版本统一 -->\n```\n\n2.添加spring-context依赖，可以先去maven中央仓库http://http://mvnrepository.com/中查找坐标，如图：\n\n![](http://ohhigdkar.bkt.clouddn.com/springse.png)\n\n\n\n获取spring context的坐标\n\n![](http://ohhigdkar.bkt.clouddn.com/springcontext.png)\n\n把下面的依赖粘贴进pom.xml配置文件中的*dependencies*节点下。因为我们上面配置过spring的版本，所以这里的version可已修改如下：\n\n```xml\n<!-- spring context 依赖 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context</artifactId>\n\t\t\t<version>${org.springframework.version}</version>\n\t\t\t<scope>runtime</scope><!-- 项目运行时加载依赖 -->\n\t\t</dependency>\n```\n\n这里有一个地方需要注意一下，*javax.servlet* 有的开发环境中是没有这个包的，也需要添加依赖，但是在正事运行环境是自带这个包的，也就是说打包部署的时候要去掉这个依赖，因此在开发环境配置该依赖的时候，要设置*scope* 属性，如：\n\n```xml\n        <dependency>\n\t\t\t<groupId>javax.servlet</groupId>\n\t\t\t<artifactId>servlet-api</artifactId>\n\t\t\t<version>2.4</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>  \n```\n\n>    目前<scope>可以使用5个值：\n>\n>       1.compile，缺省值，适用于所有阶段，会随着项目一起发布。 \n>\n>    2.   provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。\n>\n>    3.   runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。 \n>\n>    4.   test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。\n>\n>    5.   system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。\n>\n>         ​\n\n\n\n3.其他依赖如上步骤，添加完依赖后的pom.xml如下：\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.spring</groupId><!-- 项目或组织的唯一标志，并且配置时生成的路径也是依据这个配置的，例如 com.spring \n\t\t生成的目录com/spring -->\n\t<artifactId>mvn</artifactId><!-- 项目的通用名 -->\n\t<packaging>war</packaging><!-- 项目打包方式，常用方式有war,jar等 -->\n\t<version>0.0.1-SNAPSHOT</version><!-- 版本 -->\n\t<name>mvn Maven Webapp</name><!-- 描述信息，可选 -->\n\t<url>http://maven.apache.org</url><!-- 一般都会写开发团队或者公司的连接，可选 -->\n\n\t<!-- 设置上下文属性 -->\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><!-- \n\t\t\t统一项目编码 -->\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><!-- \n\t\t\t输出统一编码 -->\n\t\t<java.version>1.8</java.version><!-- jdk版本 -->\n\t\t<org.springframework.version>4.1.6.RELEASE</org.springframework.version><!-- \n\t\t\t方便控制spring版本统一 -->\n\t</properties>\n\n\t<!-- 依赖关系 -->\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>junit</groupId><!-- 添加junit依赖，依赖的坐标可以去maven中央仓库查询 -->\n\t\t\t<artifactId>junit</artifactId>\n\t\t\t<version>3.8.1</version>\n\t\t\t<!-- Scope表示这个library存在的时期，有compile，runtime，test和provided，provided表示在运行时这个app所在的device会给他提供,test表示测试的时候 -->\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<!-- spring context 依赖 上例定义的对spring-context的依赖，spring-context实现了Spring注入容器并且依赖：spring-core,spring-expression,spring-aop以及spring-beans。这些依赖包使容器可以支持Spring的一些核心技术：Spring核心组件,Spring \n\t\t\tEL表达式 (SpEL), 面向切面编程,JavaBean机制。 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context</artifactId>\n\t\t\t<version>${org.springframework.version}</version>\n\t\t\t<scope>runtime</scope><!-- 项目运行时加载依赖 -->\n\t\t</dependency>\n\n\t\t<!-- spring 持久化依赖 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-orm</artifactId>\n\t\t\t<version>${org.springframework.version}</version>\n\t\t</dependency>\n\t\t\n\t\t<!--spring mvc 要增加Spring Web和Servlet支持，需要在上面已配置的pom文件中额外增加两个依赖 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-web</artifactId>\n\t\t\t<version>${org.springframework.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-webmvc</artifactId>\n\t\t\t<version>${org.springframework.version}</version>\n\t\t</dependency>\n\n\t</dependencies>\n\t<!-- Build 节点配置的是项目编译的时候需要用到的一些东西,一个build节点下面有一个plugins子节点，在下面有多个plugin子节点，每个plugin子节点有groupId，artifactId，version等子节点，含义跟上面说到的基本一样。此外，plugin节点一般还有configuration节点，表示对这个plugin进一步的配置 -->\n\t<build>\n\t\t<finalName>mvn</finalName>\n\t</build>\n</project>\n```\n\n\n\n## 编写spring mvc例子\n\n### 配置DispatcherServlet\n\n```java\npackage config;\n\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n/**\n * 传统的方式，web应用添加spring mvc框架需要在web.xml配置文件中添加DispatcherServlet映射\n * 借助于Servlet3规范和spring 3.1的功能增加，我们可以在java类中进行DispatcherServlet的映射了\n * AbstractAnnotationConfigDispatcherServletInitializer 类剖析\n * 在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口类，如果能发现的话，就用来配置Servlet容器。\n * spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务\n * 交给他们来完成。Spring 3.2进入了一个便利的WebApplicationInitializer基础实现，也就是AbstractAnnotationConfigDispatcherServletInitializer。\n * 因此，当我们的类实现了这个接口，同时也就实现了WebApplicationInitializer，所以当部署到servlet3.0容器中的时候，容器会自动发现它，并用它来配置servlet上下文\n * @author Administrator\n *\n */\npublic class SpringWebAppInitialazer extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n\t@Override\n\tprotected Class<?>[] getRootConfigClasses() {\n\t\treturn new Class<?>[]{RootConfig.class};\n\t}\n\n\t/**\n\t * 指定一个配置类\n\t */\n\t@Override\n\tprotected Class<?>[] getServletConfigClasses() {\n\t\treturn new Class<?>[]{WebConfig.class};\n\t}\n\n\t/**\n\t * 将一个或多个路径映射到DispatcherServlet上\n\t * 也就是所有的请求都先到DispactcherServlet前端控制器中（如果不明白，先去了解一下spring mvc运行原理）\n\t */\n\t@Override\n\tprotected String[] getServletMappings() {\n\t\treturn new String[]{\"/\"};\n\t}\n\n}\n\n```\n\n### 创建java配置类\n\n```java\npackage config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\n\nimport controller.CController;\n\n/**\n * spring 配置类，DispactcherServlet会使用该类配置的Bean\n * ComponentScan 注解会自动扫描某个包，这里用了basePackageClasses会已配置的某个类为基础扫描该类所在包，或该包的子包\n * 使用该方式方便后期重构\n * @author Administrator\n *\n */\n@EnableWebMvc\n@Configuration\n@ComponentScan(basePackageClasses={CController.class})\npublic class WebConfig extends WebMvcConfigurerAdapter{\n\n\t/**\n\t * 配置jsp视图解析器\n\t * @return\n\t */\n\t@Bean\n\tpublic ViewResolver viewResolver(){\n\t\tInternalResourceViewResolver resolver = new InternalResourceViewResolver();\n\t\tresolver.setPrefix(\"/WEB-INF/views/\");\n\t\tresolver.setSuffix(\".jsp\");\n\t\tresolver.setExposeContextBeansAsAttributes(true);\n\t\treturn resolver;\n\t}\n\n\t/**\n\t * 配置静态资源的处理\n\t * DispatcherServlet将对静态资源的请求转发到Servlet容器默认的Servlet上，而不是DispatcherServlet本身处理\n\t */\n\t@Override\n\tpublic void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {\n\t\tconfigurer.enable();\n\t}\n\t\n\t\n}\n\n```\n\n### 创建RootConfig.java\n\n```java\npackage config;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\nimport controller.CController;\n\n/**\n * 该类在本实例中没有用到，暂不解释\n * @author Administrator\n *\n */\n@Configuration\n@ComponentScan(basePackageClasses={CController.class})\npublic class RootConfig {\n\n}\n\n```\n\n### 编写controller\n\n```java\npackage controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@Controller\npublic class IndexController {\n\n\t@RequestMapping(value=\"/index\",method=RequestMethod.GET)\n\tpublic String index() {\n\t\treturn \"index\";\n\t}\n}\n\n```\n\n### 编写jsp\n\n```html\n<html>\n<body>\n<h2>Hello World!</h2>\n</body>\n</html>\n\n```\n\n### 启动tomcat\n\n>    http://localhost:8077/springHello/index 测试\n\n![](http://ohhigdkar.bkt.clouddn.com/hell.png)\n\n### 注意\n\n>    1.该springmvc实例需要在servlet 3.0容器，tomcat7.0或以上版本运行\n\n","source":"_posts/eclipse-create-Maven-Project.md","raw":"---\ntitle: eclipse 创建maven项目，并添加spring依赖\ndate: 2016-11-28 11:56:21\ntags: [spring,maven]\n---\n\n## Maven 下载安装\n\n>    1.先去官网下载需要的maven版本 :http://maven.apache.org/\n>\n>    下载完成后，解压到想要安装的目录即可，免安装的。\n>\n>    2.配置Maven环境变量，和jdk环境变量配置大同小异，可参考：http://jingyan.baidu.com/article/cb5d61050b8ee7005d2fe04e.html\n\n<!--more-->\n\n## Eclipse添加Maven支持\n\n>    1.打开eclipse的Help菜单Help->Eclipse Marketplace搜索关键字maven到插件Maven Integration for Eclipse 并点击安装即可\n>\n>    2.安装完成后，重启eclipse；为了使得Eclipse中安装的Maven插件，同windows中安装的那个相同，需要让eclipse中的maven重新定位一下，点击Window -> Preference -> Maven -> Installation -> Add进行设置\n\nMaven还有很多内容，这里不是以Maven为主，所以要了解更多的Maven知识请参考：http://www.yiibai.com/maven/\n\n# eclipse篇\n\n## 使用maven插件在eclipse中创建Maven项目\n\n1.File-->New-->other-->Maven-->Maven Project-->next 创建Maven项目，如图：\n\n![](http://ohhigdkar.bkt.clouddn.com/1.png)\n\n\n\n![](http://ohhigdkar.bkt.clouddn.com/2.png)\n\n![](http://ohhigdkar.bkt.clouddn.com/3.png)\n\n![](http://ohhigdkar.bkt.clouddn.com/4.png)\n\n成功创建带有pom.xml文件的项目工程\n\n![](http://ohhigdkar.bkt.clouddn.com/5.png)\n\n# Maven & Spring篇\n\n## pom.xml详解\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.spring</groupId><!-- 项目或组织的唯一标志，并且配置时生成的路径也是依据这个配置的，例如 com.spring  生成的目录com/spring -->\n  <artifactId>mvn</artifactId><!-- 项目的通用名 -->\n  <packaging>war</packaging><!-- 项目打包方式，常用方式有war,jar等 -->\n  <version>0.0.1-SNAPSHOT</version><!-- 版本 -->\n  <name>mvn Maven Webapp</name><!-- 描述信息，可选 -->\n  <url>http://maven.apache.org</url><!-- 一般都会写开发团队或者公司的连接，可选 -->\n  \n  <!-- 设置上下文属性 -->\n  <properties>\n  \t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><!-- 统一项目编码 -->\n  \t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><!-- 输出统一编码 -->\n  \t<java.version>1.8</java.version><!-- jdk版本 -->\n  </properties>\n  \n  <!-- 依赖关系-->\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId><!-- 添加junit依赖，依赖的坐标可以去maven中央仓库查询 -->\n      <artifactId>junit</artifactId>\n      <version>3.8.1</version>\n       <!-- Scope表示这个library存在的时期，有compile，runtime，test和provided，provided表示在运行时这个app所在的device会给他提供,test表示测试的时候 -->  \n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n  \n   <!-- Build 节点配置的是项目编译的时候需要用到的一些东西,一个build节点下面有一个plugins子节点，在下面有多个plugin子节点，每个plugin子节点有groupId，artifactId，version等子节点，含义跟上面说到的基本一样。此外，plugin节点一般还有configuration节点，表示对这个plugin进一步的配置-->  \n  <build>\n    <finalName>mvn</finalName>\n  </build>\n</project>\n\n```\n\n\n\n## 在项目中添加spring依赖\n\n1.确定要使用的spring版本，在*properties* 节点中添加下面语句\n\n```xml\n<org.springframework.version>4.1.6.RELEASE</org.springframework.version><!-- 方便控制spring版本统一 -->\n```\n\n2.添加spring-context依赖，可以先去maven中央仓库http://http://mvnrepository.com/中查找坐标，如图：\n\n![](http://ohhigdkar.bkt.clouddn.com/springse.png)\n\n\n\n获取spring context的坐标\n\n![](http://ohhigdkar.bkt.clouddn.com/springcontext.png)\n\n把下面的依赖粘贴进pom.xml配置文件中的*dependencies*节点下。因为我们上面配置过spring的版本，所以这里的version可已修改如下：\n\n```xml\n<!-- spring context 依赖 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context</artifactId>\n\t\t\t<version>${org.springframework.version}</version>\n\t\t\t<scope>runtime</scope><!-- 项目运行时加载依赖 -->\n\t\t</dependency>\n```\n\n这里有一个地方需要注意一下，*javax.servlet* 有的开发环境中是没有这个包的，也需要添加依赖，但是在正事运行环境是自带这个包的，也就是说打包部署的时候要去掉这个依赖，因此在开发环境配置该依赖的时候，要设置*scope* 属性，如：\n\n```xml\n        <dependency>\n\t\t\t<groupId>javax.servlet</groupId>\n\t\t\t<artifactId>servlet-api</artifactId>\n\t\t\t<version>2.4</version>\n\t\t\t<scope>provided</scope>\n\t\t</dependency>  \n```\n\n>    目前<scope>可以使用5个值：\n>\n>       1.compile，缺省值，适用于所有阶段，会随着项目一起发布。 \n>\n>    2.   provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。\n>\n>    3.   runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。 \n>\n>    4.   test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。\n>\n>    5.   system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。\n>\n>         ​\n\n\n\n3.其他依赖如上步骤，添加完依赖后的pom.xml如下：\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n\t<modelVersion>4.0.0</modelVersion>\n\t<groupId>com.spring</groupId><!-- 项目或组织的唯一标志，并且配置时生成的路径也是依据这个配置的，例如 com.spring \n\t\t生成的目录com/spring -->\n\t<artifactId>mvn</artifactId><!-- 项目的通用名 -->\n\t<packaging>war</packaging><!-- 项目打包方式，常用方式有war,jar等 -->\n\t<version>0.0.1-SNAPSHOT</version><!-- 版本 -->\n\t<name>mvn Maven Webapp</name><!-- 描述信息，可选 -->\n\t<url>http://maven.apache.org</url><!-- 一般都会写开发团队或者公司的连接，可选 -->\n\n\t<!-- 设置上下文属性 -->\n\t<properties>\n\t\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding><!-- \n\t\t\t统一项目编码 -->\n\t\t<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding><!-- \n\t\t\t输出统一编码 -->\n\t\t<java.version>1.8</java.version><!-- jdk版本 -->\n\t\t<org.springframework.version>4.1.6.RELEASE</org.springframework.version><!-- \n\t\t\t方便控制spring版本统一 -->\n\t</properties>\n\n\t<!-- 依赖关系 -->\n\t<dependencies>\n\t\t<dependency>\n\t\t\t<groupId>junit</groupId><!-- 添加junit依赖，依赖的坐标可以去maven中央仓库查询 -->\n\t\t\t<artifactId>junit</artifactId>\n\t\t\t<version>3.8.1</version>\n\t\t\t<!-- Scope表示这个library存在的时期，有compile，runtime，test和provided，provided表示在运行时这个app所在的device会给他提供,test表示测试的时候 -->\n\t\t\t<scope>test</scope>\n\t\t</dependency>\n\t\t<!-- spring context 依赖 上例定义的对spring-context的依赖，spring-context实现了Spring注入容器并且依赖：spring-core,spring-expression,spring-aop以及spring-beans。这些依赖包使容器可以支持Spring的一些核心技术：Spring核心组件,Spring \n\t\t\tEL表达式 (SpEL), 面向切面编程,JavaBean机制。 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-context</artifactId>\n\t\t\t<version>${org.springframework.version}</version>\n\t\t\t<scope>runtime</scope><!-- 项目运行时加载依赖 -->\n\t\t</dependency>\n\n\t\t<!-- spring 持久化依赖 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-orm</artifactId>\n\t\t\t<version>${org.springframework.version}</version>\n\t\t</dependency>\n\t\t\n\t\t<!--spring mvc 要增加Spring Web和Servlet支持，需要在上面已配置的pom文件中额外增加两个依赖 -->\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-web</artifactId>\n\t\t\t<version>${org.springframework.version}</version>\n\t\t</dependency>\n\t\t<dependency>\n\t\t\t<groupId>org.springframework</groupId>\n\t\t\t<artifactId>spring-webmvc</artifactId>\n\t\t\t<version>${org.springframework.version}</version>\n\t\t</dependency>\n\n\t</dependencies>\n\t<!-- Build 节点配置的是项目编译的时候需要用到的一些东西,一个build节点下面有一个plugins子节点，在下面有多个plugin子节点，每个plugin子节点有groupId，artifactId，version等子节点，含义跟上面说到的基本一样。此外，plugin节点一般还有configuration节点，表示对这个plugin进一步的配置 -->\n\t<build>\n\t\t<finalName>mvn</finalName>\n\t</build>\n</project>\n```\n\n\n\n## 编写spring mvc例子\n\n### 配置DispatcherServlet\n\n```java\npackage config;\n\nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;\n/**\n * 传统的方式，web应用添加spring mvc框架需要在web.xml配置文件中添加DispatcherServlet映射\n * 借助于Servlet3规范和spring 3.1的功能增加，我们可以在java类中进行DispatcherServlet的映射了\n * AbstractAnnotationConfigDispatcherServletInitializer 类剖析\n * 在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口类，如果能发现的话，就用来配置Servlet容器。\n * spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务\n * 交给他们来完成。Spring 3.2进入了一个便利的WebApplicationInitializer基础实现，也就是AbstractAnnotationConfigDispatcherServletInitializer。\n * 因此，当我们的类实现了这个接口，同时也就实现了WebApplicationInitializer，所以当部署到servlet3.0容器中的时候，容器会自动发现它，并用它来配置servlet上下文\n * @author Administrator\n *\n */\npublic class SpringWebAppInitialazer extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n\t@Override\n\tprotected Class<?>[] getRootConfigClasses() {\n\t\treturn new Class<?>[]{RootConfig.class};\n\t}\n\n\t/**\n\t * 指定一个配置类\n\t */\n\t@Override\n\tprotected Class<?>[] getServletConfigClasses() {\n\t\treturn new Class<?>[]{WebConfig.class};\n\t}\n\n\t/**\n\t * 将一个或多个路径映射到DispatcherServlet上\n\t * 也就是所有的请求都先到DispactcherServlet前端控制器中（如果不明白，先去了解一下spring mvc运行原理）\n\t */\n\t@Override\n\tprotected String[] getServletMappings() {\n\t\treturn new String[]{\"/\"};\n\t}\n\n}\n\n```\n\n### 创建java配置类\n\n```java\npackage config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.ViewResolver;\nimport org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\n\nimport controller.CController;\n\n/**\n * spring 配置类，DispactcherServlet会使用该类配置的Bean\n * ComponentScan 注解会自动扫描某个包，这里用了basePackageClasses会已配置的某个类为基础扫描该类所在包，或该包的子包\n * 使用该方式方便后期重构\n * @author Administrator\n *\n */\n@EnableWebMvc\n@Configuration\n@ComponentScan(basePackageClasses={CController.class})\npublic class WebConfig extends WebMvcConfigurerAdapter{\n\n\t/**\n\t * 配置jsp视图解析器\n\t * @return\n\t */\n\t@Bean\n\tpublic ViewResolver viewResolver(){\n\t\tInternalResourceViewResolver resolver = new InternalResourceViewResolver();\n\t\tresolver.setPrefix(\"/WEB-INF/views/\");\n\t\tresolver.setSuffix(\".jsp\");\n\t\tresolver.setExposeContextBeansAsAttributes(true);\n\t\treturn resolver;\n\t}\n\n\t/**\n\t * 配置静态资源的处理\n\t * DispatcherServlet将对静态资源的请求转发到Servlet容器默认的Servlet上，而不是DispatcherServlet本身处理\n\t */\n\t@Override\n\tpublic void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {\n\t\tconfigurer.enable();\n\t}\n\t\n\t\n}\n\n```\n\n### 创建RootConfig.java\n\n```java\npackage config;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n\nimport controller.CController;\n\n/**\n * 该类在本实例中没有用到，暂不解释\n * @author Administrator\n *\n */\n@Configuration\n@ComponentScan(basePackageClasses={CController.class})\npublic class RootConfig {\n\n}\n\n```\n\n### 编写controller\n\n```java\npackage controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@Controller\npublic class IndexController {\n\n\t@RequestMapping(value=\"/index\",method=RequestMethod.GET)\n\tpublic String index() {\n\t\treturn \"index\";\n\t}\n}\n\n```\n\n### 编写jsp\n\n```html\n<html>\n<body>\n<h2>Hello World!</h2>\n</body>\n</html>\n\n```\n\n### 启动tomcat\n\n>    http://localhost:8077/springHello/index 测试\n\n![](http://ohhigdkar.bkt.clouddn.com/hell.png)\n\n### 注意\n\n>    1.该springmvc实例需要在servlet 3.0容器，tomcat7.0或以上版本运行\n\n","slug":"eclipse-create-Maven-Project","published":1,"updated":"2022-11-24T13:38:45.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1e000044ovkqbnzcnmd","content":"<h2 id=\"Maven-下载安装\"><a href=\"#Maven-下载安装\" class=\"headerlink\" title=\"Maven 下载安装\"></a>Maven 下载安装</h2><blockquote>\n<p>   1.先去官网下载需要的maven版本 :<a href=\"http://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">http://maven.apache.org/</a></p>\n<p>   下载完成后，解压到想要安装的目录即可，免安装的。</p>\n<p>   2.配置Maven环境变量，和jdk环境变量配置大同小异，可参考：<a href=\"http://jingyan.baidu.com/article/cb5d61050b8ee7005d2fe04e.html\" target=\"_blank\" rel=\"noopener\">http://jingyan.baidu.com/article/cb5d61050b8ee7005d2fe04e.html</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"Eclipse添加Maven支持\"><a href=\"#Eclipse添加Maven支持\" class=\"headerlink\" title=\"Eclipse添加Maven支持\"></a>Eclipse添加Maven支持</h2><blockquote>\n<p>   1.打开eclipse的Help菜单Help-&gt;Eclipse Marketplace搜索关键字maven到插件Maven Integration for Eclipse 并点击安装即可</p>\n<p>   2.安装完成后，重启eclipse；为了使得Eclipse中安装的Maven插件，同windows中安装的那个相同，需要让eclipse中的maven重新定位一下，点击Window -&gt; Preference -&gt; Maven -&gt; Installation -&gt; Add进行设置</p>\n</blockquote>\n<p>Maven还有很多内容，这里不是以Maven为主，所以要了解更多的Maven知识请参考：<a href=\"http://www.yiibai.com/maven/\" target=\"_blank\" rel=\"noopener\">http://www.yiibai.com/maven/</a></p>\n<h1 id=\"eclipse篇\"><a href=\"#eclipse篇\" class=\"headerlink\" title=\"eclipse篇\"></a>eclipse篇</h1><h2 id=\"使用maven插件在eclipse中创建Maven项目\"><a href=\"#使用maven插件在eclipse中创建Maven项目\" class=\"headerlink\" title=\"使用maven插件在eclipse中创建Maven项目\"></a>使用maven插件在eclipse中创建Maven项目</h2><p>1.File–&gt;New–&gt;other–&gt;Maven–&gt;Maven Project–&gt;next 创建Maven项目，如图：</p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/1.png\" alt></p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/2.png\" alt></p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/3.png\" alt></p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/4.png\" alt></p>\n<p>成功创建带有pom.xml文件的项目工程</p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/5.png\" alt></p>\n<h1 id=\"Maven-amp-Spring篇\"><a href=\"#Maven-amp-Spring篇\" class=\"headerlink\" title=\"Maven &amp; Spring篇\"></a>Maven &amp; Spring篇</h1><h2 id=\"pom-xml详解\"><a href=\"#pom-xml详解\" class=\"headerlink\" title=\"pom.xml详解\"></a>pom.xml详解</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spring<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span><span class=\"comment\">&lt;!-- 项目或组织的唯一标志，并且配置时生成的路径也是依据这个配置的，例如 com.spring  生成的目录com/spring --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mvn<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span><span class=\"comment\">&lt;!-- 项目的通用名 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span><span class=\"comment\">&lt;!-- 项目打包方式，常用方式有war,jar等 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"comment\">&lt;!-- 版本 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mvn Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span><span class=\"comment\">&lt;!-- 描述信息，可选 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span><span class=\"comment\">&lt;!-- 一般都会写开发团队或者公司的连接，可选 --&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 设置上下文属性 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span><span class=\"comment\">&lt;!-- 统一项目编码 --&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span><span class=\"comment\">&lt;!-- 输出统一编码 --&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span><span class=\"comment\">&lt;!-- jdk版本 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 依赖关系--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span><span class=\"comment\">&lt;!-- 添加junit依赖，依赖的坐标可以去maven中央仓库查询 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- Scope表示这个library存在的时期，有compile，runtime，test和provided，provided表示在运行时这个app所在的device会给他提供,test表示测试的时候 --&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- Build 节点配置的是项目编译的时候需要用到的一些东西,一个build节点下面有一个plugins子节点，在下面有多个plugin子节点，每个plugin子节点有groupId，artifactId，version等子节点，含义跟上面说到的基本一样。此外，plugin节点一般还有configuration节点，表示对这个plugin进一步的配置--&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>mvn<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在项目中添加spring依赖\"><a href=\"#在项目中添加spring依赖\" class=\"headerlink\" title=\"在项目中添加spring依赖\"></a>在项目中添加spring依赖</h2><p>1.确定要使用的spring版本，在<em>properties</em> 节点中添加下面语句</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">org.springframework.version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">org.springframework.version</span>&gt;</span><span class=\"comment\">&lt;!-- 方便控制spring版本统一 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.添加spring-context依赖，可以先去maven中央仓库<a href=\"http://http://mvnrepository.com/中查找坐标，如图：\" target=\"_blank\" rel=\"noopener\">http://http://mvnrepository.com/中查找坐标，如图：</a></p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/springse.png\" alt></p>\n<p>获取spring context的坐标</p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/springcontext.png\" alt></p>\n<p>把下面的依赖粘贴进pom.xml配置文件中的<em>dependencies</em>节点下。因为我们上面配置过spring的版本，所以这里的version可已修改如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring context 依赖 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span><span class=\"comment\">&lt;!-- 项目运行时加载依赖 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里有一个地方需要注意一下，<em>javax.servlet</em> 有的开发环境中是没有这个包的，也需要添加依赖，但是在正事运行环境是自带这个包的，也就是说打包部署的时候要去掉这个依赖，因此在开发环境配置该依赖的时候，要设置<em>scope</em> 属性，如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   目前<scope>可以使用5个值：</scope></p>\n<pre><code>1.compile，缺省值，适用于所有阶段，会随着项目一起发布。 \n</code></pre><ol start=\"2\">\n<li><p>provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。</p>\n</li>\n<li><p>runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。 </p>\n</li>\n<li><p>test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。</p>\n</li>\n<li><p>system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。</p>\n<p>​</p>\n</li>\n</ol>\n</blockquote>\n<p>3.其他依赖如上步骤，添加完依赖后的pom.xml如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spring<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span><span class=\"comment\">&lt;!-- 项目或组织的唯一标志，并且配置时生成的路径也是依据这个配置的，例如 com.spring </span></span><br><span class=\"line\"><span class=\"comment\">\t\t生成的目录com/spring --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mvn<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span><span class=\"comment\">&lt;!-- 项目的通用名 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span><span class=\"comment\">&lt;!-- 项目打包方式，常用方式有war,jar等 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"comment\">&lt;!-- 版本 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mvn Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span><span class=\"comment\">&lt;!-- 描述信息，可选 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span><span class=\"comment\">&lt;!-- 一般都会写开发团队或者公司的连接，可选 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 设置上下文属性 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t统一项目编码 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t输出统一编码 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span><span class=\"comment\">&lt;!-- jdk版本 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">org.springframework.version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">org.springframework.version</span>&gt;</span><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t方便控制spring版本统一 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 依赖关系 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span><span class=\"comment\">&lt;!-- 添加junit依赖，依赖的坐标可以去maven中央仓库查询 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- Scope表示这个library存在的时期，有compile，runtime，test和provided，provided表示在运行时这个app所在的device会给他提供,test表示测试的时候 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- spring context 依赖 上例定义的对spring-context的依赖，spring-context实现了Spring注入容器并且依赖：spring-core,spring-expression,spring-aop以及spring-beans。这些依赖包使容器可以支持Spring的一些核心技术：Spring核心组件,Spring </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tEL表达式 (SpEL), 面向切面编程,JavaBean机制。 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span><span class=\"comment\">&lt;!-- 项目运行时加载依赖 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- spring 持久化依赖 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-orm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--spring mvc 要增加Spring Web和Servlet支持，需要在上面已配置的pom文件中额外增加两个依赖 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- Build 节点配置的是项目编译的时候需要用到的一些东西,一个build节点下面有一个plugins子节点，在下面有多个plugin子节点，每个plugin子节点有groupId，artifactId，version等子节点，含义跟上面说到的基本一样。此外，plugin节点一般还有configuration节点，表示对这个plugin进一步的配置 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>mvn<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写spring-mvc例子\"><a href=\"#编写spring-mvc例子\" class=\"headerlink\" title=\"编写spring mvc例子\"></a>编写spring mvc例子</h2><h3 id=\"配置DispatcherServlet\"><a href=\"#配置DispatcherServlet\" class=\"headerlink\" title=\"配置DispatcherServlet\"></a>配置DispatcherServlet</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 传统的方式，web应用添加spring mvc框架需要在web.xml配置文件中添加DispatcherServlet映射</span></span><br><span class=\"line\"><span class=\"comment\"> * 借助于Servlet3规范和spring 3.1的功能增加，我们可以在java类中进行DispatcherServlet的映射了</span></span><br><span class=\"line\"><span class=\"comment\"> * AbstractAnnotationConfigDispatcherServletInitializer 类剖析</span></span><br><span class=\"line\"><span class=\"comment\"> * 在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口类，如果能发现的话，就用来配置Servlet容器。</span></span><br><span class=\"line\"><span class=\"comment\"> * spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务</span></span><br><span class=\"line\"><span class=\"comment\"> * 交给他们来完成。Spring 3.2进入了一个便利的WebApplicationInitializer基础实现，也就是AbstractAnnotationConfigDispatcherServletInitializer。</span></span><br><span class=\"line\"><span class=\"comment\"> * 因此，当我们的类实现了这个接口，同时也就实现了WebApplicationInitializer，所以当部署到servlet3.0容器中的时候，容器会自动发现它，并用它来配置servlet上下文</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Administrator</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringWebAppInitialazer</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Class&lt;?&gt;[]&#123;RootConfig.class&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 指定一个配置类</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Class&lt;?&gt;[]&#123;WebConfig.class&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 将一个或多个路径映射到DispatcherServlet上</span></span><br><span class=\"line\"><span class=\"comment\">\t * 也就是所有的请求都先到DispactcherServlet前端控制器中（如果不明白，先去了解一下spring mvc运行原理）</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> String[] getServletMappings() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"/\"</span>&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建java配置类\"><a href=\"#创建java配置类\" class=\"headerlink\" title=\"创建java配置类\"></a>创建java配置类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> controller.CController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * spring 配置类，DispactcherServlet会使用该类配置的Bean</span></span><br><span class=\"line\"><span class=\"comment\"> * ComponentScan 注解会自动扫描某个包，这里用了basePackageClasses会已配置的某个类为基础扫描该类所在包，或该包的子包</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用该方式方便后期重构</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Administrator</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackageClasses=&#123;CController.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 配置jsp视图解析器</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ViewResolver <span class=\"title\">viewResolver</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tInternalResourceViewResolver resolver = <span class=\"keyword\">new</span> InternalResourceViewResolver();</span><br><span class=\"line\">\t\tresolver.setPrefix(<span class=\"string\">\"/WEB-INF/views/\"</span>);</span><br><span class=\"line\">\t\tresolver.setSuffix(<span class=\"string\">\".jsp\"</span>);</span><br><span class=\"line\">\t\tresolver.setExposeContextBeansAsAttributes(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 配置静态资源的处理</span></span><br><span class=\"line\"><span class=\"comment\">\t * DispatcherServlet将对静态资源的请求转发到Servlet容器默认的Servlet上，而不是DispatcherServlet本身处理</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureDefaultServletHandling</span><span class=\"params\">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class=\"line\">\t\tconfigurer.enable();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建RootConfig-java\"><a href=\"#创建RootConfig-java\" class=\"headerlink\" title=\"创建RootConfig.java\"></a>创建RootConfig.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> controller.CController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 该类在本实例中没有用到，暂不解释</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Administrator</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackageClasses=&#123;CController.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RootConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写controller\"><a href=\"#编写controller\" class=\"headerlink\" title=\"编写controller\"></a>编写controller</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/index\"</span>,method=RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写jsp\"><a href=\"#编写jsp\" class=\"headerlink\" title=\"编写jsp\"></a>编写jsp</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动tomcat\"><a href=\"#启动tomcat\" class=\"headerlink\" title=\"启动tomcat\"></a>启动tomcat</h3><blockquote>\n<p>   <a href=\"http://localhost:8077/springHello/index\" target=\"_blank\" rel=\"noopener\">http://localhost:8077/springHello/index</a> 测试</p>\n</blockquote>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/hell.png\" alt></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><blockquote>\n<p>   1.该springmvc实例需要在servlet 3.0容器，tomcat7.0或以上版本运行</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"Maven-下载安装\"><a href=\"#Maven-下载安装\" class=\"headerlink\" title=\"Maven 下载安装\"></a>Maven 下载安装</h2><blockquote>\n<p>   1.先去官网下载需要的maven版本 :<a href=\"http://maven.apache.org/\" target=\"_blank\" rel=\"noopener\">http://maven.apache.org/</a></p>\n<p>   下载完成后，解压到想要安装的目录即可，免安装的。</p>\n<p>   2.配置Maven环境变量，和jdk环境变量配置大同小异，可参考：<a href=\"http://jingyan.baidu.com/article/cb5d61050b8ee7005d2fe04e.html\" target=\"_blank\" rel=\"noopener\">http://jingyan.baidu.com/article/cb5d61050b8ee7005d2fe04e.html</a></p>\n</blockquote>","more":"<h2 id=\"Eclipse添加Maven支持\"><a href=\"#Eclipse添加Maven支持\" class=\"headerlink\" title=\"Eclipse添加Maven支持\"></a>Eclipse添加Maven支持</h2><blockquote>\n<p>   1.打开eclipse的Help菜单Help-&gt;Eclipse Marketplace搜索关键字maven到插件Maven Integration for Eclipse 并点击安装即可</p>\n<p>   2.安装完成后，重启eclipse；为了使得Eclipse中安装的Maven插件，同windows中安装的那个相同，需要让eclipse中的maven重新定位一下，点击Window -&gt; Preference -&gt; Maven -&gt; Installation -&gt; Add进行设置</p>\n</blockquote>\n<p>Maven还有很多内容，这里不是以Maven为主，所以要了解更多的Maven知识请参考：<a href=\"http://www.yiibai.com/maven/\" target=\"_blank\" rel=\"noopener\">http://www.yiibai.com/maven/</a></p>\n<h1 id=\"eclipse篇\"><a href=\"#eclipse篇\" class=\"headerlink\" title=\"eclipse篇\"></a>eclipse篇</h1><h2 id=\"使用maven插件在eclipse中创建Maven项目\"><a href=\"#使用maven插件在eclipse中创建Maven项目\" class=\"headerlink\" title=\"使用maven插件在eclipse中创建Maven项目\"></a>使用maven插件在eclipse中创建Maven项目</h2><p>1.File–&gt;New–&gt;other–&gt;Maven–&gt;Maven Project–&gt;next 创建Maven项目，如图：</p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/1.png\" alt></p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/2.png\" alt></p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/3.png\" alt></p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/4.png\" alt></p>\n<p>成功创建带有pom.xml文件的项目工程</p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/5.png\" alt></p>\n<h1 id=\"Maven-amp-Spring篇\"><a href=\"#Maven-amp-Spring篇\" class=\"headerlink\" title=\"Maven &amp; Spring篇\"></a>Maven &amp; Spring篇</h1><h2 id=\"pom-xml详解\"><a href=\"#pom-xml详解\" class=\"headerlink\" title=\"pom.xml详解\"></a>pom.xml详解</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spring<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span><span class=\"comment\">&lt;!-- 项目或组织的唯一标志，并且配置时生成的路径也是依据这个配置的，例如 com.spring  生成的目录com/spring --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mvn<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span><span class=\"comment\">&lt;!-- 项目的通用名 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span><span class=\"comment\">&lt;!-- 项目打包方式，常用方式有war,jar等 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"comment\">&lt;!-- 版本 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mvn Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span><span class=\"comment\">&lt;!-- 描述信息，可选 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span><span class=\"comment\">&lt;!-- 一般都会写开发团队或者公司的连接，可选 --&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 设置上下文属性 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span><span class=\"comment\">&lt;!-- 统一项目编码 --&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span><span class=\"comment\">&lt;!-- 输出统一编码 --&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span><span class=\"comment\">&lt;!-- jdk版本 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 依赖关系--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span><span class=\"comment\">&lt;!-- 添加junit依赖，依赖的坐标可以去maven中央仓库查询 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">       <span class=\"comment\">&lt;!-- Scope表示这个library存在的时期，有compile，runtime，test和provided，provided表示在运行时这个app所在的device会给他提供,test表示测试的时候 --&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- Build 节点配置的是项目编译的时候需要用到的一些东西,一个build节点下面有一个plugins子节点，在下面有多个plugin子节点，每个plugin子节点有groupId，artifactId，version等子节点，含义跟上面说到的基本一样。此外，plugin节点一般还有configuration节点，表示对这个plugin进一步的配置--&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>mvn<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在项目中添加spring依赖\"><a href=\"#在项目中添加spring依赖\" class=\"headerlink\" title=\"在项目中添加spring依赖\"></a>在项目中添加spring依赖</h2><p>1.确定要使用的spring版本，在<em>properties</em> 节点中添加下面语句</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">org.springframework.version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">org.springframework.version</span>&gt;</span><span class=\"comment\">&lt;!-- 方便控制spring版本统一 --&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.添加spring-context依赖，可以先去maven中央仓库<a href=\"http://http://mvnrepository.com/中查找坐标，如图：\" target=\"_blank\" rel=\"noopener\">http://http://mvnrepository.com/中查找坐标，如图：</a></p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/springse.png\" alt></p>\n<p>获取spring context的坐标</p>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/springcontext.png\" alt></p>\n<p>把下面的依赖粘贴进pom.xml配置文件中的<em>dependencies</em>节点下。因为我们上面配置过spring的版本，所以这里的version可已修改如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- spring context 依赖 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span><span class=\"comment\">&lt;!-- 项目运行时加载依赖 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里有一个地方需要注意一下，<em>javax.servlet</em> 有的开发环境中是没有这个包的，也需要添加依赖，但是在正事运行环境是自带这个包的，也就是说打包部署的时候要去掉这个依赖，因此在开发环境配置该依赖的时候，要设置<em>scope</em> 属性，如：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.servlet<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>servlet-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   目前<scope>可以使用5个值：</scope></p>\n<pre><code>1.compile，缺省值，适用于所有阶段，会随着项目一起发布。 \n</code></pre><ol start=\"2\">\n<li><p>provided，类似compile，期望JDK、容器或使用者会提供这个依赖。如servlet.jar。</p>\n</li>\n<li><p>runtime，只在运行时使用，如JDBC驱动，适用运行和测试阶段。 </p>\n</li>\n<li><p>test，只在测试时使用，用于编译和运行测试代码。不会随项目发布。</p>\n</li>\n<li><p>system，类似provided，需要显式提供包含依赖的jar，Maven不会在Repository中查找它。</p>\n<p>​</p>\n</li>\n</ol>\n</blockquote>\n<p>3.其他依赖如上步骤，添加完依赖后的pom.xml如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spring<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span><span class=\"comment\">&lt;!-- 项目或组织的唯一标志，并且配置时生成的路径也是依据这个配置的，例如 com.spring </span></span><br><span class=\"line\"><span class=\"comment\">\t\t生成的目录com/spring --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mvn<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span><span class=\"comment\">&lt;!-- 项目的通用名 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>war<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span><span class=\"comment\">&lt;!-- 项目打包方式，常用方式有war,jar等 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span><span class=\"comment\">&lt;!-- 版本 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mvn Maven Webapp<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span><span class=\"comment\">&lt;!-- 描述信息，可选 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.apache.org<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span><span class=\"comment\">&lt;!-- 一般都会写开发团队或者公司的连接，可选 --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 设置上下文属性 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t统一项目编码 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.reporting.outputEncoding</span>&gt;</span><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t输出统一编码 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span><span class=\"comment\">&lt;!-- jdk版本 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">org.springframework.version</span>&gt;</span>4.1.6.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">org.springframework.version</span>&gt;</span><span class=\"comment\">&lt;!-- </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t方便控制spring版本统一 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 依赖关系 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span><span class=\"comment\">&lt;!-- 添加junit依赖，依赖的坐标可以去maven中央仓库查询 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- Scope表示这个library存在的时期，有compile，runtime，test和provided，provided表示在运行时这个app所在的device会给他提供,test表示测试的时候 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- spring context 依赖 上例定义的对spring-context的依赖，spring-context实现了Spring注入容器并且依赖：spring-core,spring-expression,spring-aop以及spring-beans。这些依赖包使容器可以支持Spring的一些核心技术：Spring核心组件,Spring </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tEL表达式 (SpEL), 面向切面编程,JavaBean机制。 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span><span class=\"comment\">&lt;!-- 项目运行时加载依赖 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- spring 持久化依赖 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-orm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!--spring mvc 要增加Spring Web和Servlet支持，需要在上面已配置的pom文件中额外增加两个依赖 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;org.springframework.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- Build 节点配置的是项目编译的时候需要用到的一些东西,一个build节点下面有一个plugins子节点，在下面有多个plugin子节点，每个plugin子节点有groupId，artifactId，version等子节点，含义跟上面说到的基本一样。此外，plugin节点一般还有configuration节点，表示对这个plugin进一步的配置 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">finalName</span>&gt;</span>mvn<span class=\"tag\">&lt;/<span class=\"name\">finalName</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写spring-mvc例子\"><a href=\"#编写spring-mvc例子\" class=\"headerlink\" title=\"编写spring mvc例子\"></a>编写spring mvc例子</h2><h3 id=\"配置DispatcherServlet\"><a href=\"#配置DispatcherServlet\" class=\"headerlink\" title=\"配置DispatcherServlet\"></a>配置DispatcherServlet</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 传统的方式，web应用添加spring mvc框架需要在web.xml配置文件中添加DispatcherServlet映射</span></span><br><span class=\"line\"><span class=\"comment\"> * 借助于Servlet3规范和spring 3.1的功能增加，我们可以在java类中进行DispatcherServlet的映射了</span></span><br><span class=\"line\"><span class=\"comment\"> * AbstractAnnotationConfigDispatcherServletInitializer 类剖析</span></span><br><span class=\"line\"><span class=\"comment\"> * 在Servlet3.0环境中，容器会在类路径中查找实现javax.servlet.ServletContainerInitializer接口类，如果能发现的话，就用来配置Servlet容器。</span></span><br><span class=\"line\"><span class=\"comment\"> * spring提供了这个接口的实现，名为SpringServletContainerInitializer，这个类反过来又会查找实现WebApplicationInitializer的类并将配置的任务</span></span><br><span class=\"line\"><span class=\"comment\"> * 交给他们来完成。Spring 3.2进入了一个便利的WebApplicationInitializer基础实现，也就是AbstractAnnotationConfigDispatcherServletInitializer。</span></span><br><span class=\"line\"><span class=\"comment\"> * 因此，当我们的类实现了这个接口，同时也就实现了WebApplicationInitializer，所以当部署到servlet3.0容器中的时候，容器会自动发现它，并用它来配置servlet上下文</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Administrator</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SpringWebAppInitialazer</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractAnnotationConfigDispatcherServletInitializer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Class&lt;?&gt;[]&#123;RootConfig.class&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 指定一个配置类</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Class&lt;?&gt;[]&#123;WebConfig.class&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 将一个或多个路径映射到DispatcherServlet上</span></span><br><span class=\"line\"><span class=\"comment\">\t * 也就是所有的请求都先到DispactcherServlet前端控制器中（如果不明白，先去了解一下spring mvc运行原理）</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> String[] getServletMappings() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"/\"</span>&#125;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建java配置类\"><a href=\"#创建java配置类\" class=\"headerlink\" title=\"创建java配置类\"></a>创建java配置类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ViewResolver;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.EnableWebMvc;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.view.InternalResourceViewResolver;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> controller.CController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * spring 配置类，DispactcherServlet会使用该类配置的Bean</span></span><br><span class=\"line\"><span class=\"comment\"> * ComponentScan 注解会自动扫描某个包，这里用了basePackageClasses会已配置的某个类为基础扫描该类所在包，或该包的子包</span></span><br><span class=\"line\"><span class=\"comment\"> * 使用该方式方便后期重构</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Administrator</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@EnableWebMvc</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackageClasses=&#123;CController.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConfig</span> <span class=\"keyword\">extends</span> <span class=\"title\">WebMvcConfigurerAdapter</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 配置jsp视图解析器</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ViewResolver <span class=\"title\">viewResolver</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tInternalResourceViewResolver resolver = <span class=\"keyword\">new</span> InternalResourceViewResolver();</span><br><span class=\"line\">\t\tresolver.setPrefix(<span class=\"string\">\"/WEB-INF/views/\"</span>);</span><br><span class=\"line\">\t\tresolver.setSuffix(<span class=\"string\">\".jsp\"</span>);</span><br><span class=\"line\">\t\tresolver.setExposeContextBeansAsAttributes(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> resolver;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 配置静态资源的处理</span></span><br><span class=\"line\"><span class=\"comment\">\t * DispatcherServlet将对静态资源的请求转发到Servlet容器默认的Servlet上，而不是DispatcherServlet本身处理</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">configureDefaultServletHandling</span><span class=\"params\">(DefaultServletHandlerConfigurer configurer)</span> </span>&#123;</span><br><span class=\"line\">\t\tconfigurer.enable();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建RootConfig-java\"><a href=\"#创建RootConfig-java\" class=\"headerlink\" title=\"创建RootConfig.java\"></a>创建RootConfig.java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> config;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> controller.CController;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 该类在本实例中没有用到，暂不解释</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Administrator</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@ComponentScan</span>(basePackageClasses=&#123;CController.class&#125;)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RootConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写controller\"><a href=\"#编写controller\" class=\"headerlink\" title=\"编写controller\"></a>编写controller</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/index\"</span>,method=RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"编写jsp\"><a href=\"#编写jsp\" class=\"headerlink\" title=\"编写jsp\"></a>编写jsp</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"启动tomcat\"><a href=\"#启动tomcat\" class=\"headerlink\" title=\"启动tomcat\"></a>启动tomcat</h3><blockquote>\n<p>   <a href=\"http://localhost:8077/springHello/index\" target=\"_blank\" rel=\"noopener\">http://localhost:8077/springHello/index</a> 测试</p>\n</blockquote>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/hell.png\" alt></p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><blockquote>\n<p>   1.该springmvc实例需要在servlet 3.0容器，tomcat7.0或以上版本运行</p>\n</blockquote>"},{"title":"Git（分支管理）","date":"2018-11-23T08:05:54.000Z","_content":"\n# 分支管理\n\n分支就像两条平行的线，互不干扰；在实际开发过程中，大家都是在分支上工作，互不干扰，而且每次修改后都可以在本地提交，而不用担心代码丢失。在需要时把分支合并，就可以完成协助开发了。\n\nGit的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。\n\n# 分支工作原理\n\n在Git仓库创建起始，会默认创建一个`master`分支。前面介绍版本回退的时候，引入了指针（`HEAD`）的概念，Git之所以与其他版本管理工具不同，一是因为Git是分布式管理工具，还一个是引入了指针的概念。其实我们在commit的时候，只是在移动指针，所以才会非常快。\n\n严格来说`HEAD`不是指向提交的，而是指向`master`分支的，分支指向了提交，所以`HEAD`指向当前 分支如图：![git-br-initial](https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849087937492135fbf4bbd24dfcbc18349a8a59d36d000/0)\n\n\n\n每一次的修改提交，都被Git记录为一个节点，形成一个时间线，而每次提交当前分支就会指向最新的一次提交，而指针也指向当前分支。\n\n<!-- more -->\n\n当我们创建新`dev`分支的时候，`HEAD`会指向新的分支，然后新的分支在继续指向每次提交，如图：![git-br-dev-fd](https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849088235627813efe7649b4f008900e5365bb72323000/0)\n\n而`master`不变。\n\n假如我们在`dev`上的工作完成了，就可以把`dev`合并到`master`上，就是直接把`master`指向`dev`的当前提交，就完成了合并：![git-br-ff-merge](https://cdn.liaoxuefeng.com/cdn/files/attachments/00138490883510324231a837e5d4aee844d3e4692ba50f5000/0)\n\nGit完成分支合并也很快，只需要移动指针，而工作区的内容不需要变化。\n\n# 操作命令\n\n创建分支\n\n>    $ git checkout -b dev\n>    Switched to a new branch 'dev'  //创建了一个叫dev的分支，并切换到dev分支\n\n>git branch dev\n>\n>git checkout dev   //效果和上面一样\n\n查看分支\n\n>    $ git branch\n>\n>    * dev\n>      master\n>\n\n合并分支\n\n需要先切换到主分支上\n\n>    $ git checkout master\n>    Switched to branch 'master'\n>    Your branch is up-to-date with 'origin/master'.\n\n>    $ git merge dev    //目标分支dev 合并到当前所在分支\n>    Already up-to-date.\n\n删除分支\n\n>    $ git branch -d dev\n>    Deleted branch dev (was d2a44dd).\t\t\t\n\n# 解决冲突\n\n创建新分支 develop1.0 并在index.txt文件最末尾添加`create new branch develop`\n\n>    $ git checkout -b develop1.0\n>    Switched to a new branch 'develop1.0'\n>\n>    $ git add index.txt\n>\n>    $ git commit -m \"develop branch mereg\"\n>    [develop1.0 961900a] develop branch mereg\n>     1 file changed, 1 insertion(+)\n>\n>    ==============切换到master分支\n>\n>    $ git checkout master\n>    Switched to branch 'master'\n>    Your branch is up-to-date with 'origin/master'.\n>\n>    $ git branch\n>      develop1.0\n>\n>    * master\n>\n>\n>    ===============修改文件，并添加暂存区，提交到master分支版本库，查看状态，可以看到本地比远程仓库提前一个版本，可以使用git push命令提交到远程库\n>\n>    $ git status\n>    On branch master\n>    Your branch is ahead of 'origin/master' by 1 commit.\n>      (use \"git push\" to publish your local commits)\n>    nothing to commit, working directory clean\n>\n>    ======现在，同时在develop1.0 和master两个分支上修改了同一个文件，现在合并，看效果\n>\n>    $ git merge develop1.0\n>    Auto-merging index.txt\n>    CONFLICT (content): Merge conflict in index.txt\n>    Automatic merge failed; fix conflicts and then commit the result.\n>\n>    //可以看到，合并失败，说有解决冲突后，重新提交。\n>\n>    $ git status\n>    On branch master\n>    Your branch is ahead of 'origin/master' by 1 commit.  //比远程库超前一个版本\n>      (use \"git push\" to publish your local commits)\n>    You have unmerged paths.  //合并失败，需要手动解决冲突\n>      (fix conflicts and run \"git commit\")\n>\n>    Unmerged paths:\n>      (use \"git add <file>...\" to mark resolution)\n>\n>    ​    both modified:   index.txt\n>\n>    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n>\n>    ==============手动把冲突解决后，提交，查看状态\n>\n>    $ git status\n>    On branch master\n>    Your branch is ahead of 'origin/master' by 3 commits.\n>      (use \"git push\" to publish your local commits)\n>    nothing to commit, working directory clean\n>\n>    =========冲突已经解决，可以推送到远程仓库了\n>\n>    $ git push -u origin master\n>    Counting objects: 7, done.\n>    Delta compression using up to 4 threads.\n>    Compressing objects: 100% (7/7), done.\n>    Writing objects: 100% (7/7), 696 bytes | 0 bytes/s, done.\n>    Total 7 (delta 3), reused 0 (delta 0)\n>    remote: Resolving deltas: 100% (3/3), completed with 1 local object.\n>    To git@github.com:gaofeng0527/learngit.git\n>       704351c..010b68c  master -> master\n>    Branch master set up to track remote branch master from origin.\n>\n>    =======再次查询状态，这个时候，工作区就干干净净了\n>\n>    $ git status\n>    On branch master\n>    Your branch is up-to-date with 'origin/master'.\n>    nothing to commit, working directory clean\n\n可以使用`git log --graph --pretty=oneline --abbrev-commit`命令查看合并记录\n\n>    $ git log --graph --pretty=oneline --abbrev-commit\n>\n>    *   010b68c 解决冲突\n>        |\\\n>        | * 961900a develop branch mereg\n>    *   | c15f0c1 master branch test\n>        |/\n>    *   704351c conflict fixed\n>        |\\\n>        | * 312319f develop1.0 commit\n>    *   | 6d5613e master commit\n>        |/\n>    *   d2a44dd branch test\n>    *   98b5e79 update readme.md\n>\n>        :...skipping...\n>    *   010b68c 解决冲突\n>        |\\\n>        | * 961900a develop branch mereg\n>    *   | c15f0c1 master branch test\n>        |/\n>    *   704351c conflict fixed\n>        |\\\n>        | * 312319f develop1.0 commit\n>    *   | 6d5613e master commit\n>        |/\n>    *   d2a44dd branch test\n>    *   4b05e65 暂时结束学习\n>    *   37a791a one chapter commit\n>","source":"_posts/git-chapter-four.md","raw":"---\ntitle: Git（分支管理）\ndate: 2018-11-23 16:05:54\ntags: [Git]\n---\n\n# 分支管理\n\n分支就像两条平行的线，互不干扰；在实际开发过程中，大家都是在分支上工作，互不干扰，而且每次修改后都可以在本地提交，而不用担心代码丢失。在需要时把分支合并，就可以完成协助开发了。\n\nGit的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。\n\n# 分支工作原理\n\n在Git仓库创建起始，会默认创建一个`master`分支。前面介绍版本回退的时候，引入了指针（`HEAD`）的概念，Git之所以与其他版本管理工具不同，一是因为Git是分布式管理工具，还一个是引入了指针的概念。其实我们在commit的时候，只是在移动指针，所以才会非常快。\n\n严格来说`HEAD`不是指向提交的，而是指向`master`分支的，分支指向了提交，所以`HEAD`指向当前 分支如图：![git-br-initial](https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849087937492135fbf4bbd24dfcbc18349a8a59d36d000/0)\n\n\n\n每一次的修改提交，都被Git记录为一个节点，形成一个时间线，而每次提交当前分支就会指向最新的一次提交，而指针也指向当前分支。\n\n<!-- more -->\n\n当我们创建新`dev`分支的时候，`HEAD`会指向新的分支，然后新的分支在继续指向每次提交，如图：![git-br-dev-fd](https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849088235627813efe7649b4f008900e5365bb72323000/0)\n\n而`master`不变。\n\n假如我们在`dev`上的工作完成了，就可以把`dev`合并到`master`上，就是直接把`master`指向`dev`的当前提交，就完成了合并：![git-br-ff-merge](https://cdn.liaoxuefeng.com/cdn/files/attachments/00138490883510324231a837e5d4aee844d3e4692ba50f5000/0)\n\nGit完成分支合并也很快，只需要移动指针，而工作区的内容不需要变化。\n\n# 操作命令\n\n创建分支\n\n>    $ git checkout -b dev\n>    Switched to a new branch 'dev'  //创建了一个叫dev的分支，并切换到dev分支\n\n>git branch dev\n>\n>git checkout dev   //效果和上面一样\n\n查看分支\n\n>    $ git branch\n>\n>    * dev\n>      master\n>\n\n合并分支\n\n需要先切换到主分支上\n\n>    $ git checkout master\n>    Switched to branch 'master'\n>    Your branch is up-to-date with 'origin/master'.\n\n>    $ git merge dev    //目标分支dev 合并到当前所在分支\n>    Already up-to-date.\n\n删除分支\n\n>    $ git branch -d dev\n>    Deleted branch dev (was d2a44dd).\t\t\t\n\n# 解决冲突\n\n创建新分支 develop1.0 并在index.txt文件最末尾添加`create new branch develop`\n\n>    $ git checkout -b develop1.0\n>    Switched to a new branch 'develop1.0'\n>\n>    $ git add index.txt\n>\n>    $ git commit -m \"develop branch mereg\"\n>    [develop1.0 961900a] develop branch mereg\n>     1 file changed, 1 insertion(+)\n>\n>    ==============切换到master分支\n>\n>    $ git checkout master\n>    Switched to branch 'master'\n>    Your branch is up-to-date with 'origin/master'.\n>\n>    $ git branch\n>      develop1.0\n>\n>    * master\n>\n>\n>    ===============修改文件，并添加暂存区，提交到master分支版本库，查看状态，可以看到本地比远程仓库提前一个版本，可以使用git push命令提交到远程库\n>\n>    $ git status\n>    On branch master\n>    Your branch is ahead of 'origin/master' by 1 commit.\n>      (use \"git push\" to publish your local commits)\n>    nothing to commit, working directory clean\n>\n>    ======现在，同时在develop1.0 和master两个分支上修改了同一个文件，现在合并，看效果\n>\n>    $ git merge develop1.0\n>    Auto-merging index.txt\n>    CONFLICT (content): Merge conflict in index.txt\n>    Automatic merge failed; fix conflicts and then commit the result.\n>\n>    //可以看到，合并失败，说有解决冲突后，重新提交。\n>\n>    $ git status\n>    On branch master\n>    Your branch is ahead of 'origin/master' by 1 commit.  //比远程库超前一个版本\n>      (use \"git push\" to publish your local commits)\n>    You have unmerged paths.  //合并失败，需要手动解决冲突\n>      (fix conflicts and run \"git commit\")\n>\n>    Unmerged paths:\n>      (use \"git add <file>...\" to mark resolution)\n>\n>    ​    both modified:   index.txt\n>\n>    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n>\n>    ==============手动把冲突解决后，提交，查看状态\n>\n>    $ git status\n>    On branch master\n>    Your branch is ahead of 'origin/master' by 3 commits.\n>      (use \"git push\" to publish your local commits)\n>    nothing to commit, working directory clean\n>\n>    =========冲突已经解决，可以推送到远程仓库了\n>\n>    $ git push -u origin master\n>    Counting objects: 7, done.\n>    Delta compression using up to 4 threads.\n>    Compressing objects: 100% (7/7), done.\n>    Writing objects: 100% (7/7), 696 bytes | 0 bytes/s, done.\n>    Total 7 (delta 3), reused 0 (delta 0)\n>    remote: Resolving deltas: 100% (3/3), completed with 1 local object.\n>    To git@github.com:gaofeng0527/learngit.git\n>       704351c..010b68c  master -> master\n>    Branch master set up to track remote branch master from origin.\n>\n>    =======再次查询状态，这个时候，工作区就干干净净了\n>\n>    $ git status\n>    On branch master\n>    Your branch is up-to-date with 'origin/master'.\n>    nothing to commit, working directory clean\n\n可以使用`git log --graph --pretty=oneline --abbrev-commit`命令查看合并记录\n\n>    $ git log --graph --pretty=oneline --abbrev-commit\n>\n>    *   010b68c 解决冲突\n>        |\\\n>        | * 961900a develop branch mereg\n>    *   | c15f0c1 master branch test\n>        |/\n>    *   704351c conflict fixed\n>        |\\\n>        | * 312319f develop1.0 commit\n>    *   | 6d5613e master commit\n>        |/\n>    *   d2a44dd branch test\n>    *   98b5e79 update readme.md\n>\n>        :...skipping...\n>    *   010b68c 解决冲突\n>        |\\\n>        | * 961900a develop branch mereg\n>    *   | c15f0c1 master branch test\n>        |/\n>    *   704351c conflict fixed\n>        |\\\n>        | * 312319f develop1.0 commit\n>    *   | 6d5613e master commit\n>        |/\n>    *   d2a44dd branch test\n>    *   4b05e65 暂时结束学习\n>    *   37a791a one chapter commit\n>","slug":"git-chapter-four","published":1,"updated":"2022-11-24T13:38:45.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1e100054ovk4fxz5wev","content":"<h1 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h1><p>分支就像两条平行的线，互不干扰；在实际开发过程中，大家都是在分支上工作，互不干扰，而且每次修改后都可以在本地提交，而不用担心代码丢失。在需要时把分支合并，就可以完成协助开发了。</p>\n<p>Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。</p>\n<h1 id=\"分支工作原理\"><a href=\"#分支工作原理\" class=\"headerlink\" title=\"分支工作原理\"></a>分支工作原理</h1><p>在Git仓库创建起始，会默认创建一个<code>master</code>分支。前面介绍版本回退的时候，引入了指针（<code>HEAD</code>）的概念，Git之所以与其他版本管理工具不同，一是因为Git是分布式管理工具，还一个是引入了指针的概念。其实我们在commit的时候，只是在移动指针，所以才会非常快。</p>\n<p>严格来说<code>HEAD</code>不是指向提交的，而是指向<code>master</code>分支的，分支指向了提交，所以<code>HEAD</code>指向当前 分支如图：<img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849087937492135fbf4bbd24dfcbc18349a8a59d36d000/0\" alt=\"git-br-initial\"></p>\n<p>每一次的修改提交，都被Git记录为一个节点，形成一个时间线，而每次提交当前分支就会指向最新的一次提交，而指针也指向当前分支。</p>\n<a id=\"more\"></a>\n<p>当我们创建新<code>dev</code>分支的时候，<code>HEAD</code>会指向新的分支，然后新的分支在继续指向每次提交，如图：<img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849088235627813efe7649b4f008900e5365bb72323000/0\" alt=\"git-br-dev-fd\"></p>\n<p>而<code>master</code>不变。</p>\n<p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：<img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/00138490883510324231a837e5d4aee844d3e4692ba50f5000/0\" alt=\"git-br-ff-merge\"></p>\n<p>Git完成分支合并也很快，只需要移动指针，而工作区的内容不需要变化。</p>\n<h1 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a>操作命令</h1><p>创建分支</p>\n<blockquote>\n<p>   $ git checkout -b dev<br>   Switched to a new branch ‘dev’  //创建了一个叫dev的分支，并切换到dev分支</p>\n</blockquote>\n<blockquote>\n<p>git branch dev</p>\n<p>git checkout dev   //效果和上面一样</p>\n</blockquote>\n<p>查看分支</p>\n<blockquote>\n<p>   $ git branch</p>\n<ul>\n<li>dev<br>master</li>\n</ul>\n</blockquote>\n<p>合并分支</p>\n<p>需要先切换到主分支上</p>\n<blockquote>\n<p>   $ git checkout master<br>   Switched to branch ‘master’<br>   Your branch is up-to-date with ‘origin/master’.</p>\n</blockquote>\n<blockquote>\n<p>   $ git merge dev    //目标分支dev 合并到当前所在分支<br>   Already up-to-date.</p>\n</blockquote>\n<p>删除分支</p>\n<blockquote>\n<p>   $ git branch -d dev<br>   Deleted branch dev (was d2a44dd).            </p>\n</blockquote>\n<h1 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h1><p>创建新分支 develop1.0 并在index.txt文件最末尾添加<code>create new branch develop</code></p>\n<blockquote>\n<p>   $ git checkout -b develop1.0<br>   Switched to a new branch ‘develop1.0’</p>\n<p>   $ git add index.txt</p>\n<p>   $ git commit -m “develop branch mereg”<br>   [develop1.0 961900a] develop branch mereg<br>    1 file changed, 1 insertion(+)</p>\n<p>   ==============切换到master分支</p>\n<p>   $ git checkout master<br>   Switched to branch ‘master’<br>   Your branch is up-to-date with ‘origin/master’.</p>\n<p>   $ git branch<br>     develop1.0</p>\n<ul>\n<li>master</li>\n</ul>\n<p>   ===============修改文件，并添加暂存区，提交到master分支版本库，查看状态，可以看到本地比远程仓库提前一个版本，可以使用git push命令提交到远程库</p>\n<p>   $ git status<br>   On branch master<br>   Your branch is ahead of ‘origin/master’ by 1 commit.<br>     (use “git push” to publish your local commits)<br>   nothing to commit, working directory clean</p>\n<p>   ======现在，同时在develop1.0 和master两个分支上修改了同一个文件，现在合并，看效果</p>\n<p>   $ git merge develop1.0<br>   Auto-merging index.txt<br>   CONFLICT (content): Merge conflict in index.txt<br>   Automatic merge failed; fix conflicts and then commit the result.</p>\n<p>   //可以看到，合并失败，说有解决冲突后，重新提交。</p>\n<p>   $ git status<br>   On branch master<br>   Your branch is ahead of ‘origin/master’ by 1 commit.  //比远程库超前一个版本<br>     (use “git push” to publish your local commits)<br>   You have unmerged paths.  //合并失败，需要手动解决冲突<br>     (fix conflicts and run “git commit”)</p>\n<p>   Unmerged paths:<br>     (use “git add <file>…” to mark resolution)</file></p>\n<p>   ​    both modified:   index.txt</p>\n<p>   no changes added to commit (use “git add” and/or “git commit -a”)</p>\n<p>   ==============手动把冲突解决后，提交，查看状态</p>\n<p>   $ git status<br>   On branch master<br>   Your branch is ahead of ‘origin/master’ by 3 commits.<br>     (use “git push” to publish your local commits)<br>   nothing to commit, working directory clean</p>\n<p>   =========冲突已经解决，可以推送到远程仓库了</p>\n<p>   $ git push -u origin master<br>   Counting objects: 7, done.<br>   Delta compression using up to 4 threads.<br>   Compressing objects: 100% (7/7), done.<br>   Writing objects: 100% (7/7), 696 bytes | 0 bytes/s, done.<br>   Total 7 (delta 3), reused 0 (delta 0)<br>   remote: Resolving deltas: 100% (3/3), completed with 1 local object.<br>   To <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:gaofeng0527/learngit.git<br>      704351c..010b68c  master -&gt; master<br>   Branch master set up to track remote branch master from origin.</p>\n<p>   =======再次查询状态，这个时候，工作区就干干净净了</p>\n<p>   $ git status<br>   On branch master<br>   Your branch is up-to-date with ‘origin/master’.<br>   nothing to commit, working directory clean</p>\n</blockquote>\n<p>可以使用<code>git log --graph --pretty=oneline --abbrev-commit</code>命令查看合并记录</p>\n<blockquote>\n<p>   $ git log –graph –pretty=oneline –abbrev-commit</p>\n<ul>\n<li>010b68c 解决冲突<br>|\\<br>| * 961900a develop branch mereg</li>\n<li>| c15f0c1 master branch test<br>|/</li>\n<li>704351c conflict fixed<br>|\\<br>| * 312319f develop1.0 commit</li>\n<li>| 6d5613e master commit<br>|/</li>\n<li>d2a44dd branch test</li>\n<li><p>98b5e79 update readme.md</p>\n<p>:…skipping…</p>\n</li>\n<li>010b68c 解决冲突<br>|\\<br>| * 961900a develop branch mereg</li>\n<li>| c15f0c1 master branch test<br>|/</li>\n<li>704351c conflict fixed<br>|\\<br>| * 312319f develop1.0 commit</li>\n<li>| 6d5613e master commit<br>|/</li>\n<li>d2a44dd branch test</li>\n<li>4b05e65 暂时结束学习</li>\n<li>37a791a one chapter commit</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h1><p>分支就像两条平行的线，互不干扰；在实际开发过程中，大家都是在分支上工作，互不干扰，而且每次修改后都可以在本地提交，而不用担心代码丢失。在需要时把分支合并，就可以完成协助开发了。</p>\n<p>Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。</p>\n<h1 id=\"分支工作原理\"><a href=\"#分支工作原理\" class=\"headerlink\" title=\"分支工作原理\"></a>分支工作原理</h1><p>在Git仓库创建起始，会默认创建一个<code>master</code>分支。前面介绍版本回退的时候，引入了指针（<code>HEAD</code>）的概念，Git之所以与其他版本管理工具不同，一是因为Git是分布式管理工具，还一个是引入了指针的概念。其实我们在commit的时候，只是在移动指针，所以才会非常快。</p>\n<p>严格来说<code>HEAD</code>不是指向提交的，而是指向<code>master</code>分支的，分支指向了提交，所以<code>HEAD</code>指向当前 分支如图：<img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849087937492135fbf4bbd24dfcbc18349a8a59d36d000/0\" alt=\"git-br-initial\"></p>\n<p>每一次的修改提交，都被Git记录为一个节点，形成一个时间线，而每次提交当前分支就会指向最新的一次提交，而指针也指向当前分支。</p>","more":"<p>当我们创建新<code>dev</code>分支的时候，<code>HEAD</code>会指向新的分支，然后新的分支在继续指向每次提交，如图：<img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849088235627813efe7649b4f008900e5365bb72323000/0\" alt=\"git-br-dev-fd\"></p>\n<p>而<code>master</code>不变。</p>\n<p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上，就是直接把<code>master</code>指向<code>dev</code>的当前提交，就完成了合并：<img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/00138490883510324231a837e5d4aee844d3e4692ba50f5000/0\" alt=\"git-br-ff-merge\"></p>\n<p>Git完成分支合并也很快，只需要移动指针，而工作区的内容不需要变化。</p>\n<h1 id=\"操作命令\"><a href=\"#操作命令\" class=\"headerlink\" title=\"操作命令\"></a>操作命令</h1><p>创建分支</p>\n<blockquote>\n<p>   $ git checkout -b dev<br>   Switched to a new branch ‘dev’  //创建了一个叫dev的分支，并切换到dev分支</p>\n</blockquote>\n<blockquote>\n<p>git branch dev</p>\n<p>git checkout dev   //效果和上面一样</p>\n</blockquote>\n<p>查看分支</p>\n<blockquote>\n<p>   $ git branch</p>\n<ul>\n<li>dev<br>master</li>\n</ul>\n</blockquote>\n<p>合并分支</p>\n<p>需要先切换到主分支上</p>\n<blockquote>\n<p>   $ git checkout master<br>   Switched to branch ‘master’<br>   Your branch is up-to-date with ‘origin/master’.</p>\n</blockquote>\n<blockquote>\n<p>   $ git merge dev    //目标分支dev 合并到当前所在分支<br>   Already up-to-date.</p>\n</blockquote>\n<p>删除分支</p>\n<blockquote>\n<p>   $ git branch -d dev<br>   Deleted branch dev (was d2a44dd).            </p>\n</blockquote>\n<h1 id=\"解决冲突\"><a href=\"#解决冲突\" class=\"headerlink\" title=\"解决冲突\"></a>解决冲突</h1><p>创建新分支 develop1.0 并在index.txt文件最末尾添加<code>create new branch develop</code></p>\n<blockquote>\n<p>   $ git checkout -b develop1.0<br>   Switched to a new branch ‘develop1.0’</p>\n<p>   $ git add index.txt</p>\n<p>   $ git commit -m “develop branch mereg”<br>   [develop1.0 961900a] develop branch mereg<br>    1 file changed, 1 insertion(+)</p>\n<p>   ==============切换到master分支</p>\n<p>   $ git checkout master<br>   Switched to branch ‘master’<br>   Your branch is up-to-date with ‘origin/master’.</p>\n<p>   $ git branch<br>     develop1.0</p>\n<ul>\n<li>master</li>\n</ul>\n<p>   ===============修改文件，并添加暂存区，提交到master分支版本库，查看状态，可以看到本地比远程仓库提前一个版本，可以使用git push命令提交到远程库</p>\n<p>   $ git status<br>   On branch master<br>   Your branch is ahead of ‘origin/master’ by 1 commit.<br>     (use “git push” to publish your local commits)<br>   nothing to commit, working directory clean</p>\n<p>   ======现在，同时在develop1.0 和master两个分支上修改了同一个文件，现在合并，看效果</p>\n<p>   $ git merge develop1.0<br>   Auto-merging index.txt<br>   CONFLICT (content): Merge conflict in index.txt<br>   Automatic merge failed; fix conflicts and then commit the result.</p>\n<p>   //可以看到，合并失败，说有解决冲突后，重新提交。</p>\n<p>   $ git status<br>   On branch master<br>   Your branch is ahead of ‘origin/master’ by 1 commit.  //比远程库超前一个版本<br>     (use “git push” to publish your local commits)<br>   You have unmerged paths.  //合并失败，需要手动解决冲突<br>     (fix conflicts and run “git commit”)</p>\n<p>   Unmerged paths:<br>     (use “git add <file>…” to mark resolution)</file></p>\n<p>   ​    both modified:   index.txt</p>\n<p>   no changes added to commit (use “git add” and/or “git commit -a”)</p>\n<p>   ==============手动把冲突解决后，提交，查看状态</p>\n<p>   $ git status<br>   On branch master<br>   Your branch is ahead of ‘origin/master’ by 3 commits.<br>     (use “git push” to publish your local commits)<br>   nothing to commit, working directory clean</p>\n<p>   =========冲突已经解决，可以推送到远程仓库了</p>\n<p>   $ git push -u origin master<br>   Counting objects: 7, done.<br>   Delta compression using up to 4 threads.<br>   Compressing objects: 100% (7/7), done.<br>   Writing objects: 100% (7/7), 696 bytes | 0 bytes/s, done.<br>   Total 7 (delta 3), reused 0 (delta 0)<br>   remote: Resolving deltas: 100% (3/3), completed with 1 local object.<br>   To <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:gaofeng0527/learngit.git<br>      704351c..010b68c  master -&gt; master<br>   Branch master set up to track remote branch master from origin.</p>\n<p>   =======再次查询状态，这个时候，工作区就干干净净了</p>\n<p>   $ git status<br>   On branch master<br>   Your branch is up-to-date with ‘origin/master’.<br>   nothing to commit, working directory clean</p>\n</blockquote>\n<p>可以使用<code>git log --graph --pretty=oneline --abbrev-commit</code>命令查看合并记录</p>\n<blockquote>\n<p>   $ git log –graph –pretty=oneline –abbrev-commit</p>\n<ul>\n<li>010b68c 解决冲突<br>|\\<br>| * 961900a develop branch mereg</li>\n<li>| c15f0c1 master branch test<br>|/</li>\n<li>704351c conflict fixed<br>|\\<br>| * 312319f develop1.0 commit</li>\n<li>| 6d5613e master commit<br>|/</li>\n<li>d2a44dd branch test</li>\n<li><p>98b5e79 update readme.md</p>\n<p>:…skipping…</p>\n</li>\n<li>010b68c 解决冲突<br>|\\<br>| * 961900a develop branch mereg</li>\n<li>| c15f0c1 master branch test<br>|/</li>\n<li>704351c conflict fixed<br>|\\<br>| * 312319f develop1.0 commit</li>\n<li>| 6d5613e master commit<br>|/</li>\n<li>d2a44dd branch test</li>\n<li>4b05e65 暂时结束学习</li>\n<li>37a791a one chapter commit</li>\n</ul>\n</blockquote>"},{"title":"springmvc文件上传、下载","date":"2017-11-30T07:28:33.000Z","_content":"\n现在基本web应用都需要用到文件上传的功能，不废话，直接上\n\n# 文件上传\n\n这里使用的是CommonsMultipartResolver。\n\n<!-- more -->\n\n## 导入jar\n\n```xml\n<dependency>\n\t<groupId>commons-fileupload</groupId>\n\t<artifactId>commons-fileupload</artifactId>\n\t<version>1.3.1</version>\n</dependency>\n```\n\n## 添加CommonsMultipartResolver配置\n\n```xml\n<bean id=\"multipartResolver\"\n\t\tclass=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\">\n   <!-- 设置上传文件的最大值 -->\n\t<property name=\"maxUploadSize\" value=\"1048576000\"></property>\n  \t<!-- 多大的文件会被保存在磁盘上 -->\n\t<property name=\"maxInMemorySize\" value=\"4096\" />\n\t<property name=\"defaultEncoding\" value=\"UTF-8\"></property>\n</bean>\n```\n\n## HTML\n\n这里注意一下设置form的enctype属性为multipart/form-data\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\n<form action=\"fileUpload\" method=\"post\" enctype=\"multipart/form-data\">\n\tfile :<input type=\"file\" name=\"file\">\n\t<input type=\"submit\">\n</form>\n\n</body>\n</html>\n```\n\n这里如果想上传多个文件的话，只需要多放几个`<input type=\"file\" name=\"file\">`\n\n## controller\n\n```java\npackage springmvc.controller;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.Date;\nimport java.util.List;\n\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.multipart.commons.CommonsMultipartFile;\n\n@Controller\n@RequestMapping(value = \"/person\")\npublic class PersonController {\n\n\tpublic PersonController() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t\n\t@RequestMapping(value=\"/fileUpload\" ,method=RequestMethod.GET)\n\tpublic String fileUpload() {\n\t\treturn \"person/fileUpload\";\n\t}\n\t\n\t\n\t@RequestMapping(value=\"/fileUpload\" ,method=RequestMethod.POST)\n\tpublic String fileUpload(@RequestParam(\"file\") CommonsMultipartFile file) throws IllegalStateException, IOException {\n\t\tlong starttimes = System.currentTimeMillis();\n\t\tSystem.out.println(file.getOriginalFilename());\n\t\tSystem.out.println(file.getContentType());\n\t\tSystem.out.println(file.getName());\n\t\tSystem.out.println(file.getSize());\n\t\tString path=\"E:/\"+(new Date()).getTime()+file.getOriginalFilename();\n\t\tFile fi = new File(path);\n\t\tfile.transferTo(fi);\n\t\tlong endTime =System.currentTimeMillis();\n\t\tSystem.out.println(\"方法的运行时间：\"+String.valueOf(endTime-starttimes)+\"ms\");\n\t\treturn \"person/fileUpload\";\n\t}\n\n}\n```\n\n启动运行，没问题\n\n如果是多个文件同时上传，CommonsMultipartFile参数修改为数组即可\n\n>    Javahxjs-j2-gjtx9(jb51.net).rar\n>    application/octet-stream    \n>    file\n>    121780292\n>    方法的运行时间：83ms\n\n----20190529 更新\n\n>    有些场景当文件上传后需要返回一个文件访问连接，在前端页面生成下载按钮。就需要后台服务器把文件上传后，拼接一个URL，需要考虑如果文件名有中文，或者特殊字符，返回到前端就可能会出现问题。因此需要使用URLEncode.encode();方法对中文名字进行转码\n\n```java\n\tRequestMapping(value = \"/upload-file\", method = RequestMethod.POST)\n\t@ResponseBody\n\tpublic Map<String, String> uploadFile(@RequestParam(\"file\") MultipartFile file) throws UnsupportedEncodingException {\n\t\tMap<String, String> result = new HashMap<String, String>();\n\t\tString oldName = file.getOriginalFilename();\n\t\tString fileName = saveFile(file);\n\t\tif (!StringUtils.hasText(fileName)) {\n\t\t\tresult.put(\"message\", \"文件上传失败\");\n\t\t}\n\n\t\tString srcStr = \"<a target='_blank' href='\" + this.getCtxPath()\n\t\t\t\t+ \"/home/student/course/exam/download-file?filePath=\" + fileName + \"&oldName=\" + URLEncoder.encode(oldName,\"utf-8\") + \"'>\"\n\t\t\t\t+ oldName + \"</a>\";\n\t\tresult.put(\"oldName\", oldName);\n\t\tresult.put(\"location\", srcStr);\n\t\treturn result;\n\t}\n```\n\n\n\n# 文件上传出现异常的时候\n\n## 自定义一个异常处理类\n\n```java\npackage springmvc;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.multipart.MaxUploadSizeExceededException;\nimport org.springframework.web.servlet.HandlerExceptionResolver;\nimport org.springframework.web.servlet.ModelAndView;\n\n/**\n * 自定义异常处理类\n * @author Administrator\n *\n */\npublic class ExceptionHandler implements HandlerExceptionResolver {\n\n\tpublic ExceptionHandler() {\n\t}\n\n\tpublic ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object obj,\n\t\t\tException ep) {\n\n\t\tModelAndView mview = new ModelAndView();\n\t\tif(ep instanceof MaxUploadSizeExceededException) {\n\t\t\tmview.addObject(\"errormessage\", \"上传文件大小超出限制\");\n\t\t\tmview.setViewName(\"error\");\n\t\t\treturn mview;\n\t\t}\n\t\treturn null;\n\t}\n\n}\n\n```\n\n## 在spring上下文中注册该Handler\n\n```xml\n<bean class=\"springmvc.ExceptionHandler\"></bean>\n```\n\n## 编写错误页面\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<label th:text=\"${errormessage}\">系统出现异常</label>\n</body>\n</html>\n```\n\n运行，搞定\n\n>    上述的代码虽然可以成功将文件上传到服务器上面的指定目录当中，但是文件上传功能有许多需要注意的小细节问题，以下列出的几点需要特别注意的：\n>\n>    　　（1）、为保证服务器安全，上传文件应该放在外界无法直接访问的目录下，比如放于WEB-INF目录下。\n>\n>    　　（2）、为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名。\n>\n>    　　（3）、为防止一个目录下面出现太多文件，要使用hash算法打散存储。\n>\n>    　　（4）、要限制上传文件的最大值。\n>\n>    　　（5）、要限制上传文件的类型，在收到上传文件名时，判断后缀名是否合法。\n\n# 文件下载\n\n## ResponseEntity`<byte[]>`方式\n\n```java\n\t@RequestMapping(\"/download-file\")\n\tpublic ResponseEntity<byte[]> downLoadFile(@RequestParam(\"filePath\") String filePath, @RequestParam(\"oldName\") String oldName) {\n\t\tbyte[] body = null;\n\t\tFile file = new File(filePath);\n\t\t// 获取文件\n\t\tInputStream is;\n\t\ttry {\n\t\t\tis = new FileInputStream(file);\n\t\t\tbody = new byte[is.available()];\n\t\t\tis.read(body);\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\t// 设置文件类型\n\t\theaders.add(\"Content-Disposition\", \"attchement;filename=\" + oldName);\n\t\t// 设置Http状态码\n\t\tHttpStatus statusCode = HttpStatus.OK;\n\t\t// 返回数据\n\t\tResponseEntity<byte[]> entity = new ResponseEntity<byte[]>(body, headers, statusCode);\n\t\treturn entity;\n\t}\n```\n\n## 传统模式\n\n```java\n\t@RequestMapping(\"/download\")\n\t@ResponseBody\n\tpublic void downloadCert(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows IOException {\n\t\t//得到要下载的文件名\n         String fileName = request.getParameter(\"filename\");\n         fileName = new String(fileName.getBytes(\"iso8859-1\"),\"UTF-8\");\n         //假设上传的文件都是保存在/WEB-INF/upload目录下的子目录当中\n         String fileSaveRootPath=this.getServletContext().getRealPath(\"/WEB-INF/upload\");\n         //处理文件名\n         String realname = fileName.substring(fileName.indexOf(\"_\")+1);\n         //通过文件名找出文件的所在目录\n         String path = findFileSavePathByFileName(fileName,fileSaveRootPath);\n         //得到要下载的文件\n         File file = new File(path+File.separator+fileName);\n         //如果文件不存在\n         if(!file.exists()){\n             request.setAttribute(\"message\", \"您要下载的资源已被删除！！\");\n             request.getRequestDispatcher(\"/message.jsp\").forward(request, response);\n             return;\n         }\n         \n          //设置响应头，控制浏览器下载该文件\n          response.setHeader(\"content-disposition\", \"attachment;filename=\" + URLEncoder.encode(realname, \"UTF-8\"));\n          //读取要下载的文件，保存到文件输入流\n          FileInputStream fis = new FileInputStream(path + File.separator + fileName);\n          //创建输出流\n          OutputStream fos = response.getOutputStream();\n          //设置缓存区\n          ByteBuffer buffer = ByteBuffer.allocate(1024);\n          //输入通道\n          FileChannel readChannel = fis.getChannel();\n          //输出通道\n          FileChannel writeChannel = ((FileOutputStream)fos).getChannel();\n          while(true){\n              buffer.clear();\n              int len = readChannel.read(buffer);//读入数据\n              if(len < 0){\n                  break;//传输结束\n              }\n              buffer.flip();\n              writeChannel.write(buffer);//写入数据\n          }\n          //关闭输入流\n          fis.close();\n          //关闭输出流\n          fos.close();\n\t}\n```\n\n----20190529更新\n\n>    下载文件名为中文时，会出现乱码问题，需要设置`response.setCharacterEncoding(\"utf-8\");` 和对中文名字进行encode编码\n\n```java\n\t@RequestMapping(\"/download-file\")\n\tpublic void downLoadFile(@RequestParam(\"filePath\") String filePath,\n\t\t\t@RequestParam(\"oldName\") String oldName,HttpServletResponse response) throws IOException {\n\t\tresponse.setCharacterEncoding(\"utf-8\");\n\t\tresponse.setContentType(\"application/octet-stream\");\n\t\tresponse.setHeader(\"Content-Disposition\", \"attachment; filename=\" + URLEncoder.encode(oldName,\"utf-8\"));\n\t\tOutputStream out = response.getOutputStream();\n\t\tInputStream in = uploadService.readFile(filePath);\n\t\tFileCopyUtils.copy(in, out);\n\t\tin.close();\n\t\tout.close();\n\t}\n```\n\n[参考《java文件上传和下载》](https://www.cnblogs.com/lcngu/p/5471610.html)\n\n","source":"_posts/fileUpload.md","raw":"---\ntitle: springmvc文件上传、下载\ndate: 2017-11-30 15:28:33\ntags: [springmvc]\n---\n\n现在基本web应用都需要用到文件上传的功能，不废话，直接上\n\n# 文件上传\n\n这里使用的是CommonsMultipartResolver。\n\n<!-- more -->\n\n## 导入jar\n\n```xml\n<dependency>\n\t<groupId>commons-fileupload</groupId>\n\t<artifactId>commons-fileupload</artifactId>\n\t<version>1.3.1</version>\n</dependency>\n```\n\n## 添加CommonsMultipartResolver配置\n\n```xml\n<bean id=\"multipartResolver\"\n\t\tclass=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\">\n   <!-- 设置上传文件的最大值 -->\n\t<property name=\"maxUploadSize\" value=\"1048576000\"></property>\n  \t<!-- 多大的文件会被保存在磁盘上 -->\n\t<property name=\"maxInMemorySize\" value=\"4096\" />\n\t<property name=\"defaultEncoding\" value=\"UTF-8\"></property>\n</bean>\n```\n\n## HTML\n\n这里注意一下设置form的enctype属性为multipart/form-data\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\n<form action=\"fileUpload\" method=\"post\" enctype=\"multipart/form-data\">\n\tfile :<input type=\"file\" name=\"file\">\n\t<input type=\"submit\">\n</form>\n\n</body>\n</html>\n```\n\n这里如果想上传多个文件的话，只需要多放几个`<input type=\"file\" name=\"file\">`\n\n## controller\n\n```java\npackage springmvc.controller;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.Date;\nimport java.util.List;\n\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.multipart.commons.CommonsMultipartFile;\n\n@Controller\n@RequestMapping(value = \"/person\")\npublic class PersonController {\n\n\tpublic PersonController() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t\n\t@RequestMapping(value=\"/fileUpload\" ,method=RequestMethod.GET)\n\tpublic String fileUpload() {\n\t\treturn \"person/fileUpload\";\n\t}\n\t\n\t\n\t@RequestMapping(value=\"/fileUpload\" ,method=RequestMethod.POST)\n\tpublic String fileUpload(@RequestParam(\"file\") CommonsMultipartFile file) throws IllegalStateException, IOException {\n\t\tlong starttimes = System.currentTimeMillis();\n\t\tSystem.out.println(file.getOriginalFilename());\n\t\tSystem.out.println(file.getContentType());\n\t\tSystem.out.println(file.getName());\n\t\tSystem.out.println(file.getSize());\n\t\tString path=\"E:/\"+(new Date()).getTime()+file.getOriginalFilename();\n\t\tFile fi = new File(path);\n\t\tfile.transferTo(fi);\n\t\tlong endTime =System.currentTimeMillis();\n\t\tSystem.out.println(\"方法的运行时间：\"+String.valueOf(endTime-starttimes)+\"ms\");\n\t\treturn \"person/fileUpload\";\n\t}\n\n}\n```\n\n启动运行，没问题\n\n如果是多个文件同时上传，CommonsMultipartFile参数修改为数组即可\n\n>    Javahxjs-j2-gjtx9(jb51.net).rar\n>    application/octet-stream    \n>    file\n>    121780292\n>    方法的运行时间：83ms\n\n----20190529 更新\n\n>    有些场景当文件上传后需要返回一个文件访问连接，在前端页面生成下载按钮。就需要后台服务器把文件上传后，拼接一个URL，需要考虑如果文件名有中文，或者特殊字符，返回到前端就可能会出现问题。因此需要使用URLEncode.encode();方法对中文名字进行转码\n\n```java\n\tRequestMapping(value = \"/upload-file\", method = RequestMethod.POST)\n\t@ResponseBody\n\tpublic Map<String, String> uploadFile(@RequestParam(\"file\") MultipartFile file) throws UnsupportedEncodingException {\n\t\tMap<String, String> result = new HashMap<String, String>();\n\t\tString oldName = file.getOriginalFilename();\n\t\tString fileName = saveFile(file);\n\t\tif (!StringUtils.hasText(fileName)) {\n\t\t\tresult.put(\"message\", \"文件上传失败\");\n\t\t}\n\n\t\tString srcStr = \"<a target='_blank' href='\" + this.getCtxPath()\n\t\t\t\t+ \"/home/student/course/exam/download-file?filePath=\" + fileName + \"&oldName=\" + URLEncoder.encode(oldName,\"utf-8\") + \"'>\"\n\t\t\t\t+ oldName + \"</a>\";\n\t\tresult.put(\"oldName\", oldName);\n\t\tresult.put(\"location\", srcStr);\n\t\treturn result;\n\t}\n```\n\n\n\n# 文件上传出现异常的时候\n\n## 自定义一个异常处理类\n\n```java\npackage springmvc;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.multipart.MaxUploadSizeExceededException;\nimport org.springframework.web.servlet.HandlerExceptionResolver;\nimport org.springframework.web.servlet.ModelAndView;\n\n/**\n * 自定义异常处理类\n * @author Administrator\n *\n */\npublic class ExceptionHandler implements HandlerExceptionResolver {\n\n\tpublic ExceptionHandler() {\n\t}\n\n\tpublic ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object obj,\n\t\t\tException ep) {\n\n\t\tModelAndView mview = new ModelAndView();\n\t\tif(ep instanceof MaxUploadSizeExceededException) {\n\t\t\tmview.addObject(\"errormessage\", \"上传文件大小超出限制\");\n\t\t\tmview.setViewName(\"error\");\n\t\t\treturn mview;\n\t\t}\n\t\treturn null;\n\t}\n\n}\n\n```\n\n## 在spring上下文中注册该Handler\n\n```xml\n<bean class=\"springmvc.ExceptionHandler\"></bean>\n```\n\n## 编写错误页面\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<label th:text=\"${errormessage}\">系统出现异常</label>\n</body>\n</html>\n```\n\n运行，搞定\n\n>    上述的代码虽然可以成功将文件上传到服务器上面的指定目录当中，但是文件上传功能有许多需要注意的小细节问题，以下列出的几点需要特别注意的：\n>\n>    　　（1）、为保证服务器安全，上传文件应该放在外界无法直接访问的目录下，比如放于WEB-INF目录下。\n>\n>    　　（2）、为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名。\n>\n>    　　（3）、为防止一个目录下面出现太多文件，要使用hash算法打散存储。\n>\n>    　　（4）、要限制上传文件的最大值。\n>\n>    　　（5）、要限制上传文件的类型，在收到上传文件名时，判断后缀名是否合法。\n\n# 文件下载\n\n## ResponseEntity`<byte[]>`方式\n\n```java\n\t@RequestMapping(\"/download-file\")\n\tpublic ResponseEntity<byte[]> downLoadFile(@RequestParam(\"filePath\") String filePath, @RequestParam(\"oldName\") String oldName) {\n\t\tbyte[] body = null;\n\t\tFile file = new File(filePath);\n\t\t// 获取文件\n\t\tInputStream is;\n\t\ttry {\n\t\t\tis = new FileInputStream(file);\n\t\t\tbody = new byte[is.available()];\n\t\t\tis.read(body);\n\t\t} catch (FileNotFoundException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tHttpHeaders headers = new HttpHeaders();\n\t\t// 设置文件类型\n\t\theaders.add(\"Content-Disposition\", \"attchement;filename=\" + oldName);\n\t\t// 设置Http状态码\n\t\tHttpStatus statusCode = HttpStatus.OK;\n\t\t// 返回数据\n\t\tResponseEntity<byte[]> entity = new ResponseEntity<byte[]>(body, headers, statusCode);\n\t\treturn entity;\n\t}\n```\n\n## 传统模式\n\n```java\n\t@RequestMapping(\"/download\")\n\t@ResponseBody\n\tpublic void downloadCert(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows IOException {\n\t\t//得到要下载的文件名\n         String fileName = request.getParameter(\"filename\");\n         fileName = new String(fileName.getBytes(\"iso8859-1\"),\"UTF-8\");\n         //假设上传的文件都是保存在/WEB-INF/upload目录下的子目录当中\n         String fileSaveRootPath=this.getServletContext().getRealPath(\"/WEB-INF/upload\");\n         //处理文件名\n         String realname = fileName.substring(fileName.indexOf(\"_\")+1);\n         //通过文件名找出文件的所在目录\n         String path = findFileSavePathByFileName(fileName,fileSaveRootPath);\n         //得到要下载的文件\n         File file = new File(path+File.separator+fileName);\n         //如果文件不存在\n         if(!file.exists()){\n             request.setAttribute(\"message\", \"您要下载的资源已被删除！！\");\n             request.getRequestDispatcher(\"/message.jsp\").forward(request, response);\n             return;\n         }\n         \n          //设置响应头，控制浏览器下载该文件\n          response.setHeader(\"content-disposition\", \"attachment;filename=\" + URLEncoder.encode(realname, \"UTF-8\"));\n          //读取要下载的文件，保存到文件输入流\n          FileInputStream fis = new FileInputStream(path + File.separator + fileName);\n          //创建输出流\n          OutputStream fos = response.getOutputStream();\n          //设置缓存区\n          ByteBuffer buffer = ByteBuffer.allocate(1024);\n          //输入通道\n          FileChannel readChannel = fis.getChannel();\n          //输出通道\n          FileChannel writeChannel = ((FileOutputStream)fos).getChannel();\n          while(true){\n              buffer.clear();\n              int len = readChannel.read(buffer);//读入数据\n              if(len < 0){\n                  break;//传输结束\n              }\n              buffer.flip();\n              writeChannel.write(buffer);//写入数据\n          }\n          //关闭输入流\n          fis.close();\n          //关闭输出流\n          fos.close();\n\t}\n```\n\n----20190529更新\n\n>    下载文件名为中文时，会出现乱码问题，需要设置`response.setCharacterEncoding(\"utf-8\");` 和对中文名字进行encode编码\n\n```java\n\t@RequestMapping(\"/download-file\")\n\tpublic void downLoadFile(@RequestParam(\"filePath\") String filePath,\n\t\t\t@RequestParam(\"oldName\") String oldName,HttpServletResponse response) throws IOException {\n\t\tresponse.setCharacterEncoding(\"utf-8\");\n\t\tresponse.setContentType(\"application/octet-stream\");\n\t\tresponse.setHeader(\"Content-Disposition\", \"attachment; filename=\" + URLEncoder.encode(oldName,\"utf-8\"));\n\t\tOutputStream out = response.getOutputStream();\n\t\tInputStream in = uploadService.readFile(filePath);\n\t\tFileCopyUtils.copy(in, out);\n\t\tin.close();\n\t\tout.close();\n\t}\n```\n\n[参考《java文件上传和下载》](https://www.cnblogs.com/lcngu/p/5471610.html)\n\n","slug":"fileUpload","published":1,"updated":"2022-11-24T13:38:45.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1e400084ovk09t8rf3y","content":"<p>现在基本web应用都需要用到文件上传的功能，不废话，直接上</p>\n<h1 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h1><p>这里使用的是CommonsMultipartResolver。</p>\n<a id=\"more\"></a>\n<h2 id=\"导入jar\"><a href=\"#导入jar\" class=\"headerlink\" title=\"导入jar\"></a>导入jar</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加CommonsMultipartResolver配置\"><a href=\"#添加CommonsMultipartResolver配置\" class=\"headerlink\" title=\"添加CommonsMultipartResolver配置\"></a>添加CommonsMultipartResolver配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"multipartResolver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 设置上传文件的最大值 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxUploadSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1048576000\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"comment\">&lt;!-- 多大的文件会被保存在磁盘上 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxInMemorySize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4096\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultEncoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><p>这里注意一下设置form的enctype属性为multipart/form-data</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"fileUpload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></span><br><span class=\"line\">\tfile :<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里如果想上传多个文件的话，只需要多放几个<code>&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</code></p>\n<h2 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/person\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PersonController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/fileUpload\"</span> ,method=RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fileUpload</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"person/fileUpload\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/fileUpload\"</span> ,method=RequestMethod.POST)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fileUpload</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"file\"</span>)</span> CommonsMultipartFile file) <span class=\"keyword\">throws</span> IllegalStateException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> starttimes = System.currentTimeMillis();</span><br><span class=\"line\">\t\tSystem.out.println(file.getOriginalFilename());</span><br><span class=\"line\">\t\tSystem.out.println(file.getContentType());</span><br><span class=\"line\">\t\tSystem.out.println(file.getName());</span><br><span class=\"line\">\t\tSystem.out.println(file.getSize());</span><br><span class=\"line\">\t\tString path=<span class=\"string\">\"E:/\"</span>+(<span class=\"keyword\">new</span> Date()).getTime()+file.getOriginalFilename();</span><br><span class=\"line\">\t\tFile fi = <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">\t\tfile.transferTo(fi);</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> endTime =System.currentTimeMillis();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"方法的运行时间：\"</span>+String.valueOf(endTime-starttimes)+<span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"person/fileUpload\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动运行，没问题</p>\n<p>如果是多个文件同时上传，CommonsMultipartFile参数修改为数组即可</p>\n<blockquote>\n<p>   Javahxjs-j2-gjtx9(jb51.net).rar<br>   application/octet-stream<br>   file<br>   121780292<br>   方法的运行时间：83ms</p>\n</blockquote>\n<p>—-20190529 更新</p>\n<blockquote>\n<p>   有些场景当文件上传后需要返回一个文件访问连接，在前端页面生成下载按钮。就需要后台服务器把文件上传后，拼接一个URL，需要考虑如果文件名有中文，或者特殊字符，返回到前端就可能会出现问题。因此需要使用URLEncode.encode();方法对中文名字进行转码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestMapping(value = <span class=\"string\">\"/upload-file\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, String&gt; <span class=\"title\">uploadFile</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"file\"</span>)</span> MultipartFile file) <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">\tMap&lt;String, String&gt; result = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">\tString oldName = file.getOriginalFilename();</span><br><span class=\"line\">\tString fileName = saveFile(file);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!StringUtils.hasText(fileName)) &#123;</span><br><span class=\"line\">\t\tresult.put(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"文件上传失败\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tString srcStr = <span class=\"string\">\"&lt;a target='_blank' href='\"</span> + <span class=\"keyword\">this</span>.getCtxPath()</span><br><span class=\"line\">\t\t\t+ <span class=\"string\">\"/home/student/course/exam/download-file?filePath=\"</span> + fileName + <span class=\"string\">\"&amp;oldName=\"</span> + URLEncoder.encode(oldName,<span class=\"string\">\"utf-8\"</span>) + <span class=\"string\">\"'&gt;\"</span></span><br><span class=\"line\">\t\t\t+ oldName + <span class=\"string\">\"&lt;/a&gt;\"</span>;</span><br><span class=\"line\">\tresult.put(<span class=\"string\">\"oldName\"</span>, oldName);</span><br><span class=\"line\">\tresult.put(<span class=\"string\">\"location\"</span>, srcStr);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"文件上传出现异常的时候\"><a href=\"#文件上传出现异常的时候\" class=\"headerlink\" title=\"文件上传出现异常的时候\"></a>文件上传出现异常的时候</h1><h2 id=\"自定义一个异常处理类\"><a href=\"#自定义一个异常处理类\" class=\"headerlink\" title=\"自定义一个异常处理类\"></a>自定义一个异常处理类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.multipart.MaxUploadSizeExceededException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义异常处理类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Administrator</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerExceptionResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExceptionHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveException</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object obj,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tException ep)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tModelAndView mview = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ep <span class=\"keyword\">instanceof</span> MaxUploadSizeExceededException) &#123;</span><br><span class=\"line\">\t\t\tmview.addObject(<span class=\"string\">\"errormessage\"</span>, <span class=\"string\">\"上传文件大小超出限制\"</span>);</span><br><span class=\"line\">\t\t\tmview.setViewName(<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mview;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在spring上下文中注册该Handler\"><a href=\"#在spring上下文中注册该Handler\" class=\"headerlink\" title=\"在spring上下文中注册该Handler\"></a>在spring上下文中注册该Handler</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"springmvc.ExceptionHandler\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写错误页面\"><a href=\"#编写错误页面\" class=\"headerlink\" title=\"编写错误页面\"></a>编写错误页面</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;errormessage&#125;\"</span>&gt;</span>系统出现异常<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行，搞定</p>\n<blockquote>\n<p>   上述的代码虽然可以成功将文件上传到服务器上面的指定目录当中，但是文件上传功能有许多需要注意的小细节问题，以下列出的几点需要特别注意的：</p>\n<p>   　　（1）、为保证服务器安全，上传文件应该放在外界无法直接访问的目录下，比如放于WEB-INF目录下。</p>\n<p>   　　（2）、为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名。</p>\n<p>   　　（3）、为防止一个目录下面出现太多文件，要使用hash算法打散存储。</p>\n<p>   　　（4）、要限制上传文件的最大值。</p>\n<p>   　　（5）、要限制上传文件的类型，在收到上传文件名时，判断后缀名是否合法。</p>\n</blockquote>\n<h1 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h1><h2 id=\"ResponseEntity-lt-byte-gt-方式\"><a href=\"#ResponseEntity-lt-byte-gt-方式\" class=\"headerlink\" title=\"ResponseEntity&lt;byte[]&gt;方式\"></a>ResponseEntity<code>&lt;byte[]&gt;</code>方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/download-file\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> ResponseEntity&lt;<span class=\"keyword\">byte</span>[]&gt; downLoadFile(<span class=\"meta\">@RequestParam</span>(<span class=\"string\">\"filePath\"</span>) String filePath, <span class=\"meta\">@RequestParam</span>(<span class=\"string\">\"oldName\"</span>) String oldName) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] body = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tFile file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">\t<span class=\"comment\">// 获取文件</span></span><br><span class=\"line\">\tInputStream is;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tis = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">\t\tbody = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[is.available()];</span><br><span class=\"line\">\t\tis.read(body);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">\t<span class=\"comment\">// 设置文件类型</span></span><br><span class=\"line\">\theaders.add(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"attchement;filename=\"</span> + oldName);</span><br><span class=\"line\">\t<span class=\"comment\">// 设置Http状态码</span></span><br><span class=\"line\">\tHttpStatus statusCode = HttpStatus.OK;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回数据</span></span><br><span class=\"line\">\tResponseEntity&lt;<span class=\"keyword\">byte</span>[]&gt; entity = <span class=\"keyword\">new</span> ResponseEntity&lt;<span class=\"keyword\">byte</span>[]&gt;(body, headers, statusCode);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"传统模式\"><a href=\"#传统模式\" class=\"headerlink\" title=\"传统模式\"></a>传统模式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/download\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">downloadCert</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//得到要下载的文件名</span></span><br><span class=\"line\">        String fileName = request.getParameter(<span class=\"string\">\"filename\"</span>);</span><br><span class=\"line\">        fileName = <span class=\"keyword\">new</span> String(fileName.getBytes(<span class=\"string\">\"iso8859-1\"</span>),<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//假设上传的文件都是保存在/WEB-INF/upload目录下的子目录当中</span></span><br><span class=\"line\">        String fileSaveRootPath=<span class=\"keyword\">this</span>.getServletContext().getRealPath(<span class=\"string\">\"/WEB-INF/upload\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//处理文件名</span></span><br><span class=\"line\">        String realname = fileName.substring(fileName.indexOf(<span class=\"string\">\"_\"</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//通过文件名找出文件的所在目录</span></span><br><span class=\"line\">        String path = findFileSavePathByFileName(fileName,fileSaveRootPath);</span><br><span class=\"line\">        <span class=\"comment\">//得到要下载的文件</span></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(path+File.separator+fileName);</span><br><span class=\"line\">        <span class=\"comment\">//如果文件不存在</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!file.exists())&#123;</span><br><span class=\"line\">            request.setAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"您要下载的资源已被删除！！\"</span>);</span><br><span class=\"line\">            request.getRequestDispatcher(<span class=\"string\">\"/message.jsp\"</span>).forward(request, response);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">//设置响应头，控制浏览器下载该文件</span></span><br><span class=\"line\">         response.setHeader(<span class=\"string\">\"content-disposition\"</span>, <span class=\"string\">\"attachment;filename=\"</span> + URLEncoder.encode(realname, <span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">         <span class=\"comment\">//读取要下载的文件，保存到文件输入流</span></span><br><span class=\"line\">         FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(path + File.separator + fileName);</span><br><span class=\"line\">         <span class=\"comment\">//创建输出流</span></span><br><span class=\"line\">         OutputStream fos = response.getOutputStream();</span><br><span class=\"line\">         <span class=\"comment\">//设置缓存区</span></span><br><span class=\"line\">         ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">         <span class=\"comment\">//输入通道</span></span><br><span class=\"line\">         FileChannel readChannel = fis.getChannel();</span><br><span class=\"line\">         <span class=\"comment\">//输出通道</span></span><br><span class=\"line\">         FileChannel writeChannel = ((FileOutputStream)fos).getChannel();</span><br><span class=\"line\">         <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">             buffer.clear();</span><br><span class=\"line\">             <span class=\"keyword\">int</span> len = readChannel.read(buffer);<span class=\"comment\">//读入数据</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span>(len &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">break</span>;<span class=\"comment\">//传输结束</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             buffer.flip();</span><br><span class=\"line\">             writeChannel.write(buffer);<span class=\"comment\">//写入数据</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">//关闭输入流</span></span><br><span class=\"line\">         fis.close();</span><br><span class=\"line\">         <span class=\"comment\">//关闭输出流</span></span><br><span class=\"line\">         fos.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>—-20190529更新</p>\n<blockquote>\n<p>   下载文件名为中文时，会出现乱码问题，需要设置<code>response.setCharacterEncoding(&quot;utf-8&quot;);</code> 和对中文名字进行encode编码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/download-file\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">downLoadFile</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"filePath\"</span>)</span> String filePath,</span></span><br><span class=\"line\"><span class=\"function\">\t\t@<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"oldName\"</span>)</span> String oldName,HttpServletResponse response) <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\tresponse.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\tresponse.setContentType(<span class=\"string\">\"application/octet-stream\"</span>);</span><br><span class=\"line\">\tresponse.setHeader(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"attachment; filename=\"</span> + URLEncoder.encode(oldName,<span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">\tOutputStream out = response.getOutputStream();</span><br><span class=\"line\">\tInputStream in = uploadService.readFile(filePath);</span><br><span class=\"line\">\tFileCopyUtils.copy(in, out);</span><br><span class=\"line\">\tin.close();</span><br><span class=\"line\">\tout.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/lcngu/p/5471610.html\" target=\"_blank\" rel=\"noopener\">参考《java文件上传和下载》</a></p>\n","site":{"data":{}},"excerpt":"<p>现在基本web应用都需要用到文件上传的功能，不废话，直接上</p>\n<h1 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h1><p>这里使用的是CommonsMultipartResolver。</p>","more":"<h2 id=\"导入jar\"><a href=\"#导入jar\" class=\"headerlink\" title=\"导入jar\"></a>导入jar</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-fileupload<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加CommonsMultipartResolver配置\"><a href=\"#添加CommonsMultipartResolver配置\" class=\"headerlink\" title=\"添加CommonsMultipartResolver配置\"></a>添加CommonsMultipartResolver配置</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"multipartResolver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 设置上传文件的最大值 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxUploadSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1048576000\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"comment\">&lt;!-- 多大的文件会被保存在磁盘上 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxInMemorySize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4096\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"defaultEncoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><p>这里注意一下设置form的enctype属性为multipart/form-data</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"fileUpload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></span><br><span class=\"line\">\tfile :<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"file\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里如果想上传多个文件的话，只需要多放几个<code>&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;</code></p>\n<h2 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/person\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PersonController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/fileUpload\"</span> ,method=RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fileUpload</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"person/fileUpload\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/fileUpload\"</span> ,method=RequestMethod.POST)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">fileUpload</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"file\"</span>)</span> CommonsMultipartFile file) <span class=\"keyword\">throws</span> IllegalStateException, IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> starttimes = System.currentTimeMillis();</span><br><span class=\"line\">\t\tSystem.out.println(file.getOriginalFilename());</span><br><span class=\"line\">\t\tSystem.out.println(file.getContentType());</span><br><span class=\"line\">\t\tSystem.out.println(file.getName());</span><br><span class=\"line\">\t\tSystem.out.println(file.getSize());</span><br><span class=\"line\">\t\tString path=<span class=\"string\">\"E:/\"</span>+(<span class=\"keyword\">new</span> Date()).getTime()+file.getOriginalFilename();</span><br><span class=\"line\">\t\tFile fi = <span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">\t\tfile.transferTo(fi);</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> endTime =System.currentTimeMillis();</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"方法的运行时间：\"</span>+String.valueOf(endTime-starttimes)+<span class=\"string\">\"ms\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"person/fileUpload\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>启动运行，没问题</p>\n<p>如果是多个文件同时上传，CommonsMultipartFile参数修改为数组即可</p>\n<blockquote>\n<p>   Javahxjs-j2-gjtx9(jb51.net).rar<br>   application/octet-stream<br>   file<br>   121780292<br>   方法的运行时间：83ms</p>\n</blockquote>\n<p>—-20190529 更新</p>\n<blockquote>\n<p>   有些场景当文件上传后需要返回一个文件访问连接，在前端页面生成下载按钮。就需要后台服务器把文件上传后，拼接一个URL，需要考虑如果文件名有中文，或者特殊字符，返回到前端就可能会出现问题。因此需要使用URLEncode.encode();方法对中文名字进行转码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RequestMapping(value = <span class=\"string\">\"/upload-file\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Map&lt;String, String&gt; <span class=\"title\">uploadFile</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"file\"</span>)</span> MultipartFile file) <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">\tMap&lt;String, String&gt; result = <span class=\"keyword\">new</span> HashMap&lt;String, String&gt;();</span><br><span class=\"line\">\tString oldName = file.getOriginalFilename();</span><br><span class=\"line\">\tString fileName = saveFile(file);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!StringUtils.hasText(fileName)) &#123;</span><br><span class=\"line\">\t\tresult.put(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"文件上传失败\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tString srcStr = <span class=\"string\">\"&lt;a target='_blank' href='\"</span> + <span class=\"keyword\">this</span>.getCtxPath()</span><br><span class=\"line\">\t\t\t+ <span class=\"string\">\"/home/student/course/exam/download-file?filePath=\"</span> + fileName + <span class=\"string\">\"&amp;oldName=\"</span> + URLEncoder.encode(oldName,<span class=\"string\">\"utf-8\"</span>) + <span class=\"string\">\"'&gt;\"</span></span><br><span class=\"line\">\t\t\t+ oldName + <span class=\"string\">\"&lt;/a&gt;\"</span>;</span><br><span class=\"line\">\tresult.put(<span class=\"string\">\"oldName\"</span>, oldName);</span><br><span class=\"line\">\tresult.put(<span class=\"string\">\"location\"</span>, srcStr);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"文件上传出现异常的时候\"><a href=\"#文件上传出现异常的时候\" class=\"headerlink\" title=\"文件上传出现异常的时候\"></a>文件上传出现异常的时候</h1><h2 id=\"自定义一个异常处理类\"><a href=\"#自定义一个异常处理类\" class=\"headerlink\" title=\"自定义一个异常处理类\"></a>自定义一个异常处理类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.multipart.MaxUploadSizeExceededException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义异常处理类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Administrator</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExceptionHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">HandlerExceptionResolver</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExceptionHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> ModelAndView <span class=\"title\">resolveException</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object obj,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tException ep)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tModelAndView mview = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ep <span class=\"keyword\">instanceof</span> MaxUploadSizeExceededException) &#123;</span><br><span class=\"line\">\t\t\tmview.addObject(<span class=\"string\">\"errormessage\"</span>, <span class=\"string\">\"上传文件大小超出限制\"</span>);</span><br><span class=\"line\">\t\t\tmview.setViewName(<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mview;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在spring上下文中注册该Handler\"><a href=\"#在spring上下文中注册该Handler\" class=\"headerlink\" title=\"在spring上下文中注册该Handler\"></a>在spring上下文中注册该Handler</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"springmvc.ExceptionHandler\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写错误页面\"><a href=\"#编写错误页面\" class=\"headerlink\" title=\"编写错误页面\"></a>编写错误页面</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;errormessage&#125;\"</span>&gt;</span>系统出现异常<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行，搞定</p>\n<blockquote>\n<p>   上述的代码虽然可以成功将文件上传到服务器上面的指定目录当中，但是文件上传功能有许多需要注意的小细节问题，以下列出的几点需要特别注意的：</p>\n<p>   　　（1）、为保证服务器安全，上传文件应该放在外界无法直接访问的目录下，比如放于WEB-INF目录下。</p>\n<p>   　　（2）、为防止文件覆盖的现象发生，要为上传文件产生一个唯一的文件名。</p>\n<p>   　　（3）、为防止一个目录下面出现太多文件，要使用hash算法打散存储。</p>\n<p>   　　（4）、要限制上传文件的最大值。</p>\n<p>   　　（5）、要限制上传文件的类型，在收到上传文件名时，判断后缀名是否合法。</p>\n</blockquote>\n<h1 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h1><h2 id=\"ResponseEntity-lt-byte-gt-方式\"><a href=\"#ResponseEntity-lt-byte-gt-方式\" class=\"headerlink\" title=\"ResponseEntity&lt;byte[]&gt;方式\"></a>ResponseEntity<code>&lt;byte[]&gt;</code>方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/download-file\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> ResponseEntity&lt;<span class=\"keyword\">byte</span>[]&gt; downLoadFile(<span class=\"meta\">@RequestParam</span>(<span class=\"string\">\"filePath\"</span>) String filePath, <span class=\"meta\">@RequestParam</span>(<span class=\"string\">\"oldName\"</span>) String oldName) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">byte</span>[] body = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\tFile file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">\t<span class=\"comment\">// 获取文件</span></span><br><span class=\"line\">\tInputStream is;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tis = <span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">\t\tbody = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[is.available()];</span><br><span class=\"line\">\t\tis.read(body);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\te.printStackTrace();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tHttpHeaders headers = <span class=\"keyword\">new</span> HttpHeaders();</span><br><span class=\"line\">\t<span class=\"comment\">// 设置文件类型</span></span><br><span class=\"line\">\theaders.add(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"attchement;filename=\"</span> + oldName);</span><br><span class=\"line\">\t<span class=\"comment\">// 设置Http状态码</span></span><br><span class=\"line\">\tHttpStatus statusCode = HttpStatus.OK;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回数据</span></span><br><span class=\"line\">\tResponseEntity&lt;<span class=\"keyword\">byte</span>[]&gt; entity = <span class=\"keyword\">new</span> ResponseEntity&lt;<span class=\"keyword\">byte</span>[]&gt;(body, headers, statusCode);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"传统模式\"><a href=\"#传统模式\" class=\"headerlink\" title=\"传统模式\"></a>传统模式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/download\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">downloadCert</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//得到要下载的文件名</span></span><br><span class=\"line\">        String fileName = request.getParameter(<span class=\"string\">\"filename\"</span>);</span><br><span class=\"line\">        fileName = <span class=\"keyword\">new</span> String(fileName.getBytes(<span class=\"string\">\"iso8859-1\"</span>),<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//假设上传的文件都是保存在/WEB-INF/upload目录下的子目录当中</span></span><br><span class=\"line\">        String fileSaveRootPath=<span class=\"keyword\">this</span>.getServletContext().getRealPath(<span class=\"string\">\"/WEB-INF/upload\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//处理文件名</span></span><br><span class=\"line\">        String realname = fileName.substring(fileName.indexOf(<span class=\"string\">\"_\"</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//通过文件名找出文件的所在目录</span></span><br><span class=\"line\">        String path = findFileSavePathByFileName(fileName,fileSaveRootPath);</span><br><span class=\"line\">        <span class=\"comment\">//得到要下载的文件</span></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(path+File.separator+fileName);</span><br><span class=\"line\">        <span class=\"comment\">//如果文件不存在</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!file.exists())&#123;</span><br><span class=\"line\">            request.setAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"您要下载的资源已被删除！！\"</span>);</span><br><span class=\"line\">            request.getRequestDispatcher(<span class=\"string\">\"/message.jsp\"</span>).forward(request, response);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">         <span class=\"comment\">//设置响应头，控制浏览器下载该文件</span></span><br><span class=\"line\">         response.setHeader(<span class=\"string\">\"content-disposition\"</span>, <span class=\"string\">\"attachment;filename=\"</span> + URLEncoder.encode(realname, <span class=\"string\">\"UTF-8\"</span>));</span><br><span class=\"line\">         <span class=\"comment\">//读取要下载的文件，保存到文件输入流</span></span><br><span class=\"line\">         FileInputStream fis = <span class=\"keyword\">new</span> FileInputStream(path + File.separator + fileName);</span><br><span class=\"line\">         <span class=\"comment\">//创建输出流</span></span><br><span class=\"line\">         OutputStream fos = response.getOutputStream();</span><br><span class=\"line\">         <span class=\"comment\">//设置缓存区</span></span><br><span class=\"line\">         ByteBuffer buffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">         <span class=\"comment\">//输入通道</span></span><br><span class=\"line\">         FileChannel readChannel = fis.getChannel();</span><br><span class=\"line\">         <span class=\"comment\">//输出通道</span></span><br><span class=\"line\">         FileChannel writeChannel = ((FileOutputStream)fos).getChannel();</span><br><span class=\"line\">         <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">             buffer.clear();</span><br><span class=\"line\">             <span class=\"keyword\">int</span> len = readChannel.read(buffer);<span class=\"comment\">//读入数据</span></span><br><span class=\"line\">             <span class=\"keyword\">if</span>(len &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                 <span class=\"keyword\">break</span>;<span class=\"comment\">//传输结束</span></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             buffer.flip();</span><br><span class=\"line\">             writeChannel.write(buffer);<span class=\"comment\">//写入数据</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"comment\">//关闭输入流</span></span><br><span class=\"line\">         fis.close();</span><br><span class=\"line\">         <span class=\"comment\">//关闭输出流</span></span><br><span class=\"line\">         fos.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>—-20190529更新</p>\n<blockquote>\n<p>   下载文件名为中文时，会出现乱码问题，需要设置<code>response.setCharacterEncoding(&quot;utf-8&quot;);</code> 和对中文名字进行encode编码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/download-file\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">downLoadFile</span><span class=\"params\">(@RequestParam(<span class=\"string\">\"filePath\"</span>)</span> String filePath,</span></span><br><span class=\"line\"><span class=\"function\">\t\t@<span class=\"title\">RequestParam</span><span class=\"params\">(<span class=\"string\">\"oldName\"</span>)</span> String oldName,HttpServletResponse response) <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\tresponse.setCharacterEncoding(<span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\tresponse.setContentType(<span class=\"string\">\"application/octet-stream\"</span>);</span><br><span class=\"line\">\tresponse.setHeader(<span class=\"string\">\"Content-Disposition\"</span>, <span class=\"string\">\"attachment; filename=\"</span> + URLEncoder.encode(oldName,<span class=\"string\">\"utf-8\"</span>));</span><br><span class=\"line\">\tOutputStream out = response.getOutputStream();</span><br><span class=\"line\">\tInputStream in = uploadService.readFile(filePath);</span><br><span class=\"line\">\tFileCopyUtils.copy(in, out);</span><br><span class=\"line\">\tin.close();</span><br><span class=\"line\">\tout.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://www.cnblogs.com/lcngu/p/5471610.html\" target=\"_blank\" rel=\"noopener\">参考《java文件上传和下载》</a></p>"},{"title":"Gradle 入门","date":"2018-06-26T00:54:47.000Z","_content":"\n# 简介\n\n记得初次写HelloWord级别的WEB应用时，是用MyEclipse写的，要经过项目---> 右键---> 导出---> 选择导出方式---> 部署到tomcat---> 启动tomcat等一系列的操作，才能在浏览器端看到我们写的HelloWord。初识Gradle是我的部门总监彪哥介绍给我们的，说用Gradle做项目自动化构建和部署，一个命令就搞定了。当时还想这么神奇，就让我们一起来学习一下吧。\n\n# 下载\n\n1.   先去官网下载[https://gradle.org/](https://gradle.org/)\n2.   下载后解压到指定目录，配置环境变量**GRADLE_HOME**，值为${contentPath}/gradle-4.5.1/bin\n3.   配置好环境变量，打开命令行输入`gradle -v` ，显示如下，即安装成功\n\n   ```\n\n------------------------------------------------------------\nGradle 4.5.1\n------------------------------------------------------------\n\nBuild time:   2018-02-05 13:22:49 UTC\nRevision:     37007e1c012001ff09973e0bd095139239ecd3b3\n\nGroovy:       2.4.12\nAnt:          Apache Ant(TM) version 1.9.9 compiled on February 2 2017\nJVM:          1.8.0_101 (Oracle Corporation 25.101-b13)\nOS:           Windows 7 6.1 amd64\n   ```\n\n","source":"_posts/gradle-start.md","raw":"---\ntitle: Gradle 入门\ndate: 2018-06-26 08:54:47\ntags: Gradle\n---\n\n# 简介\n\n记得初次写HelloWord级别的WEB应用时，是用MyEclipse写的，要经过项目---> 右键---> 导出---> 选择导出方式---> 部署到tomcat---> 启动tomcat等一系列的操作，才能在浏览器端看到我们写的HelloWord。初识Gradle是我的部门总监彪哥介绍给我们的，说用Gradle做项目自动化构建和部署，一个命令就搞定了。当时还想这么神奇，就让我们一起来学习一下吧。\n\n# 下载\n\n1.   先去官网下载[https://gradle.org/](https://gradle.org/)\n2.   下载后解压到指定目录，配置环境变量**GRADLE_HOME**，值为${contentPath}/gradle-4.5.1/bin\n3.   配置好环境变量，打开命令行输入`gradle -v` ，显示如下，即安装成功\n\n   ```\n\n------------------------------------------------------------\nGradle 4.5.1\n------------------------------------------------------------\n\nBuild time:   2018-02-05 13:22:49 UTC\nRevision:     37007e1c012001ff09973e0bd095139239ecd3b3\n\nGroovy:       2.4.12\nAnt:          Apache Ant(TM) version 1.9.9 compiled on February 2 2017\nJVM:          1.8.0_101 (Oracle Corporation 25.101-b13)\nOS:           Windows 7 6.1 amd64\n   ```\n\n","slug":"gradle-start","published":1,"updated":"2022-11-24T13:38:45.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1e500094ovknbuw4400","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>记得初次写HelloWord级别的WEB应用时，是用MyEclipse写的，要经过项目—&gt; 右键—&gt; 导出—&gt; 选择导出方式—&gt; 部署到tomcat—&gt; 启动tomcat等一系列的操作，才能在浏览器端看到我们写的HelloWord。初识Gradle是我的部门总监彪哥介绍给我们的，说用Gradle做项目自动化构建和部署，一个命令就搞定了。当时还想这么神奇，就让我们一起来学习一下吧。</p>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><ol>\n<li>先去官网下载<a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">https://gradle.org/</a></li>\n<li>下载后解压到指定目录，配置环境变量<strong>GRADLE_HOME</strong>，值为${contentPath}/gradle-4.5.1/bin</li>\n<li><p>配置好环境变量，打开命令行输入<code>gradle -v</code> ，显示如下，即安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">Gradle 4.5.1</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Build time:   2018-02-05 13:22:49 UTC</span><br><span class=\"line\">Revision:     37007e1c012001ff09973e0bd095139239ecd3b3</span><br><span class=\"line\"></span><br><span class=\"line\">Groovy:       2.4.12</span><br><span class=\"line\">Ant:          Apache Ant(TM) version 1.9.9 compiled on February 2 2017</span><br><span class=\"line\">JVM:          1.8.0_101 (Oracle Corporation 25.101-b13)</span><br><span class=\"line\">OS:           Windows 7 6.1 amd64</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>记得初次写HelloWord级别的WEB应用时，是用MyEclipse写的，要经过项目—&gt; 右键—&gt; 导出—&gt; 选择导出方式—&gt; 部署到tomcat—&gt; 启动tomcat等一系列的操作，才能在浏览器端看到我们写的HelloWord。初识Gradle是我的部门总监彪哥介绍给我们的，说用Gradle做项目自动化构建和部署，一个命令就搞定了。当时还想这么神奇，就让我们一起来学习一下吧。</p>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><ol>\n<li>先去官网下载<a href=\"https://gradle.org/\" target=\"_blank\" rel=\"noopener\">https://gradle.org/</a></li>\n<li>下载后解压到指定目录，配置环境变量<strong>GRADLE_HOME</strong>，值为${contentPath}/gradle-4.5.1/bin</li>\n<li><p>配置好环境变量，打开命令行输入<code>gradle -v</code> ，显示如下，即安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\">Gradle 4.5.1</span><br><span class=\"line\">------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Build time:   2018-02-05 13:22:49 UTC</span><br><span class=\"line\">Revision:     37007e1c012001ff09973e0bd095139239ecd3b3</span><br><span class=\"line\"></span><br><span class=\"line\">Groovy:       2.4.12</span><br><span class=\"line\">Ant:          Apache Ant(TM) version 1.9.9 compiled on February 2 2017</span><br><span class=\"line\">JVM:          1.8.0_101 (Oracle Corporation 25.101-b13)</span><br><span class=\"line\">OS:           Windows 7 6.1 amd64</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Git（二）","date":"2018-11-19T08:53:08.000Z","_content":"\n# 简介\n\n前面一篇已经简单认识了Git，并且学习了8个基础的操作命令，今天继续学习\n\n# 工作区和暂存区\n\nGit和其他版本管理系统的区别就是，Git有暂存区的概念。\n\n工作区：其实就是我们电脑上能看到的目录，比如之前创建的learngit目录。\n\n版本库：工作区文件夹内有一个隐藏的.git文件夹，这个就是Git的版本库了。版本库中重要组成部分`stage`（或者叫`index`）的暂存区，还有创建的第一个分支`master`，以及指向`master`的指针`HEAD`（Git切换版本之所以快，是因为切换版本的时候，只是移动了该指针）。\n\n<!-- more -->\n\n![](https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0)\n\n## 提交到暂存区\n\n上一篇学习了`git add`和`git commit`命令是用来添加和提交文件的。\n\n那么`git add`命令之后，发生了什么呢？我们来验证一下。\n\n1.   在learngit目录中新建文件index.txt，并且修改readme.md文件\n\n2.   查看工作区状态`git status`\n\n     >    $ git status\n     >    On branch master\n     >    Changes not staged for commit:\n     >      (use \"git add <file>...\" to update what will be committed)\n     >      (use \"git checkout -- <file>...\" to discard changes in working directory)\n     >\n     >    ​    modified:   readme.md\n     >\n     >\n     >    Untracked files:\n     >      (use \"git add <file>...\" to include in what will be committed)\n     >\n     >    ​    index.txt\n     >\n     >    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n     可以看到`readme.md`文件被修改了，但是还没有提交\n\n     index.txt文件为新建文件，状态为：Untracked\n\n3.   使用`git add`添加文件\n\n4.   再次使用`git status`查看一下状态\n\n     >    $ git status\n     >    warning: LF will be replaced by CRLF in readme.md.\n     >    The file will have its original line endings in your working directory.\n     >    On branch master\n     >    Changes to be committed:\n     >      (use \"git reset HEAD <file>...\" to unstage)\n     >\n     >      new file:   index.txt\n     >      modified:   readme.md\n\n     实际上，这个时候文件是提交到了暂存区中。如图：\n\n     ![](https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907720458e56751df1c474485b697575073c40ae9000/0)\n\n5.   `git commit`命令之后，添加的文件会一次性提交到初始创建的唯一分支`master`中，如图\n\n     ![](https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849077337835a877df2d26742b88dd7f56a6ace3ecf000/0)\n\n     总结：`git add`命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行`git commit`就可以一次性把暂存区的所有修改提交到分支。\t\t\n\n## 管理修改\n\nGit之所以比其他管理工具优秀，是因为Git管理的是修改而非文件。`add` 和 `commit` 两个命令区分了工作区，暂存区和版本库三个区域。\n\n例如：\n\n我们修改文件index.txt，添加一行内容：*one line*，然后`add` 到暂存区\n\n然后在修改index.txt ，在添加一行内容:*two line*\n\n直接`git commit`，理论上这个时候使用`git status`查看状态，工作区应该是没有文件要提交的，下面来看一下\n\n>    $ git status\n>    On branch master\n>    Changes not staged for commit:\n>      (use \"git add <file>...\" to update what will be committed)\n>      (use \"git checkout -- <file>...\" to discard changes in working directory)\n>\n>     modified:   index.txt\n>\n>    no changes added to commit (use \"git add\" and/or \"git commit -a\"\n\n咦，怎么和预期的不一样呢？\n\n因为之前我们已经了解过git有暂存区的概念，`add`命令只是把修改放到暂存区，而`commit`命令只把暂存区的内容提交到分支上。回想一下之前的操作，我们只在第一次修改的时候，执行的`git add`命令，因此，也只是把第一次的修改提交到了暂存区，那么`git commit` 命令只提交了第一次修改后放到暂存区的内容，因此第二次修改的内容，依然没有被提交。\n\n总结：修改--》`git add`---》修改---`git add`---》。。。。--》`git commit`\n\n使用`git diff HEAD -- index.txt`命令可以查看工作区和版本库里面最新版本的区别\n\n>    $ git diff HEAD -- index.txt\n>    diff --git a/index.txt b/index.txt\n>    index 715646a..d2ff8dd 100644\n>    --- a/index.txt\n>    +++ b/index.txt\n>    @@ -1 +1,2 @@\n>    -one line\n>    \\ No newline at end of file\n>    +one line\n>    +two line\n>    \\ No newline at end of file\n\n## 撤销修改\n\n修改后的状态分为三种：1.修改后，并提交到缓存区  2.修改后并没有提交到缓存区  3.修改后已经commit了。\n\n### 撤销工作区的修改\n\n我们修改一下index.txt文件，添加一行 **20181123**，使用git status命令看一下状态\n\n```shell\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   index.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n上面给出了提示，该文件被修改，但是还没有提交，可以使用git add `<file>`命令提交修改。也可以使用\n\ngit checkout -- `<file>`命令撤销修改。\n\n```shell\n$ git checkout -- index.txt\n$ git status\nOn branch master\nnothing to commit, working directory clean\n```\n\n可以看到修改被撤回了，文件也被修改了。\n\ngit checkout -- index.txt 命令 这里的`--`一定要加上，否则就成了切换分支了。\n\n### 撤回暂存区的修改\n\n如果修改已经被提交到暂存区了怎么办呢？，修改文件，敲命令看看情况\n\n```shell\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   index.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n========================\n$ git add index.txt\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   index.txt\n\n$ git checkout -- index.txt\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   index.txt\n```\n\n从上面的情况可以看出，git checkout -- index.txt 命令不能撤销暂存区的修改。因此要用命令`git reset HEAD <file> `可以把暂存区的修改撤销掉（unstage），重新放回工作区\n\n```shell\n$ git reset HEAD index.txt\nUnstaged changes after reset:\nM       index.txt\n=============把修改重新放到了工作区，git status一下看看效果============================\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   index.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n==========果然回来了，那么下一步是不是就知道怎么做了，对，使用checkout命令\n$ git checkout -- index.txt\n$ git status\nOn branch master\nnothing to commit, working directory clean\n```\n\n是不是又修改回来了。\n\n### 撤销版本库的修改\n\n如果内容已经提交到版本库，那么上面的两种方式都不好用了，但是不要忘记我们之间学过的git reset 命令。\n\n```shell\n$ git reset --hard HEAD^\nHEAD is now at 4b05e65 暂时结束学习\n```\n\n## 删除文件\n\n```shell\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        deleted:    a.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git rm a.txt\nrm 'a.txt'\n$ git commit -m \"delete a.txt\"\n[master 4e5967d] delete a.txt\n 1 file changed, 0 insertions(+), 0 deletions(-)\n delete mode 100644 a.txt\n$ git status\nOn branch master\nnothing to commit, working directory clean\n\n```\n\n上面的命令可以看出，当工作区把文件物理删除后，使用git status查看状态，会有提示，有文件删除了。\n\n这个时候，可以使用git rm a.txt命令把文件从版本库中删除，并使用git commit -m 命令提交修改。\n\n如果删除错误的话，可以使用git checkout --a.txt 把文件拉回来，因为之前我们已经提交到版本库中。\n\n","source":"_posts/git-chapter-two.md","raw":"---\ntitle: Git（二）\ndate: 2018-11-19 16:53:08\ntags: [Git]\n---\n\n# 简介\n\n前面一篇已经简单认识了Git，并且学习了8个基础的操作命令，今天继续学习\n\n# 工作区和暂存区\n\nGit和其他版本管理系统的区别就是，Git有暂存区的概念。\n\n工作区：其实就是我们电脑上能看到的目录，比如之前创建的learngit目录。\n\n版本库：工作区文件夹内有一个隐藏的.git文件夹，这个就是Git的版本库了。版本库中重要组成部分`stage`（或者叫`index`）的暂存区，还有创建的第一个分支`master`，以及指向`master`的指针`HEAD`（Git切换版本之所以快，是因为切换版本的时候，只是移动了该指针）。\n\n<!-- more -->\n\n![](https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0)\n\n## 提交到暂存区\n\n上一篇学习了`git add`和`git commit`命令是用来添加和提交文件的。\n\n那么`git add`命令之后，发生了什么呢？我们来验证一下。\n\n1.   在learngit目录中新建文件index.txt，并且修改readme.md文件\n\n2.   查看工作区状态`git status`\n\n     >    $ git status\n     >    On branch master\n     >    Changes not staged for commit:\n     >      (use \"git add <file>...\" to update what will be committed)\n     >      (use \"git checkout -- <file>...\" to discard changes in working directory)\n     >\n     >    ​    modified:   readme.md\n     >\n     >\n     >    Untracked files:\n     >      (use \"git add <file>...\" to include in what will be committed)\n     >\n     >    ​    index.txt\n     >\n     >    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n\n     可以看到`readme.md`文件被修改了，但是还没有提交\n\n     index.txt文件为新建文件，状态为：Untracked\n\n3.   使用`git add`添加文件\n\n4.   再次使用`git status`查看一下状态\n\n     >    $ git status\n     >    warning: LF will be replaced by CRLF in readme.md.\n     >    The file will have its original line endings in your working directory.\n     >    On branch master\n     >    Changes to be committed:\n     >      (use \"git reset HEAD <file>...\" to unstage)\n     >\n     >      new file:   index.txt\n     >      modified:   readme.md\n\n     实际上，这个时候文件是提交到了暂存区中。如图：\n\n     ![](https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907720458e56751df1c474485b697575073c40ae9000/0)\n\n5.   `git commit`命令之后，添加的文件会一次性提交到初始创建的唯一分支`master`中，如图\n\n     ![](https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849077337835a877df2d26742b88dd7f56a6ace3ecf000/0)\n\n     总结：`git add`命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行`git commit`就可以一次性把暂存区的所有修改提交到分支。\t\t\n\n## 管理修改\n\nGit之所以比其他管理工具优秀，是因为Git管理的是修改而非文件。`add` 和 `commit` 两个命令区分了工作区，暂存区和版本库三个区域。\n\n例如：\n\n我们修改文件index.txt，添加一行内容：*one line*，然后`add` 到暂存区\n\n然后在修改index.txt ，在添加一行内容:*two line*\n\n直接`git commit`，理论上这个时候使用`git status`查看状态，工作区应该是没有文件要提交的，下面来看一下\n\n>    $ git status\n>    On branch master\n>    Changes not staged for commit:\n>      (use \"git add <file>...\" to update what will be committed)\n>      (use \"git checkout -- <file>...\" to discard changes in working directory)\n>\n>     modified:   index.txt\n>\n>    no changes added to commit (use \"git add\" and/or \"git commit -a\"\n\n咦，怎么和预期的不一样呢？\n\n因为之前我们已经了解过git有暂存区的概念，`add`命令只是把修改放到暂存区，而`commit`命令只把暂存区的内容提交到分支上。回想一下之前的操作，我们只在第一次修改的时候，执行的`git add`命令，因此，也只是把第一次的修改提交到了暂存区，那么`git commit` 命令只提交了第一次修改后放到暂存区的内容，因此第二次修改的内容，依然没有被提交。\n\n总结：修改--》`git add`---》修改---`git add`---》。。。。--》`git commit`\n\n使用`git diff HEAD -- index.txt`命令可以查看工作区和版本库里面最新版本的区别\n\n>    $ git diff HEAD -- index.txt\n>    diff --git a/index.txt b/index.txt\n>    index 715646a..d2ff8dd 100644\n>    --- a/index.txt\n>    +++ b/index.txt\n>    @@ -1 +1,2 @@\n>    -one line\n>    \\ No newline at end of file\n>    +one line\n>    +two line\n>    \\ No newline at end of file\n\n## 撤销修改\n\n修改后的状态分为三种：1.修改后，并提交到缓存区  2.修改后并没有提交到缓存区  3.修改后已经commit了。\n\n### 撤销工作区的修改\n\n我们修改一下index.txt文件，添加一行 **20181123**，使用git status命令看一下状态\n\n```shell\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   index.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n上面给出了提示，该文件被修改，但是还没有提交，可以使用git add `<file>`命令提交修改。也可以使用\n\ngit checkout -- `<file>`命令撤销修改。\n\n```shell\n$ git checkout -- index.txt\n$ git status\nOn branch master\nnothing to commit, working directory clean\n```\n\n可以看到修改被撤回了，文件也被修改了。\n\ngit checkout -- index.txt 命令 这里的`--`一定要加上，否则就成了切换分支了。\n\n### 撤回暂存区的修改\n\n如果修改已经被提交到暂存区了怎么办呢？，修改文件，敲命令看看情况\n\n```shell\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   index.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n========================\n$ git add index.txt\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   index.txt\n\n$ git checkout -- index.txt\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        modified:   index.txt\n```\n\n从上面的情况可以看出，git checkout -- index.txt 命令不能撤销暂存区的修改。因此要用命令`git reset HEAD <file> `可以把暂存区的修改撤销掉（unstage），重新放回工作区\n\n```shell\n$ git reset HEAD index.txt\nUnstaged changes after reset:\nM       index.txt\n=============把修改重新放到了工作区，git status一下看看效果============================\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   index.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n==========果然回来了，那么下一步是不是就知道怎么做了，对，使用checkout命令\n$ git checkout -- index.txt\n$ git status\nOn branch master\nnothing to commit, working directory clean\n```\n\n是不是又修改回来了。\n\n### 撤销版本库的修改\n\n如果内容已经提交到版本库，那么上面的两种方式都不好用了，但是不要忘记我们之间学过的git reset 命令。\n\n```shell\n$ git reset --hard HEAD^\nHEAD is now at 4b05e65 暂时结束学习\n```\n\n## 删除文件\n\n```shell\n$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        deleted:    a.txt\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n$ git rm a.txt\nrm 'a.txt'\n$ git commit -m \"delete a.txt\"\n[master 4e5967d] delete a.txt\n 1 file changed, 0 insertions(+), 0 deletions(-)\n delete mode 100644 a.txt\n$ git status\nOn branch master\nnothing to commit, working directory clean\n\n```\n\n上面的命令可以看出，当工作区把文件物理删除后，使用git status查看状态，会有提示，有文件删除了。\n\n这个时候，可以使用git rm a.txt命令把文件从版本库中删除，并使用git commit -m 命令提交修改。\n\n如果删除错误的话，可以使用git checkout --a.txt 把文件拉回来，因为之前我们已经提交到版本库中。\n\n","slug":"git-chapter-two","published":1,"updated":"2022-11-24T13:38:45.591Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1e8000b4ovkc0xehqb0","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>前面一篇已经简单认识了Git，并且学习了8个基础的操作命令，今天继续学习</p>\n<h1 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h1><p>Git和其他版本管理系统的区别就是，Git有暂存区的概念。</p>\n<p>工作区：其实就是我们电脑上能看到的目录，比如之前创建的learngit目录。</p>\n<p>版本库：工作区文件夹内有一个隐藏的.git文件夹，这个就是Git的版本库了。版本库中重要组成部分<code>stage</code>（或者叫<code>index</code>）的暂存区，还有创建的第一个分支<code>master</code>，以及指向<code>master</code>的指针<code>HEAD</code>（Git切换版本之所以快，是因为切换版本的时候，只是移动了该指针）。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0\" alt></p>\n<h2 id=\"提交到暂存区\"><a href=\"#提交到暂存区\" class=\"headerlink\" title=\"提交到暂存区\"></a>提交到暂存区</h2><p>上一篇学习了<code>git add</code>和<code>git commit</code>命令是用来添加和提交文件的。</p>\n<p>那么<code>git add</code>命令之后，发生了什么呢？我们来验证一下。</p>\n<ol>\n<li><p>在learngit目录中新建文件index.txt，并且修改readme.md文件</p>\n</li>\n<li><p>查看工作区状态<code>git status</code></p>\n<blockquote>\n<p>   $ git status<br>   On branch master<br>   Changes not staged for commit:</p>\n<pre><code>(use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n(use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n</code></pre><p>   ​    modified:   readme.md</p>\n<p>   Untracked files:</p>\n<pre><code>(use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)\n</code></pre><p>   ​    index.txt</p>\n<p>   no changes added to commit (use “git add” and/or “git commit -a”)</p>\n</blockquote>\n<p>可以看到<code>readme.md</code>文件被修改了，但是还没有提交</p>\n<p>index.txt文件为新建文件，状态为：Untracked</p>\n</li>\n<li><p>使用<code>git add</code>添加文件</p>\n</li>\n<li><p>再次使用<code>git status</code>查看一下状态</p>\n<blockquote>\n<p>   $ git status<br>   warning: LF will be replaced by CRLF in readme.md.<br>   The file will have its original line endings in your working directory.<br>   On branch master<br>   Changes to be committed:</p>\n<pre><code>(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\nnew file:   index.txt\nmodified:   readme.md\n</code></pre></blockquote>\n<p>实际上，这个时候文件是提交到了暂存区中。如图：</p>\n<p><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907720458e56751df1c474485b697575073c40ae9000/0\" alt></p>\n</li>\n<li><p><code>git commit</code>命令之后，添加的文件会一次性提交到初始创建的唯一分支<code>master</code>中，如图</p>\n<p><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849077337835a877df2d26742b88dd7f56a6ace3ecf000/0\" alt></p>\n<p>总结：<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。        </p>\n</li>\n</ol>\n<h2 id=\"管理修改\"><a href=\"#管理修改\" class=\"headerlink\" title=\"管理修改\"></a>管理修改</h2><p>Git之所以比其他管理工具优秀，是因为Git管理的是修改而非文件。<code>add</code> 和 <code>commit</code> 两个命令区分了工作区，暂存区和版本库三个区域。</p>\n<p>例如：</p>\n<p>我们修改文件index.txt，添加一行内容：<em>one line</em>，然后<code>add</code> 到暂存区</p>\n<p>然后在修改index.txt ，在添加一行内容:<em>two line</em></p>\n<p>直接<code>git commit</code>，理论上这个时候使用<code>git status</code>查看状态，工作区应该是没有文件要提交的，下面来看一下</p>\n<blockquote>\n<p>   $ git status<br>   On branch master<br>   Changes not staged for commit:<br>     (use “git add <file>…” to update what will be committed)<br>     (use “git checkout – <file>…” to discard changes in working directory)</file></file></p>\n<pre><code>modified:   index.txt\n</code></pre><p>   no changes added to commit (use “git add” and/or “git commit -a”</p>\n</blockquote>\n<p>咦，怎么和预期的不一样呢？</p>\n<p>因为之前我们已经了解过git有暂存区的概念，<code>add</code>命令只是把修改放到暂存区，而<code>commit</code>命令只把暂存区的内容提交到分支上。回想一下之前的操作，我们只在第一次修改的时候，执行的<code>git add</code>命令，因此，也只是把第一次的修改提交到了暂存区，那么<code>git commit</code> 命令只提交了第一次修改后放到暂存区的内容，因此第二次修改的内容，依然没有被提交。</p>\n<p>总结：修改–》<code>git add</code>—》修改—<code>git add</code>—》。。。。–》<code>git commit</code></p>\n<p>使用<code>git diff HEAD -- index.txt</code>命令可以查看工作区和版本库里面最新版本的区别</p>\n<blockquote>\n<p>   $ git diff HEAD – index.txt<br>   diff –git a/index.txt b/index.txt<br>   index 715646a..d2ff8dd 100644<br>   — a/index.txt<br>   +++ b/index.txt<br>   @@ -1 +1,2 @@<br>   -one line<br>   \\ No newline at end of file<br>   +one line<br>   +two line<br>   \\ No newline at end of file</p>\n</blockquote>\n<h2 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h2><p>修改后的状态分为三种：1.修改后，并提交到缓存区  2.修改后并没有提交到缓存区  3.修改后已经commit了。</p>\n<h3 id=\"撤销工作区的修改\"><a href=\"#撤销工作区的修改\" class=\"headerlink\" title=\"撤销工作区的修改\"></a>撤销工作区的修改</h3><p>我们修改一下index.txt文件，添加一行 <strong>20181123</strong>，使用git status命令看一下状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use \"git add &lt;file&gt;...\" to update what will be committed)</span><br><span class=\"line\">  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   index.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use \"git add\" and/or \"git commit -a\")</span><br></pre></td></tr></table></figure>\n<p>上面给出了提示，该文件被修改，但是还没有提交，可以使用git add <code>&lt;file&gt;</code>命令提交修改。也可以使用</p>\n<p>git checkout – <code>&lt;file&gt;</code>命令撤销修改。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git checkout -- index.txt</span><br><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>\n<p>可以看到修改被撤回了，文件也被修改了。</p>\n<p>git checkout – index.txt 命令 这里的<code>--</code>一定要加上，否则就成了切换分支了。</p>\n<h3 id=\"撤回暂存区的修改\"><a href=\"#撤回暂存区的修改\" class=\"headerlink\" title=\"撤回暂存区的修改\"></a>撤回暂存区的修改</h3><p>如果修改已经被提交到暂存区了怎么办呢？，修改文件，敲命令看看情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use \"git add &lt;file&gt;...\" to update what will be committed)</span><br><span class=\"line\">  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   index.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use \"git add\" and/or \"git commit -a\")</span><br><span class=\"line\">========================</span><br><span class=\"line\"><span class=\"meta\">$</span> git add index.txt</span><br><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use \"git reset HEAD &lt;file&gt;...\" to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   index.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> git checkout -- index.txt</span><br><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use \"git reset HEAD &lt;file&gt;...\" to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   index.txt</span><br></pre></td></tr></table></figure>\n<p>从上面的情况可以看出，git checkout – index.txt 命令不能撤销暂存区的修改。因此要用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git reset HEAD index.txt</span><br><span class=\"line\">Unstaged changes after reset:</span><br><span class=\"line\">M       index.txt</span><br><span class=\"line\">=============把修改重新放到了工作区，git status一下看看效果============================</span><br><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use \"git add &lt;file&gt;...\" to update what will be committed)</span><br><span class=\"line\">  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   index.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use \"git add\" and/or \"git commit -a\")</span><br><span class=\"line\">==========果然回来了，那么下一步是不是就知道怎么做了，对，使用checkout命令</span><br><span class=\"line\"><span class=\"meta\">$</span> git checkout -- index.txt</span><br><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>\n<p>是不是又修改回来了。</p>\n<h3 id=\"撤销版本库的修改\"><a href=\"#撤销版本库的修改\" class=\"headerlink\" title=\"撤销版本库的修改\"></a>撤销版本库的修改</h3><p>如果内容已经提交到版本库，那么上面的两种方式都不好用了，但是不要忘记我们之间学过的git reset 命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git reset --hard HEAD^</span><br><span class=\"line\">HEAD is now at 4b05e65 暂时结束学习</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use \"git add/rm &lt;file&gt;...\" to update what will be committed)</span><br><span class=\"line\">  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        deleted:    a.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use \"git add\" and/or \"git commit -a\")</span><br><span class=\"line\"><span class=\"meta\">$</span> git rm a.txt</span><br><span class=\"line\">rm 'a.txt'</span><br><span class=\"line\"><span class=\"meta\">$</span> git commit -m \"delete a.txt\"</span><br><span class=\"line\">[master 4e5967d] delete a.txt</span><br><span class=\"line\"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class=\"line\"> delete mode 100644 a.txt</span><br><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>\n<p>上面的命令可以看出，当工作区把文件物理删除后，使用git status查看状态，会有提示，有文件删除了。</p>\n<p>这个时候，可以使用git rm a.txt命令把文件从版本库中删除，并使用git commit -m 命令提交修改。</p>\n<p>如果删除错误的话，可以使用git checkout –a.txt 把文件拉回来，因为之前我们已经提交到版本库中。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>前面一篇已经简单认识了Git，并且学习了8个基础的操作命令，今天继续学习</p>\n<h1 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h1><p>Git和其他版本管理系统的区别就是，Git有暂存区的概念。</p>\n<p>工作区：其实就是我们电脑上能看到的目录，比如之前创建的learngit目录。</p>\n<p>版本库：工作区文件夹内有一个隐藏的.git文件夹，这个就是Git的版本库了。版本库中重要组成部分<code>stage</code>（或者叫<code>index</code>）的暂存区，还有创建的第一个分支<code>master</code>，以及指向<code>master</code>的指针<code>HEAD</code>（Git切换版本之所以快，是因为切换版本的时候，只是移动了该指针）。</p>","more":"<p><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0\" alt></p>\n<h2 id=\"提交到暂存区\"><a href=\"#提交到暂存区\" class=\"headerlink\" title=\"提交到暂存区\"></a>提交到暂存区</h2><p>上一篇学习了<code>git add</code>和<code>git commit</code>命令是用来添加和提交文件的。</p>\n<p>那么<code>git add</code>命令之后，发生了什么呢？我们来验证一下。</p>\n<ol>\n<li><p>在learngit目录中新建文件index.txt，并且修改readme.md文件</p>\n</li>\n<li><p>查看工作区状态<code>git status</code></p>\n<blockquote>\n<p>   $ git status<br>   On branch master<br>   Changes not staged for commit:</p>\n<pre><code>(use &quot;git add &lt;file&gt;...&quot; to update what will be committed)\n(use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)\n</code></pre><p>   ​    modified:   readme.md</p>\n<p>   Untracked files:</p>\n<pre><code>(use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)\n</code></pre><p>   ​    index.txt</p>\n<p>   no changes added to commit (use “git add” and/or “git commit -a”)</p>\n</blockquote>\n<p>可以看到<code>readme.md</code>文件被修改了，但是还没有提交</p>\n<p>index.txt文件为新建文件，状态为：Untracked</p>\n</li>\n<li><p>使用<code>git add</code>添加文件</p>\n</li>\n<li><p>再次使用<code>git status</code>查看一下状态</p>\n<blockquote>\n<p>   $ git status<br>   warning: LF will be replaced by CRLF in readme.md.<br>   The file will have its original line endings in your working directory.<br>   On branch master<br>   Changes to be committed:</p>\n<pre><code>(use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\nnew file:   index.txt\nmodified:   readme.md\n</code></pre></blockquote>\n<p>实际上，这个时候文件是提交到了暂存区中。如图：</p>\n<p><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/001384907720458e56751df1c474485b697575073c40ae9000/0\" alt></p>\n</li>\n<li><p><code>git commit</code>命令之后，添加的文件会一次性提交到初始创建的唯一分支<code>master</code>中，如图</p>\n<p><img src=\"https://cdn.liaoxuefeng.com/cdn/files/attachments/0013849077337835a877df2d26742b88dd7f56a6ace3ecf000/0\" alt></p>\n<p>总结：<code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。        </p>\n</li>\n</ol>\n<h2 id=\"管理修改\"><a href=\"#管理修改\" class=\"headerlink\" title=\"管理修改\"></a>管理修改</h2><p>Git之所以比其他管理工具优秀，是因为Git管理的是修改而非文件。<code>add</code> 和 <code>commit</code> 两个命令区分了工作区，暂存区和版本库三个区域。</p>\n<p>例如：</p>\n<p>我们修改文件index.txt，添加一行内容：<em>one line</em>，然后<code>add</code> 到暂存区</p>\n<p>然后在修改index.txt ，在添加一行内容:<em>two line</em></p>\n<p>直接<code>git commit</code>，理论上这个时候使用<code>git status</code>查看状态，工作区应该是没有文件要提交的，下面来看一下</p>\n<blockquote>\n<p>   $ git status<br>   On branch master<br>   Changes not staged for commit:<br>     (use “git add <file>…” to update what will be committed)<br>     (use “git checkout – <file>…” to discard changes in working directory)</file></file></p>\n<pre><code>modified:   index.txt\n</code></pre><p>   no changes added to commit (use “git add” and/or “git commit -a”</p>\n</blockquote>\n<p>咦，怎么和预期的不一样呢？</p>\n<p>因为之前我们已经了解过git有暂存区的概念，<code>add</code>命令只是把修改放到暂存区，而<code>commit</code>命令只把暂存区的内容提交到分支上。回想一下之前的操作，我们只在第一次修改的时候，执行的<code>git add</code>命令，因此，也只是把第一次的修改提交到了暂存区，那么<code>git commit</code> 命令只提交了第一次修改后放到暂存区的内容，因此第二次修改的内容，依然没有被提交。</p>\n<p>总结：修改–》<code>git add</code>—》修改—<code>git add</code>—》。。。。–》<code>git commit</code></p>\n<p>使用<code>git diff HEAD -- index.txt</code>命令可以查看工作区和版本库里面最新版本的区别</p>\n<blockquote>\n<p>   $ git diff HEAD – index.txt<br>   diff –git a/index.txt b/index.txt<br>   index 715646a..d2ff8dd 100644<br>   — a/index.txt<br>   +++ b/index.txt<br>   @@ -1 +1,2 @@<br>   -one line<br>   \\ No newline at end of file<br>   +one line<br>   +two line<br>   \\ No newline at end of file</p>\n</blockquote>\n<h2 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h2><p>修改后的状态分为三种：1.修改后，并提交到缓存区  2.修改后并没有提交到缓存区  3.修改后已经commit了。</p>\n<h3 id=\"撤销工作区的修改\"><a href=\"#撤销工作区的修改\" class=\"headerlink\" title=\"撤销工作区的修改\"></a>撤销工作区的修改</h3><p>我们修改一下index.txt文件，添加一行 <strong>20181123</strong>，使用git status命令看一下状态</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use \"git add &lt;file&gt;...\" to update what will be committed)</span><br><span class=\"line\">  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   index.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use \"git add\" and/or \"git commit -a\")</span><br></pre></td></tr></table></figure>\n<p>上面给出了提示，该文件被修改，但是还没有提交，可以使用git add <code>&lt;file&gt;</code>命令提交修改。也可以使用</p>\n<p>git checkout – <code>&lt;file&gt;</code>命令撤销修改。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git checkout -- index.txt</span><br><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>\n<p>可以看到修改被撤回了，文件也被修改了。</p>\n<p>git checkout – index.txt 命令 这里的<code>--</code>一定要加上，否则就成了切换分支了。</p>\n<h3 id=\"撤回暂存区的修改\"><a href=\"#撤回暂存区的修改\" class=\"headerlink\" title=\"撤回暂存区的修改\"></a>撤回暂存区的修改</h3><p>如果修改已经被提交到暂存区了怎么办呢？，修改文件，敲命令看看情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use \"git add &lt;file&gt;...\" to update what will be committed)</span><br><span class=\"line\">  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   index.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use \"git add\" and/or \"git commit -a\")</span><br><span class=\"line\">========================</span><br><span class=\"line\"><span class=\"meta\">$</span> git add index.txt</span><br><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use \"git reset HEAD &lt;file&gt;...\" to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   index.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span> git checkout -- index.txt</span><br><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\">  (use \"git reset HEAD &lt;file&gt;...\" to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   index.txt</span><br></pre></td></tr></table></figure>\n<p>从上面的情况可以看出，git checkout – index.txt 命令不能撤销暂存区的修改。因此要用命令<code>git reset HEAD &lt;file&gt;</code>可以把暂存区的修改撤销掉（unstage），重新放回工作区</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git reset HEAD index.txt</span><br><span class=\"line\">Unstaged changes after reset:</span><br><span class=\"line\">M       index.txt</span><br><span class=\"line\">=============把修改重新放到了工作区，git status一下看看效果============================</span><br><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use \"git add &lt;file&gt;...\" to update what will be committed)</span><br><span class=\"line\">  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        modified:   index.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use \"git add\" and/or \"git commit -a\")</span><br><span class=\"line\">==========果然回来了，那么下一步是不是就知道怎么做了，对，使用checkout命令</span><br><span class=\"line\"><span class=\"meta\">$</span> git checkout -- index.txt</span><br><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>\n<p>是不是又修改回来了。</p>\n<h3 id=\"撤销版本库的修改\"><a href=\"#撤销版本库的修改\" class=\"headerlink\" title=\"撤销版本库的修改\"></a>撤销版本库的修改</h3><p>如果内容已经提交到版本库，那么上面的两种方式都不好用了，但是不要忘记我们之间学过的git reset 命令。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git reset --hard HEAD^</span><br><span class=\"line\">HEAD is now at 4b05e65 暂时结束学习</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Changes not staged for commit:</span><br><span class=\"line\">  (use \"git add/rm &lt;file&gt;...\" to update what will be committed)</span><br><span class=\"line\">  (use \"git checkout -- &lt;file&gt;...\" to discard changes in working directory)</span><br><span class=\"line\"></span><br><span class=\"line\">        deleted:    a.txt</span><br><span class=\"line\"></span><br><span class=\"line\">no changes added to commit (use \"git add\" and/or \"git commit -a\")</span><br><span class=\"line\"><span class=\"meta\">$</span> git rm a.txt</span><br><span class=\"line\">rm 'a.txt'</span><br><span class=\"line\"><span class=\"meta\">$</span> git commit -m \"delete a.txt\"</span><br><span class=\"line\">[master 4e5967d] delete a.txt</span><br><span class=\"line\"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class=\"line\"> delete mode 100644 a.txt</span><br><span class=\"line\"><span class=\"meta\">$</span> git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>\n<p>上面的命令可以看出，当工作区把文件物理删除后，使用git status查看状态，会有提示，有文件删除了。</p>\n<p>这个时候，可以使用git rm a.txt命令把文件从版本库中删除，并使用git commit -m 命令提交修改。</p>\n<p>如果删除错误的话，可以使用git checkout –a.txt 把文件拉回来，因为之前我们已经提交到版本库中。</p>"},{"title":"Hello World","date":"2016-11-19T03:14:28.000Z","_content":"使用 [Hexo](https://hexo.io/) 来搭建自己的个人静态博客:\n\n1. Markdown 写博客\n2. Hexo 生成 HTML\n3. Hexo 发布 HTML 到 Github Pages\n\n> 既然是静态博客，那么就没有后台了，留言功能可以使用第三方的服务，例如畅言。\n\n\n\n## Install Node\n\nHexo 需要 Node\n\n- Mac 安装 Node，可以使用 Homebrew 安装: `brew install node`\n- Windows 安装 Node，进入 https://nodejs.org/en/ 下载安装\n\n> Node 就是 Node.js\n\n### 使用 Node 的淘宝镜像\n\n由于网络的问题，访问 Node 的默认仓库有可能会很慢，很多东西都下载不下来，可以使用淘宝的 Node 的镜像，命令行里执行\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n即可，具体可参考 [http://npm.taobao.org](http://npm.taobao.org/)\n\n## Install Github Client\n\nHexo 和 Github 一起使用就可以搭建一个免费的博客网站\n\n- 如果没有安装 Git，需要安装一下\n- 到 [https://desktop.github.com](https://desktop.github.com/) 下载 Github 客户端\n\n## Install Hexo and initialize Pages\n\n```\n$ npm install hexo-cli -g\n$ hexo init Blog\n$ cd Blog\n$ npm install\n$ hexo server\n```\n\n## Quick Start\n\n<!--more-->\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ndate: 2016-11-19 11:14:28\ntags: hexo\n---\n使用 [Hexo](https://hexo.io/) 来搭建自己的个人静态博客:\n\n1. Markdown 写博客\n2. Hexo 生成 HTML\n3. Hexo 发布 HTML 到 Github Pages\n\n> 既然是静态博客，那么就没有后台了，留言功能可以使用第三方的服务，例如畅言。\n\n\n\n## Install Node\n\nHexo 需要 Node\n\n- Mac 安装 Node，可以使用 Homebrew 安装: `brew install node`\n- Windows 安装 Node，进入 https://nodejs.org/en/ 下载安装\n\n> Node 就是 Node.js\n\n### 使用 Node 的淘宝镜像\n\n由于网络的问题，访问 Node 的默认仓库有可能会很慢，很多东西都下载不下来，可以使用淘宝的 Node 的镜像，命令行里执行\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n即可，具体可参考 [http://npm.taobao.org](http://npm.taobao.org/)\n\n## Install Github Client\n\nHexo 和 Github 一起使用就可以搭建一个免费的博客网站\n\n- 如果没有安装 Git，需要安装一下\n- 到 [https://desktop.github.com](https://desktop.github.com/) 下载 Github 客户端\n\n## Install Hexo and initialize Pages\n\n```\n$ npm install hexo-cli -g\n$ hexo init Blog\n$ cd Blog\n$ npm install\n$ hexo server\n```\n\n## Quick Start\n\n<!--more-->\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"updated":"2022-11-24T13:38:45.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1ea000d4ovk9jwk5rpe","content":"<p>使用 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a> 来搭建自己的个人静态博客:</p>\n<ol>\n<li>Markdown 写博客</li>\n<li>Hexo 生成 HTML</li>\n<li>Hexo 发布 HTML 到 Github Pages</li>\n</ol>\n<blockquote>\n<p>既然是静态博客，那么就没有后台了，留言功能可以使用第三方的服务，例如畅言。</p>\n</blockquote>\n<h2 id=\"Install-Node\"><a href=\"#Install-Node\" class=\"headerlink\" title=\"Install Node\"></a>Install Node</h2><p>Hexo 需要 Node</p>\n<ul>\n<li>Mac 安装 Node，可以使用 Homebrew 安装: <code>brew install node</code></li>\n<li>Windows 安装 Node，进入 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a> 下载安装</li>\n</ul>\n<blockquote>\n<p>Node 就是 Node.js</p>\n</blockquote>\n<h3 id=\"使用-Node-的淘宝镜像\"><a href=\"#使用-Node-的淘宝镜像\" class=\"headerlink\" title=\"使用 Node 的淘宝镜像\"></a>使用 Node 的淘宝镜像</h3><p>由于网络的问题，访问 Node 的默认仓库有可能会很慢，很多东西都下载不下来，可以使用淘宝的 Node 的镜像，命令行里执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>即可，具体可参考 <a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">http://npm.taobao.org</a></p>\n<h2 id=\"Install-Github-Client\"><a href=\"#Install-Github-Client\" class=\"headerlink\" title=\"Install Github Client\"></a>Install Github Client</h2><p>Hexo 和 Github 一起使用就可以搭建一个免费的博客网站</p>\n<ul>\n<li>如果没有安装 Git，需要安装一下</li>\n<li>到 <a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"noopener\">https://desktop.github.com</a> 下载 Github 客户端</li>\n</ul>\n<h2 id=\"Install-Hexo-and-initialize-Pages\"><a href=\"#Install-Hexo-and-initialize-Pages\" class=\"headerlink\" title=\"Install Hexo and initialize Pages\"></a>Install Hexo and initialize Pages</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init Blog</span><br><span class=\"line\">$ cd Blog</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><a id=\"more\"></a>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>使用 <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a> 来搭建自己的个人静态博客:</p>\n<ol>\n<li>Markdown 写博客</li>\n<li>Hexo 生成 HTML</li>\n<li>Hexo 发布 HTML 到 Github Pages</li>\n</ol>\n<blockquote>\n<p>既然是静态博客，那么就没有后台了，留言功能可以使用第三方的服务，例如畅言。</p>\n</blockquote>\n<h2 id=\"Install-Node\"><a href=\"#Install-Node\" class=\"headerlink\" title=\"Install Node\"></a>Install Node</h2><p>Hexo 需要 Node</p>\n<ul>\n<li>Mac 安装 Node，可以使用 Homebrew 安装: <code>brew install node</code></li>\n<li>Windows 安装 Node，进入 <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/en/</a> 下载安装</li>\n</ul>\n<blockquote>\n<p>Node 就是 Node.js</p>\n</blockquote>\n<h3 id=\"使用-Node-的淘宝镜像\"><a href=\"#使用-Node-的淘宝镜像\" class=\"headerlink\" title=\"使用 Node 的淘宝镜像\"></a>使用 Node 的淘宝镜像</h3><p>由于网络的问题，访问 Node 的默认仓库有可能会很慢，很多东西都下载不下来，可以使用淘宝的 Node 的镜像，命令行里执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<p>即可，具体可参考 <a href=\"http://npm.taobao.org/\" target=\"_blank\" rel=\"noopener\">http://npm.taobao.org</a></p>\n<h2 id=\"Install-Github-Client\"><a href=\"#Install-Github-Client\" class=\"headerlink\" title=\"Install Github Client\"></a>Install Github Client</h2><p>Hexo 和 Github 一起使用就可以搭建一个免费的博客网站</p>\n<ul>\n<li>如果没有安装 Git，需要安装一下</li>\n<li>到 <a href=\"https://desktop.github.com/\" target=\"_blank\" rel=\"noopener\">https://desktop.github.com</a> 下载 Github 客户端</li>\n</ul>\n<h2 id=\"Install-Hexo-and-initialize-Pages\"><a href=\"#Install-Hexo-and-initialize-Pages\" class=\"headerlink\" title=\"Install Hexo and initialize Pages\"></a>Install Hexo and initialize Pages</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init Blog</span><br><span class=\"line\">$ cd Blog</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2>","more":"<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>"},{"title":"Git（三）","date":"2018-11-23T03:09:31.000Z","_content":"\n# 创建SSH Key\n\n前面已经学习了Git在本地的基础操作，之前也说过，Git是分布式版本管理系统，如果只是在本地操作，怎么能叫分布式呢。\n\n实际情况是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交\n\n有个叫[GitHub](https://github.com/)的神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。\n\n本地仓库和远程Git仓库是通过SSH传输的，因此要在github帐号配置本地公钥。\n\n<!-- more -->\n\n## 创建SSH Key\n\n1.   创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有`id_rsa`和`id_rsa.pub`这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\n     ```shell\n     $ ssh-keygen -t rsa -C \"youremail@example.com\"\n     ```\n\n2.   登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n\n     然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴`id_rsa.pub`文件的内容\n\n为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。\n\n当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。\n\n最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。\n\n## 创建远程仓库\n\n其实就是在Github上创建一个仓库\n\n1.   New repository 创建一个新仓库，填写仓库名称，点击 create new repository\n\n2.   创建成功后，页面会有提示\n\n     1.   >    echo \"# learngit\" >> README.md\n          >    git init\n          >    git add README.md\n          >    git commit -m \"first commit\"\n          >    git remote add origin git@github.com:gaofeng0527/learngit.git\n          >    git push -u origin master\n\n          …or create a new repository on the command line\n\n          上面的意思是，在本地创建一个仓库，并编写README.md文件，把该目录初始化Git本地仓库，然后通过`git remote add origin git@github.com:gaofeng0527/learngit.git`命令和远程创建的仓库关联。然后通过`git push -u origin master`命令，把本地的内容，推送到远程仓库上。\n\n     2.   >    git remote add origin git@github.com:gaofeng0527/learngit.git\n          >    git push -u origin master\n\n          …or push an existing repository from the command line\n\n          上面的意思是：本地已经有库了，直接用命令关联远程库，并推送内容。\n\n     总结：`gaofeng0527`这个是Github的帐号；learngit这个是新创建的仓库名称。`git remote add origin ....`命令是关联远程仓库。把本地库的内容推送到远程，用`git push`命令，实际上是把当前分支`master`推送到远程。\n\n     远程库的名字就是`origin`，这是Git默认的叫法，也可以改成别的，但是`origin`这个名字一看就知道是远程库。\n\n     由于远程库是空的，我们第一次推送`master`分支时，加上了`-u`参数，Git不但会把本地的`master`分支内容推送的远程新的`master`分支，还会把本地的`master`分支和远程的`master`分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n现在在看，远程仓库的内容，就和本地的内容一样了。\n\n## 修改本地内容，提交远程练习\n\n1.   修改本地README.md文件内容\n2.   使用`git add readme.md`添加到暂存区，然后使用`git commit -m \"update readme.md\"`，提交修改到本地仓库\n3.   使用`git push origin master`，把本地仓库的修改推送到远程仓库中。\n4.   查看远程仓库，文件已经被修改。\n\n## 克隆远程仓库\n\n由于某些原因，你本地的仓库被删除了，或者你换电脑了，那么就可以从远程仓库克隆一份\n\n```shell\n$ git status\nfatal: Not a git repository (or any of the parent directories): .git\n```\n\n提示，这个目录不是git仓库了。\n\n```shell\n$ git clone git@github.com:gaofeng0527/learngit.git\nCloning into 'learngit'...\nremote: Enumerating objects: 34, done.\nremote: Counting objects: 100% (34/34), done.\nremote: Compressing objects: 100% (24/24), done.\nremote: Total 34 (delta 3), reused 34 (delta 3), pack-reused 0\nReceiving objects: 100% (34/34), 7.08 KiB | 0 bytes/s, done.\nResolving deltas: 100% (3/3), done.\nChecking connectivity... done.\n```\n\n`git clone git@github.com:gaofeng0527/learngit.git`命令可以帮忙克隆，后面的地址，可以在远程仓库获得。\n\n`git clone -b dev git@github.com:gaofeng0527/learngit.git`命令获取指定分支克隆\n\n以上命令，会以远程仓库的名字创建相同的目录名在本地。如果需要指定目录名字，可以在clone命令第二个参数位置添加目录名。例如\n\n`git clone git@.... newDir`\n\n```shell\n$ ls\nindex.txt  readme.md\n```\n\n哈哈哈，我们的文件又回来了。\n\n你也许还注意到，GitHub给出的地址不止一个，实际上，Git支持多种协议，默认的`git://`使用ssh，但也可以使用`https`等其他协议。\n\n使用`https`除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用`ssh`协议而只能用`https`。\n\n","source":"_posts/git-chapter-three.md","raw":"---\ntitle: Git（三）\ndate: 2018-11-23 11:09:31\ntags: [Git]\n---\n\n# 创建SSH Key\n\n前面已经学习了Git在本地的基础操作，之前也说过，Git是分布式版本管理系统，如果只是在本地操作，怎么能叫分布式呢。\n\n实际情况是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交\n\n有个叫[GitHub](https://github.com/)的神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。\n\n本地仓库和远程Git仓库是通过SSH传输的，因此要在github帐号配置本地公钥。\n\n<!-- more -->\n\n## 创建SSH Key\n\n1.   创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有`id_rsa`和`id_rsa.pub`这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：\n\n     ```shell\n     $ ssh-keygen -t rsa -C \"youremail@example.com\"\n     ```\n\n2.   登陆GitHub，打开“Account settings”，“SSH Keys”页面：\n\n     然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴`id_rsa.pub`文件的内容\n\n为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。\n\n当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。\n\n最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。\n\n## 创建远程仓库\n\n其实就是在Github上创建一个仓库\n\n1.   New repository 创建一个新仓库，填写仓库名称，点击 create new repository\n\n2.   创建成功后，页面会有提示\n\n     1.   >    echo \"# learngit\" >> README.md\n          >    git init\n          >    git add README.md\n          >    git commit -m \"first commit\"\n          >    git remote add origin git@github.com:gaofeng0527/learngit.git\n          >    git push -u origin master\n\n          …or create a new repository on the command line\n\n          上面的意思是，在本地创建一个仓库，并编写README.md文件，把该目录初始化Git本地仓库，然后通过`git remote add origin git@github.com:gaofeng0527/learngit.git`命令和远程创建的仓库关联。然后通过`git push -u origin master`命令，把本地的内容，推送到远程仓库上。\n\n     2.   >    git remote add origin git@github.com:gaofeng0527/learngit.git\n          >    git push -u origin master\n\n          …or push an existing repository from the command line\n\n          上面的意思是：本地已经有库了，直接用命令关联远程库，并推送内容。\n\n     总结：`gaofeng0527`这个是Github的帐号；learngit这个是新创建的仓库名称。`git remote add origin ....`命令是关联远程仓库。把本地库的内容推送到远程，用`git push`命令，实际上是把当前分支`master`推送到远程。\n\n     远程库的名字就是`origin`，这是Git默认的叫法，也可以改成别的，但是`origin`这个名字一看就知道是远程库。\n\n     由于远程库是空的，我们第一次推送`master`分支时，加上了`-u`参数，Git不但会把本地的`master`分支内容推送的远程新的`master`分支，还会把本地的`master`分支和远程的`master`分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n现在在看，远程仓库的内容，就和本地的内容一样了。\n\n## 修改本地内容，提交远程练习\n\n1.   修改本地README.md文件内容\n2.   使用`git add readme.md`添加到暂存区，然后使用`git commit -m \"update readme.md\"`，提交修改到本地仓库\n3.   使用`git push origin master`，把本地仓库的修改推送到远程仓库中。\n4.   查看远程仓库，文件已经被修改。\n\n## 克隆远程仓库\n\n由于某些原因，你本地的仓库被删除了，或者你换电脑了，那么就可以从远程仓库克隆一份\n\n```shell\n$ git status\nfatal: Not a git repository (or any of the parent directories): .git\n```\n\n提示，这个目录不是git仓库了。\n\n```shell\n$ git clone git@github.com:gaofeng0527/learngit.git\nCloning into 'learngit'...\nremote: Enumerating objects: 34, done.\nremote: Counting objects: 100% (34/34), done.\nremote: Compressing objects: 100% (24/24), done.\nremote: Total 34 (delta 3), reused 34 (delta 3), pack-reused 0\nReceiving objects: 100% (34/34), 7.08 KiB | 0 bytes/s, done.\nResolving deltas: 100% (3/3), done.\nChecking connectivity... done.\n```\n\n`git clone git@github.com:gaofeng0527/learngit.git`命令可以帮忙克隆，后面的地址，可以在远程仓库获得。\n\n`git clone -b dev git@github.com:gaofeng0527/learngit.git`命令获取指定分支克隆\n\n以上命令，会以远程仓库的名字创建相同的目录名在本地。如果需要指定目录名字，可以在clone命令第二个参数位置添加目录名。例如\n\n`git clone git@.... newDir`\n\n```shell\n$ ls\nindex.txt  readme.md\n```\n\n哈哈哈，我们的文件又回来了。\n\n你也许还注意到，GitHub给出的地址不止一个，实际上，Git支持多种协议，默认的`git://`使用ssh，但也可以使用`https`等其他协议。\n\n使用`https`除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用`ssh`协议而只能用`https`。\n\n","slug":"git-chapter-three","published":1,"updated":"2022-11-24T13:38:45.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1ec000g4ovk8ztkkyvu","content":"<h1 id=\"创建SSH-Key\"><a href=\"#创建SSH-Key\" class=\"headerlink\" title=\"创建SSH Key\"></a>创建SSH Key</h1><p>前面已经学习了Git在本地的基础操作，之前也说过，Git是分布式版本管理系统，如果只是在本地操作，怎么能叫分布式呢。</p>\n<p>实际情况是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交</p>\n<p>有个叫<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>的神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。</p>\n<p>本地仓库和远程Git仓库是通过SSH传输的，因此要在github帐号配置本地公钥。</p>\n<a id=\"more\"></a>\n<h2 id=\"创建SSH-Key-1\"><a href=\"#创建SSH-Key-1\" class=\"headerlink\" title=\"创建SSH Key\"></a>创建SSH Key</h2><ol>\n<li><p>创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-keygen -t rsa -C <span class=\"string\">\"youremail@example.com\"</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p>\n<p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容</p>\n</li>\n</ol>\n<p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>\n<p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p>\n<p>最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p>\n<h2 id=\"创建远程仓库\"><a href=\"#创建远程仓库\" class=\"headerlink\" title=\"创建远程仓库\"></a>创建远程仓库</h2><p>其实就是在Github上创建一个仓库</p>\n<ol>\n<li><p>New repository 创建一个新仓库，填写仓库名称，点击 create new repository</p>\n</li>\n<li><p>创建成功后，页面会有提示</p>\n<ol>\n<li><blockquote>\n<p>   echo “# learngit” &gt;&gt; README.md<br>   git init<br>   git add README.md<br>   git commit -m “first commit”<br>   git remote add origin <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:gaofeng0527/learngit.git<br>   git push -u origin master</p>\n</blockquote>\n<p>…or create a new repository on the command line</p>\n<p>上面的意思是，在本地创建一个仓库，并编写README.md文件，把该目录初始化Git本地仓库，然后通过<code>git remote add origin git@github.com:gaofeng0527/learngit.git</code>命令和远程创建的仓库关联。然后通过<code>git push -u origin master</code>命令，把本地的内容，推送到远程仓库上。</p>\n</li>\n<li><blockquote>\n<p>   git remote add origin <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:gaofeng0527/learngit.git<br>   git push -u origin master</p>\n</blockquote>\n<p>…or push an existing repository from the command line</p>\n<p>上面的意思是：本地已经有库了，直接用命令关联远程库，并推送内容。</p>\n</li>\n</ol>\n<p>总结：<code>gaofeng0527</code>这个是Github的帐号；learngit这个是新创建的仓库名称。<code>git remote add origin ....</code>命令是关联远程仓库。把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>\n<p>远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p>\n<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n</li>\n</ol>\n<p>现在在看，远程仓库的内容，就和本地的内容一样了。</p>\n<h2 id=\"修改本地内容，提交远程练习\"><a href=\"#修改本地内容，提交远程练习\" class=\"headerlink\" title=\"修改本地内容，提交远程练习\"></a>修改本地内容，提交远程练习</h2><ol>\n<li>修改本地README.md文件内容</li>\n<li>使用<code>git add readme.md</code>添加到暂存区，然后使用<code>git commit -m &quot;update readme.md&quot;</code>，提交修改到本地仓库</li>\n<li>使用<code>git push origin master</code>，把本地仓库的修改推送到远程仓库中。</li>\n<li>查看远程仓库，文件已经被修改。</li>\n</ol>\n<h2 id=\"克隆远程仓库\"><a href=\"#克隆远程仓库\" class=\"headerlink\" title=\"克隆远程仓库\"></a>克隆远程仓库</h2><p>由于某些原因，你本地的仓库被删除了，或者你换电脑了，那么就可以从远程仓库克隆一份</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\">fatal: Not a git repository (or any of the parent directories): .git</span><br></pre></td></tr></table></figure>\n<p>提示，这个目录不是git仓库了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> git@github.com:gaofeng0527/learngit.git</span></span><br><span class=\"line\">Cloning into 'learngit'...</span><br><span class=\"line\">remote: Enumerating objects: 34, done.</span><br><span class=\"line\">remote: Counting objects: 100% (34/34), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (24/24), done.</span><br><span class=\"line\">remote: Total 34 (delta 3), reused 34 (delta 3), pack-reused 0</span><br><span class=\"line\">Receiving objects: 100% (34/34), 7.08 KiB | 0 bytes/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (3/3), done.</span><br><span class=\"line\">Checking connectivity... done.</span><br></pre></td></tr></table></figure>\n<p><code>git clone git@github.com:gaofeng0527/learngit.git</code>命令可以帮忙克隆，后面的地址，可以在远程仓库获得。</p>\n<p><code>git clone -b dev git@github.com:gaofeng0527/learngit.git</code>命令获取指定分支克隆</p>\n<p>以上命令，会以远程仓库的名字创建相同的目录名在本地。如果需要指定目录名字，可以在clone命令第二个参数位置添加目录名。例如</p>\n<p><code>git clone git@.... newDir</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls</span></span><br><span class=\"line\">index.txt  readme.md</span><br></pre></td></tr></table></figure>\n<p>哈哈哈，我们的文件又回来了。</p>\n<p>你也许还注意到，GitHub给出的地址不止一个，实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p>\n<p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"创建SSH-Key\"><a href=\"#创建SSH-Key\" class=\"headerlink\" title=\"创建SSH Key\"></a>创建SSH Key</h1><p>前面已经学习了Git在本地的基础操作，之前也说过，Git是分布式版本管理系统，如果只是在本地操作，怎么能叫分布式呢。</p>\n<p>实际情况是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交</p>\n<p>有个叫<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">GitHub</a>的神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。</p>\n<p>本地仓库和远程Git仓库是通过SSH传输的，因此要在github帐号配置本地公钥。</p>","more":"<h2 id=\"创建SSH-Key-1\"><a href=\"#创建SSH-Key-1\" class=\"headerlink\" title=\"创建SSH Key\"></a>创建SSH Key</h2><ol>\n<li><p>创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有<code>id_rsa</code>和<code>id_rsa.pub</code>这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ssh-keygen -t rsa -C <span class=\"string\">\"youremail@example.com\"</span></span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>登陆GitHub，打开“Account settings”，“SSH Keys”页面：</p>\n<p>然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴<code>id_rsa.pub</code>文件的内容</p>\n</li>\n</ol>\n<p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>\n<p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p>\n<p>最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</p>\n<h2 id=\"创建远程仓库\"><a href=\"#创建远程仓库\" class=\"headerlink\" title=\"创建远程仓库\"></a>创建远程仓库</h2><p>其实就是在Github上创建一个仓库</p>\n<ol>\n<li><p>New repository 创建一个新仓库，填写仓库名称，点击 create new repository</p>\n</li>\n<li><p>创建成功后，页面会有提示</p>\n<ol>\n<li><blockquote>\n<p>   echo “# learngit” &gt;&gt; README.md<br>   git init<br>   git add README.md<br>   git commit -m “first commit”<br>   git remote add origin <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:gaofeng0527/learngit.git<br>   git push -u origin master</p>\n</blockquote>\n<p>…or create a new repository on the command line</p>\n<p>上面的意思是，在本地创建一个仓库，并编写README.md文件，把该目录初始化Git本地仓库，然后通过<code>git remote add origin git@github.com:gaofeng0527/learngit.git</code>命令和远程创建的仓库关联。然后通过<code>git push -u origin master</code>命令，把本地的内容，推送到远程仓库上。</p>\n</li>\n<li><blockquote>\n<p>   git remote add origin <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:gaofeng0527/learngit.git<br>   git push -u origin master</p>\n</blockquote>\n<p>…or push an existing repository from the command line</p>\n<p>上面的意思是：本地已经有库了，直接用命令关联远程库，并推送内容。</p>\n</li>\n</ol>\n<p>总结：<code>gaofeng0527</code>这个是Github的帐号；learngit这个是新创建的仓库名称。<code>git remote add origin ....</code>命令是关联远程仓库。把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>\n<p>远程库的名字就是<code>origin</code>，这是Git默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p>\n<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n</li>\n</ol>\n<p>现在在看，远程仓库的内容，就和本地的内容一样了。</p>\n<h2 id=\"修改本地内容，提交远程练习\"><a href=\"#修改本地内容，提交远程练习\" class=\"headerlink\" title=\"修改本地内容，提交远程练习\"></a>修改本地内容，提交远程练习</h2><ol>\n<li>修改本地README.md文件内容</li>\n<li>使用<code>git add readme.md</code>添加到暂存区，然后使用<code>git commit -m &quot;update readme.md&quot;</code>，提交修改到本地仓库</li>\n<li>使用<code>git push origin master</code>，把本地仓库的修改推送到远程仓库中。</li>\n<li>查看远程仓库，文件已经被修改。</li>\n</ol>\n<h2 id=\"克隆远程仓库\"><a href=\"#克隆远程仓库\" class=\"headerlink\" title=\"克隆远程仓库\"></a>克隆远程仓库</h2><p>由于某些原因，你本地的仓库被删除了，或者你换电脑了，那么就可以从远程仓库克隆一份</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git status</span></span><br><span class=\"line\">fatal: Not a git repository (or any of the parent directories): .git</span><br></pre></td></tr></table></figure>\n<p>提示，这个目录不是git仓库了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> git@github.com:gaofeng0527/learngit.git</span></span><br><span class=\"line\">Cloning into 'learngit'...</span><br><span class=\"line\">remote: Enumerating objects: 34, done.</span><br><span class=\"line\">remote: Counting objects: 100% (34/34), done.</span><br><span class=\"line\">remote: Compressing objects: 100% (24/24), done.</span><br><span class=\"line\">remote: Total 34 (delta 3), reused 34 (delta 3), pack-reused 0</span><br><span class=\"line\">Receiving objects: 100% (34/34), 7.08 KiB | 0 bytes/s, done.</span><br><span class=\"line\">Resolving deltas: 100% (3/3), done.</span><br><span class=\"line\">Checking connectivity... done.</span><br></pre></td></tr></table></figure>\n<p><code>git clone git@github.com:gaofeng0527/learngit.git</code>命令可以帮忙克隆，后面的地址，可以在远程仓库获得。</p>\n<p><code>git clone -b dev git@github.com:gaofeng0527/learngit.git</code>命令获取指定分支克隆</p>\n<p>以上命令，会以远程仓库的名字创建相同的目录名在本地。如果需要指定目录名字，可以在clone命令第二个参数位置添加目录名。例如</p>\n<p><code>git clone git@.... newDir</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> ls</span></span><br><span class=\"line\">index.txt  readme.md</span><br></pre></td></tr></table></figure>\n<p>哈哈哈，我们的文件又回来了。</p>\n<p>你也许还注意到，GitHub给出的地址不止一个，实际上，Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。</p>\n<p>使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>。</p>"},{"title":"日常积累","date":"2019-02-15T03:52:32.000Z","_content":"\n# 比较Long类型 20190215\n\n平时比较数字类型时习惯直接用`==`来比较，有一次发现两个Long类型的数字直接用`==`比较没有达到预期效果，仔细一想Long类型是long的封装类型，`==`比较是比较的引用地址，因此值是一样的，却返回false。\n\n```java\nLong l1 = new Long(10);\nLong l2 = new Long(10);\nSystem.out.println(l1 == l2);//false\nSystem.out.println(l1.longValue() == l2.longValue());//true\n```\n\n上面代码也可以看出：long类型是java中的基本数据类型，可以用`==`直接比较\n\n<!-- more -->\n\n# cookie的读取 20190215\n\n之前没有添加这一句`cookie.setPath(\"/\");`导致在读取cookie的时候失败，是因为cookie默认的作用域是在同一路径下。`/write/cookie` 和 `/read/cookie` 不属于同一路径。\n\n```java\n@RequestMapping(\"/write/cookie\")\n    @ResponseBody\n    public String writeCookie(HttpServletResponse response) {\n        Cookie cookie = new Cookie(\"username\", \"Don't tell me\");\n        cookie.setMaxAge(10000);\n        cookie.setPath(\"/\");\n        response.addCookie(cookie);\n        return \"write cookie username\";\n    }\n```\n\n```java\n/**\n     * 在添加：cookie.setPath(\"/\");这一行代码之前，读取不到cookie，因为cookie默认的作用域是在同一路径下有效\n     * 添加这一行代码后，是在同一域名下有效\n     * @param cookie\n     * @return\n     */\n    @RequestMapping(\"/read/cookie\")\n    @ResponseBody\n    public String readCookie(@CookieValue(value = \"username\",defaultValue = \"\") String cookie) {\n        return \"cookie:username ==> \"+cookie;\n    }\n```\n\n# GitHub保存笔记源文件20190215\n\n1.   在`hexo`下创建笔记 \n\n     >    hexo new \"fileName\"\n     >\n     >    hexo generate\n     >\n     >    hexo deploy \n\n2.   在Blog目录下执行git命令把修改添加到Git仓库中\n\n     >    git add <file>\n     >\n     >    git commit -m \"message\"\n     >\n     >    git push -u origin master\n\n这样，换到任何环境，都不会丢失自己之前写过的笔记了（除非github不再免费存储了）\n\n# idea 本地Debugger 20190221\n\n1.   在idea操作页面 Run-->Edit-configurations-->点击左上角的+号--->在弹出的页面中选中Remote（开启远程监听）\n2.   Name 输入一个名称；setting都默认就好；Host 输入要测试的服务器ID，本地的话默认就好；Port 测试监听的端口，本地默认；Search sources using module's classpath 选中要测试的代码路径；jvm默认：-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005\n3.   启动测试的服务\n4.   启动远程监听\n5.   在需要调试的地方加上断点，即可进行断点调试了 \n\n# JAVA 解析XML\n\n参考[XML解析——Java中XML的四种解析方式](https://www.cnblogs.com/longqingyang/p/5577937.html)\n\n# JAVA 解析 HTML\n\n导入需要的jar\n\n``` gradle\ncompile('org.jsoup:jsoup:1.11.3')\n```\n\n```java\n/**\n     * 根据HTMl解析题目的内容\n     *\n     * @param content\n     * @return\n     */\n    private Map<String, Object> getQuestionByHtml(String content) {\n        org.jsoup.nodes.Document dom = Jsoup.parse(content);\n\n        //获取最外层信息（题目ID，知识点编码）根据样式属性获取\n        Elements elements = dom.select(\"div.popup-questions\");\n        String knowID = \"\";\n        String questionID = \"\";\n        if (null != elements && elements.size() > 0) {\n            Element element = elements.get(0);\n            knowID = element.attr(\"knowid\");//获取属性的值\n            questionID = element.attr(\"id\");\n        }\n\n        //获取题目配置信息\n        Elements qelements = dom.select(\"div.question\");\n        String code = \"\";\n        String type = \"\";\n        String answer = \"\";\n        String score = \"\";\n        if (null != qelements && qelements.size() > 0) {\n            Element qelement = qelements.get(0);\n            code = qelement.attr(\"code\");\n            type = qelement.attr(\"type\");\n            answer = qelement.attr(\"answer\");\n            score = qelement.attr(\"score\");\n        }\n\n        //获取题干\n        Elements titles = dom.select(\"p.label\");\n        String title = \"\";\n        if (null != titles && titles.size() > 0) {\n            title = titles.get(0).html();\n        }\n\n        //答案解析\n        String analysis = \"\";\n        Elements eanalysis = dom.select(\"p.label\");\n        if (null != eanalysis && eanalysis.size() > 0) {\n            analysis = eanalysis.get(0).html();\n        }\n\n        //解析选项\n        Elements options = dom.getElementsByTag(\"li\");\n        Map<String, String> optionMap = new HashMap<>();\n        for (Element option : options) {\n            optionMap.put(option.attr(\"code\"), option.html());\n        }\n        //组装\n        Map<String, Object> result = new HashMap<>();\n        Map<String, Object> question = new HashMap<>();\n        question.put(\"id\", questionID);\n        question.put(\"code\", code);\n        question.put(\"type\", type);\n        question.put(\"answer\", answer);\n        question.put(\"score\", score);\n        question.put(\"title\", title);\n        question.put(\"knowid\", knowID);\n        question.put(\"options\", optionMap);\n        question.put(\"analysis\", analysis);\n        result.put(knowID, question);\n        return result;\n    }\n```\n\n# JAVA处理HTML时，去掉标签内部的属性20190315\n\n```java\n\tprivate static final String regEx_tag = \"<(\\\\w[^>|\\\\s]*)[\\\\s\\\\S]*?>\";\n\n    public static String removeEleProp(String htmlStr) {\n        Pattern p = Pattern.compile(regEx_tag, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(htmlStr);\n        StringBuffer sb = new StringBuffer();\n        while (m.find()) {\n            String tagWithProp= m.group(0);\n            String tag =m.group(1);\n            if (\"img\".equals(tag)) {\n                //img标签保留属性，可进一步处理删除无用属性，仅保留src等必要属性\n                m.appendReplacement(sb, tagWithProp);\n            }else if (\"a\".equals(tag)) {\n                //a标签保留属性，可进一步处理删除无用属性，仅保留href等必要属性\n                m.appendReplacement(sb, tagWithProp);\n            }else{\n                m.appendReplacement(sb, \"<\" + tag + \">\");\n            }\n        }\n        m.appendTail(sb);\n        return sb.toString();\n    }\n```\n\n# eclipse+tomcat远程调试20190319\n\ntomcat 默认提供8000为测试端口\n\n使用命令：./catalina.sh jpda start   启动服务\n\n在eclipse中创建远程监听，就可以进行远程断点调试了。\n\n# List遍历过程中操作List中的元素20190627\n\n如下代码：\n\n```java\nList<String> names = new ArrayList<>();\nnames.add(\"张三\");\nnames.add(\"李四\");\nnames.add(\"王五\");\nnames.add(\"张二麻子\");\n/**\n* 1.抛出java.util.ConcurrentModificationException\n* 是因为在移除list中的元素时，list的长度也跟着变化，因此继续访问的话，就会数组越界了\n*\n*/\nfor (String name : names) {\n\tif(\"李四\".equals(name)){\n    \tnames.remove(name);\n    }\n}\n```\n\n正确做法：\n\n```java\n\t\tIterator<String> is = names.iterator();\n        while (is.hasNext()){\n            if(\"李四\".equals(is.next())){\n                is.remove();\n            }\n        }\n```\n\n另外`ListIterator`对象提供了`hasPrevious()`方法可以判断前面是否还有元素。因此用这个迭代器可以逆向遍历集合。\n\n# List快速去重20190627\n\n大家都知道List是有序的可重复的单列列表集合。那么如何快速去重呢。想一想set的集合的特性，无序的不可重复的单项列表集合。\n\n>    集合的有序无序指的是，这里的有序和无序不是指集合中的排序，而是是否按照元素添加的顺序来存储对象。\n\n```java\n        List<String> list = new ArrayList<>();\n        list.add(\"a\");\n        list.add(\"e\");\n        list.add(\"c\");\n        list.add(\"d\");\n        list.add(\"c\");\n        list.add(\"a\");\n        Set<String> set = new TreeSet<>();\n        set.addAll(list);\n        System.out.println(set);//[a, c, d, e]\n```\n\n>    1.   `ArrayList`集合查询元素效率较高\n>    2.   `LinkedList`因为是连表形式的数据结构，因此添加，修改，删除效率比较高。\n>    3.   `ArrayList`、`LinkedList`都是非线程安全的；`Vector`线程安全的\n\n# Set判断是否重复的原理\n\n在`Set`集合掉用`add`存储元素的时候，会判断`hash`值和`equals`都相同的情况下，才算是重复元素。因此如果存储自定义引用类型的元素时，要确保不重复的话，需要重写`hashCode`和`equals`方法。\n\n`HashSet` 无序不可重复的集合。`LinkedHashSet`是`HashSet`的子类，区别是，`LinkedHashSet`是有序的\n\n# TreeSet\n\n`TreeSet`集合内部的值是自动排序的。如果自定义引用类型，想进行排序的话，需要实现`Comparble`接口并实现`comparTo`方法。\n\n`TreeSet`集合的元素必须实现`Comparble`接口\n\n`TreeSet`不允许存储`null`值\n\n不是线程安全的","source":"_posts/java-top.md","raw":"---\ntitle: 日常积累\ndate: 2019-02-15 11:52:32\ntags: java\n---\n\n# 比较Long类型 20190215\n\n平时比较数字类型时习惯直接用`==`来比较，有一次发现两个Long类型的数字直接用`==`比较没有达到预期效果，仔细一想Long类型是long的封装类型，`==`比较是比较的引用地址，因此值是一样的，却返回false。\n\n```java\nLong l1 = new Long(10);\nLong l2 = new Long(10);\nSystem.out.println(l1 == l2);//false\nSystem.out.println(l1.longValue() == l2.longValue());//true\n```\n\n上面代码也可以看出：long类型是java中的基本数据类型，可以用`==`直接比较\n\n<!-- more -->\n\n# cookie的读取 20190215\n\n之前没有添加这一句`cookie.setPath(\"/\");`导致在读取cookie的时候失败，是因为cookie默认的作用域是在同一路径下。`/write/cookie` 和 `/read/cookie` 不属于同一路径。\n\n```java\n@RequestMapping(\"/write/cookie\")\n    @ResponseBody\n    public String writeCookie(HttpServletResponse response) {\n        Cookie cookie = new Cookie(\"username\", \"Don't tell me\");\n        cookie.setMaxAge(10000);\n        cookie.setPath(\"/\");\n        response.addCookie(cookie);\n        return \"write cookie username\";\n    }\n```\n\n```java\n/**\n     * 在添加：cookie.setPath(\"/\");这一行代码之前，读取不到cookie，因为cookie默认的作用域是在同一路径下有效\n     * 添加这一行代码后，是在同一域名下有效\n     * @param cookie\n     * @return\n     */\n    @RequestMapping(\"/read/cookie\")\n    @ResponseBody\n    public String readCookie(@CookieValue(value = \"username\",defaultValue = \"\") String cookie) {\n        return \"cookie:username ==> \"+cookie;\n    }\n```\n\n# GitHub保存笔记源文件20190215\n\n1.   在`hexo`下创建笔记 \n\n     >    hexo new \"fileName\"\n     >\n     >    hexo generate\n     >\n     >    hexo deploy \n\n2.   在Blog目录下执行git命令把修改添加到Git仓库中\n\n     >    git add <file>\n     >\n     >    git commit -m \"message\"\n     >\n     >    git push -u origin master\n\n这样，换到任何环境，都不会丢失自己之前写过的笔记了（除非github不再免费存储了）\n\n# idea 本地Debugger 20190221\n\n1.   在idea操作页面 Run-->Edit-configurations-->点击左上角的+号--->在弹出的页面中选中Remote（开启远程监听）\n2.   Name 输入一个名称；setting都默认就好；Host 输入要测试的服务器ID，本地的话默认就好；Port 测试监听的端口，本地默认；Search sources using module's classpath 选中要测试的代码路径；jvm默认：-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005\n3.   启动测试的服务\n4.   启动远程监听\n5.   在需要调试的地方加上断点，即可进行断点调试了 \n\n# JAVA 解析XML\n\n参考[XML解析——Java中XML的四种解析方式](https://www.cnblogs.com/longqingyang/p/5577937.html)\n\n# JAVA 解析 HTML\n\n导入需要的jar\n\n``` gradle\ncompile('org.jsoup:jsoup:1.11.3')\n```\n\n```java\n/**\n     * 根据HTMl解析题目的内容\n     *\n     * @param content\n     * @return\n     */\n    private Map<String, Object> getQuestionByHtml(String content) {\n        org.jsoup.nodes.Document dom = Jsoup.parse(content);\n\n        //获取最外层信息（题目ID，知识点编码）根据样式属性获取\n        Elements elements = dom.select(\"div.popup-questions\");\n        String knowID = \"\";\n        String questionID = \"\";\n        if (null != elements && elements.size() > 0) {\n            Element element = elements.get(0);\n            knowID = element.attr(\"knowid\");//获取属性的值\n            questionID = element.attr(\"id\");\n        }\n\n        //获取题目配置信息\n        Elements qelements = dom.select(\"div.question\");\n        String code = \"\";\n        String type = \"\";\n        String answer = \"\";\n        String score = \"\";\n        if (null != qelements && qelements.size() > 0) {\n            Element qelement = qelements.get(0);\n            code = qelement.attr(\"code\");\n            type = qelement.attr(\"type\");\n            answer = qelement.attr(\"answer\");\n            score = qelement.attr(\"score\");\n        }\n\n        //获取题干\n        Elements titles = dom.select(\"p.label\");\n        String title = \"\";\n        if (null != titles && titles.size() > 0) {\n            title = titles.get(0).html();\n        }\n\n        //答案解析\n        String analysis = \"\";\n        Elements eanalysis = dom.select(\"p.label\");\n        if (null != eanalysis && eanalysis.size() > 0) {\n            analysis = eanalysis.get(0).html();\n        }\n\n        //解析选项\n        Elements options = dom.getElementsByTag(\"li\");\n        Map<String, String> optionMap = new HashMap<>();\n        for (Element option : options) {\n            optionMap.put(option.attr(\"code\"), option.html());\n        }\n        //组装\n        Map<String, Object> result = new HashMap<>();\n        Map<String, Object> question = new HashMap<>();\n        question.put(\"id\", questionID);\n        question.put(\"code\", code);\n        question.put(\"type\", type);\n        question.put(\"answer\", answer);\n        question.put(\"score\", score);\n        question.put(\"title\", title);\n        question.put(\"knowid\", knowID);\n        question.put(\"options\", optionMap);\n        question.put(\"analysis\", analysis);\n        result.put(knowID, question);\n        return result;\n    }\n```\n\n# JAVA处理HTML时，去掉标签内部的属性20190315\n\n```java\n\tprivate static final String regEx_tag = \"<(\\\\w[^>|\\\\s]*)[\\\\s\\\\S]*?>\";\n\n    public static String removeEleProp(String htmlStr) {\n        Pattern p = Pattern.compile(regEx_tag, Pattern.CASE_INSENSITIVE);\n        Matcher m = p.matcher(htmlStr);\n        StringBuffer sb = new StringBuffer();\n        while (m.find()) {\n            String tagWithProp= m.group(0);\n            String tag =m.group(1);\n            if (\"img\".equals(tag)) {\n                //img标签保留属性，可进一步处理删除无用属性，仅保留src等必要属性\n                m.appendReplacement(sb, tagWithProp);\n            }else if (\"a\".equals(tag)) {\n                //a标签保留属性，可进一步处理删除无用属性，仅保留href等必要属性\n                m.appendReplacement(sb, tagWithProp);\n            }else{\n                m.appendReplacement(sb, \"<\" + tag + \">\");\n            }\n        }\n        m.appendTail(sb);\n        return sb.toString();\n    }\n```\n\n# eclipse+tomcat远程调试20190319\n\ntomcat 默认提供8000为测试端口\n\n使用命令：./catalina.sh jpda start   启动服务\n\n在eclipse中创建远程监听，就可以进行远程断点调试了。\n\n# List遍历过程中操作List中的元素20190627\n\n如下代码：\n\n```java\nList<String> names = new ArrayList<>();\nnames.add(\"张三\");\nnames.add(\"李四\");\nnames.add(\"王五\");\nnames.add(\"张二麻子\");\n/**\n* 1.抛出java.util.ConcurrentModificationException\n* 是因为在移除list中的元素时，list的长度也跟着变化，因此继续访问的话，就会数组越界了\n*\n*/\nfor (String name : names) {\n\tif(\"李四\".equals(name)){\n    \tnames.remove(name);\n    }\n}\n```\n\n正确做法：\n\n```java\n\t\tIterator<String> is = names.iterator();\n        while (is.hasNext()){\n            if(\"李四\".equals(is.next())){\n                is.remove();\n            }\n        }\n```\n\n另外`ListIterator`对象提供了`hasPrevious()`方法可以判断前面是否还有元素。因此用这个迭代器可以逆向遍历集合。\n\n# List快速去重20190627\n\n大家都知道List是有序的可重复的单列列表集合。那么如何快速去重呢。想一想set的集合的特性，无序的不可重复的单项列表集合。\n\n>    集合的有序无序指的是，这里的有序和无序不是指集合中的排序，而是是否按照元素添加的顺序来存储对象。\n\n```java\n        List<String> list = new ArrayList<>();\n        list.add(\"a\");\n        list.add(\"e\");\n        list.add(\"c\");\n        list.add(\"d\");\n        list.add(\"c\");\n        list.add(\"a\");\n        Set<String> set = new TreeSet<>();\n        set.addAll(list);\n        System.out.println(set);//[a, c, d, e]\n```\n\n>    1.   `ArrayList`集合查询元素效率较高\n>    2.   `LinkedList`因为是连表形式的数据结构，因此添加，修改，删除效率比较高。\n>    3.   `ArrayList`、`LinkedList`都是非线程安全的；`Vector`线程安全的\n\n# Set判断是否重复的原理\n\n在`Set`集合掉用`add`存储元素的时候，会判断`hash`值和`equals`都相同的情况下，才算是重复元素。因此如果存储自定义引用类型的元素时，要确保不重复的话，需要重写`hashCode`和`equals`方法。\n\n`HashSet` 无序不可重复的集合。`LinkedHashSet`是`HashSet`的子类，区别是，`LinkedHashSet`是有序的\n\n# TreeSet\n\n`TreeSet`集合内部的值是自动排序的。如果自定义引用类型，想进行排序的话，需要实现`Comparble`接口并实现`comparTo`方法。\n\n`TreeSet`集合的元素必须实现`Comparble`接口\n\n`TreeSet`不允许存储`null`值\n\n不是线程安全的","slug":"java-top","published":1,"updated":"2022-11-24T13:38:45.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1ee000i4ovkln3q5nv5","content":"<h1 id=\"比较Long类型-20190215\"><a href=\"#比较Long类型-20190215\" class=\"headerlink\" title=\"比较Long类型 20190215\"></a>比较Long类型 20190215</h1><p>平时比较数字类型时习惯直接用<code>==</code>来比较，有一次发现两个Long类型的数字直接用<code>==</code>比较没有达到预期效果，仔细一想Long类型是long的封装类型，<code>==</code>比较是比较的引用地址，因此值是一样的，却返回false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Long l1 = <span class=\"keyword\">new</span> Long(<span class=\"number\">10</span>);</span><br><span class=\"line\">Long l2 = <span class=\"keyword\">new</span> Long(<span class=\"number\">10</span>);</span><br><span class=\"line\">System.out.println(l1 == l2);<span class=\"comment\">//false</span></span><br><span class=\"line\">System.out.println(l1.longValue() == l2.longValue());<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码也可以看出：long类型是java中的基本数据类型，可以用<code>==</code>直接比较</p>\n<a id=\"more\"></a>\n<h1 id=\"cookie的读取-20190215\"><a href=\"#cookie的读取-20190215\" class=\"headerlink\" title=\"cookie的读取 20190215\"></a>cookie的读取 20190215</h1><p>之前没有添加这一句<code>cookie.setPath(&quot;/&quot;);</code>导致在读取cookie的时候失败，是因为cookie默认的作用域是在同一路径下。<code>/write/cookie</code> 和 <code>/read/cookie</code> 不属于同一路径。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/write/cookie\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">writeCookie</span><span class=\"params\">(HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">        Cookie cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"Don't tell me\"</span>);</span><br><span class=\"line\">        cookie.setMaxAge(<span class=\"number\">10000</span>);</span><br><span class=\"line\">        cookie.setPath(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        response.addCookie(cookie);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"write cookie username\"</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在添加：cookie.setPath(\"/\");这一行代码之前，读取不到cookie，因为cookie默认的作用域是在同一路径下有效</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加这一行代码后，是在同一域名下有效</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cookie</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/read/cookie\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">readCookie</span><span class=\"params\">(@CookieValue(value = <span class=\"string\">\"username\"</span>,defaultValue = <span class=\"string\">\"\"</span>)</span> String cookie) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"cookie:username ==&gt; \"</span>+cookie;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"GitHub保存笔记源文件20190215\"><a href=\"#GitHub保存笔记源文件20190215\" class=\"headerlink\" title=\"GitHub保存笔记源文件20190215\"></a>GitHub保存笔记源文件20190215</h1><ol>\n<li><p>在<code>hexo</code>下创建笔记 </p>\n<blockquote>\n<p>   hexo new “fileName”</p>\n<p>   hexo generate</p>\n<p>   hexo deploy </p>\n</blockquote>\n</li>\n<li><p>在Blog目录下执行git命令把修改添加到Git仓库中</p>\n<blockquote>\n<p>   git add <file></file></p>\n<p>   git commit -m “message”</p>\n<p>   git push -u origin master</p>\n</blockquote>\n</li>\n</ol>\n<p>这样，换到任何环境，都不会丢失自己之前写过的笔记了（除非github不再免费存储了）</p>\n<h1 id=\"idea-本地Debugger-20190221\"><a href=\"#idea-本地Debugger-20190221\" class=\"headerlink\" title=\"idea 本地Debugger 20190221\"></a>idea 本地Debugger 20190221</h1><ol>\n<li>在idea操作页面 Run–&gt;Edit-configurations–&gt;点击左上角的+号—&gt;在弹出的页面中选中Remote（开启远程监听）</li>\n<li>Name 输入一个名称；setting都默认就好；Host 输入要测试的服务器ID，本地的话默认就好；Port 测试监听的端口，本地默认；Search sources using module’s classpath 选中要测试的代码路径；jvm默认：-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</li>\n<li>启动测试的服务</li>\n<li>启动远程监听</li>\n<li>在需要调试的地方加上断点，即可进行断点调试了 </li>\n</ol>\n<h1 id=\"JAVA-解析XML\"><a href=\"#JAVA-解析XML\" class=\"headerlink\" title=\"JAVA 解析XML\"></a>JAVA 解析XML</h1><p>参考<a href=\"https://www.cnblogs.com/longqingyang/p/5577937.html\" target=\"_blank\" rel=\"noopener\">XML解析——Java中XML的四种解析方式</a></p>\n<h1 id=\"JAVA-解析-HTML\"><a href=\"#JAVA-解析-HTML\" class=\"headerlink\" title=\"JAVA 解析 HTML\"></a>JAVA 解析 HTML</h1><p>导入需要的jar</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">compile</span>(<span class=\"string\">'org.jsoup:jsoup:1.11.3'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据HTMl解析题目的内容</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Map&lt;String, Object&gt; <span class=\"title\">getQuestionByHtml</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        org.jsoup.nodes.Document dom = Jsoup.parse(content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取最外层信息（题目ID，知识点编码）根据样式属性获取</span></span><br><span class=\"line\">        Elements elements = dom.select(<span class=\"string\">\"div.popup-questions\"</span>);</span><br><span class=\"line\">        String knowID = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        String questionID = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != elements &amp;&amp; elements.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Element element = elements.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">            knowID = element.attr(<span class=\"string\">\"knowid\"</span>);<span class=\"comment\">//获取属性的值</span></span><br><span class=\"line\">            questionID = element.attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取题目配置信息</span></span><br><span class=\"line\">        Elements qelements = dom.select(<span class=\"string\">\"div.question\"</span>);</span><br><span class=\"line\">        String code = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        String type = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        String answer = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        String score = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != qelements &amp;&amp; qelements.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Element qelement = qelements.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">            code = qelement.attr(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">            type = qelement.attr(<span class=\"string\">\"type\"</span>);</span><br><span class=\"line\">            answer = qelement.attr(<span class=\"string\">\"answer\"</span>);</span><br><span class=\"line\">            score = qelement.attr(<span class=\"string\">\"score\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取题干</span></span><br><span class=\"line\">        Elements titles = dom.select(<span class=\"string\">\"p.label\"</span>);</span><br><span class=\"line\">        String title = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != titles &amp;&amp; titles.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            title = titles.get(<span class=\"number\">0</span>).html();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//答案解析</span></span><br><span class=\"line\">        String analysis = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        Elements eanalysis = dom.select(<span class=\"string\">\"p.label\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != eanalysis &amp;&amp; eanalysis.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            analysis = eanalysis.get(<span class=\"number\">0</span>).html();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//解析选项</span></span><br><span class=\"line\">        Elements options = dom.getElementsByTag(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">        Map&lt;String, String&gt; optionMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Element option : options) &#123;</span><br><span class=\"line\">            optionMap.put(option.attr(<span class=\"string\">\"code\"</span>), option.html());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//组装</span></span><br><span class=\"line\">        Map&lt;String, Object&gt; result = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map&lt;String, Object&gt; question = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        question.put(<span class=\"string\">\"id\"</span>, questionID);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"code\"</span>, code);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"type\"</span>, type);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"answer\"</span>, answer);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"score\"</span>, score);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"title\"</span>, title);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"knowid\"</span>, knowID);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"options\"</span>, optionMap);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"analysis\"</span>, analysis);</span><br><span class=\"line\">        result.put(knowID, question);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"JAVA处理HTML时，去掉标签内部的属性20190315\"><a href=\"#JAVA处理HTML时，去掉标签内部的属性20190315\" class=\"headerlink\" title=\"JAVA处理HTML时，去掉标签内部的属性20190315\"></a>JAVA处理HTML时，去掉标签内部的属性20190315</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String regEx_tag = <span class=\"string\">\"&lt;(\\\\w[^&gt;|\\\\s]*)[\\\\s\\\\S]*?&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">removeEleProp</span><span class=\"params\">(String htmlStr)</span> </span>&#123;</span><br><span class=\"line\">       Pattern p = Pattern.compile(regEx_tag, Pattern.CASE_INSENSITIVE);</span><br><span class=\"line\">       Matcher m = p.matcher(htmlStr);</span><br><span class=\"line\">       StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (m.find()) &#123;</span><br><span class=\"line\">           String tagWithProp= m.group(<span class=\"number\">0</span>);</span><br><span class=\"line\">           String tag =m.group(<span class=\"number\">1</span>);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"string\">\"img\"</span>.equals(tag)) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//img标签保留属性，可进一步处理删除无用属性，仅保留src等必要属性</span></span><br><span class=\"line\">               m.appendReplacement(sb, tagWithProp);</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"a\"</span>.equals(tag)) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//a标签保留属性，可进一步处理删除无用属性，仅保留href等必要属性</span></span><br><span class=\"line\">               m.appendReplacement(sb, tagWithProp);</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               m.appendReplacement(sb, <span class=\"string\">\"&lt;\"</span> + tag + <span class=\"string\">\"&gt;\"</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       m.appendTail(sb);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"eclipse-tomcat远程调试20190319\"><a href=\"#eclipse-tomcat远程调试20190319\" class=\"headerlink\" title=\"eclipse+tomcat远程调试20190319\"></a>eclipse+tomcat远程调试20190319</h1><p>tomcat 默认提供8000为测试端口</p>\n<p>使用命令：./catalina.sh jpda start   启动服务</p>\n<p>在eclipse中创建远程监听，就可以进行远程断点调试了。</p>\n<h1 id=\"List遍历过程中操作List中的元素20190627\"><a href=\"#List遍历过程中操作List中的元素20190627\" class=\"headerlink\" title=\"List遍历过程中操作List中的元素20190627\"></a>List遍历过程中操作List中的元素20190627</h1><p>如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; names = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">names.add(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">names.add(<span class=\"string\">\"李四\"</span>);</span><br><span class=\"line\">names.add(<span class=\"string\">\"王五\"</span>);</span><br><span class=\"line\">names.add(<span class=\"string\">\"张二麻子\"</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 1.抛出java.util.ConcurrentModificationException</span></span><br><span class=\"line\"><span class=\"comment\">* 是因为在移除list中的元素时，list的长度也跟着变化，因此继续访问的话，就会数组越界了</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"string\">\"李四\"</span>.equals(name))&#123;</span><br><span class=\"line\">    \tnames.remove(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正确做法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator&lt;String&gt; is = names.iterator();</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (is.hasNext())&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"string\">\"李四\"</span>.equals(is.next()))&#123;</span><br><span class=\"line\">              is.remove();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>另外<code>ListIterator</code>对象提供了<code>hasPrevious()</code>方法可以判断前面是否还有元素。因此用这个迭代器可以逆向遍历集合。</p>\n<h1 id=\"List快速去重20190627\"><a href=\"#List快速去重20190627\" class=\"headerlink\" title=\"List快速去重20190627\"></a>List快速去重20190627</h1><p>大家都知道List是有序的可重复的单列列表集合。那么如何快速去重呢。想一想set的集合的特性，无序的不可重复的单项列表集合。</p>\n<blockquote>\n<p>   集合的有序无序指的是，这里的有序和无序不是指集合中的排序，而是是否按照元素添加的顺序来存储对象。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"e\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">Set&lt;String&gt; set = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\">set.addAll(list);</span><br><span class=\"line\">System.out.println(set);<span class=\"comment\">//[a, c, d, e]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li><code>ArrayList</code>集合查询元素效率较高</li>\n<li><code>LinkedList</code>因为是连表形式的数据结构，因此添加，修改，删除效率比较高。</li>\n<li><code>ArrayList</code>、<code>LinkedList</code>都是非线程安全的；<code>Vector</code>线程安全的</li>\n</ol>\n</blockquote>\n<h1 id=\"Set判断是否重复的原理\"><a href=\"#Set判断是否重复的原理\" class=\"headerlink\" title=\"Set判断是否重复的原理\"></a>Set判断是否重复的原理</h1><p>在<code>Set</code>集合掉用<code>add</code>存储元素的时候，会判断<code>hash</code>值和<code>equals</code>都相同的情况下，才算是重复元素。因此如果存储自定义引用类型的元素时，要确保不重复的话，需要重写<code>hashCode</code>和<code>equals</code>方法。</p>\n<p><code>HashSet</code> 无序不可重复的集合。<code>LinkedHashSet</code>是<code>HashSet</code>的子类，区别是，<code>LinkedHashSet</code>是有序的</p>\n<h1 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h1><p><code>TreeSet</code>集合内部的值是自动排序的。如果自定义引用类型，想进行排序的话，需要实现<code>Comparble</code>接口并实现<code>comparTo</code>方法。</p>\n<p><code>TreeSet</code>集合的元素必须实现<code>Comparble</code>接口</p>\n<p><code>TreeSet</code>不允许存储<code>null</code>值</p>\n<p>不是线程安全的</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"比较Long类型-20190215\"><a href=\"#比较Long类型-20190215\" class=\"headerlink\" title=\"比较Long类型 20190215\"></a>比较Long类型 20190215</h1><p>平时比较数字类型时习惯直接用<code>==</code>来比较，有一次发现两个Long类型的数字直接用<code>==</code>比较没有达到预期效果，仔细一想Long类型是long的封装类型，<code>==</code>比较是比较的引用地址，因此值是一样的，却返回false。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Long l1 = <span class=\"keyword\">new</span> Long(<span class=\"number\">10</span>);</span><br><span class=\"line\">Long l2 = <span class=\"keyword\">new</span> Long(<span class=\"number\">10</span>);</span><br><span class=\"line\">System.out.println(l1 == l2);<span class=\"comment\">//false</span></span><br><span class=\"line\">System.out.println(l1.longValue() == l2.longValue());<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码也可以看出：long类型是java中的基本数据类型，可以用<code>==</code>直接比较</p>","more":"<h1 id=\"cookie的读取-20190215\"><a href=\"#cookie的读取-20190215\" class=\"headerlink\" title=\"cookie的读取 20190215\"></a>cookie的读取 20190215</h1><p>之前没有添加这一句<code>cookie.setPath(&quot;/&quot;);</code>导致在读取cookie的时候失败，是因为cookie默认的作用域是在同一路径下。<code>/write/cookie</code> 和 <code>/read/cookie</code> 不属于同一路径。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/write/cookie\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">writeCookie</span><span class=\"params\">(HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">        Cookie cookie = <span class=\"keyword\">new</span> Cookie(<span class=\"string\">\"username\"</span>, <span class=\"string\">\"Don't tell me\"</span>);</span><br><span class=\"line\">        cookie.setMaxAge(<span class=\"number\">10000</span>);</span><br><span class=\"line\">        cookie.setPath(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">        response.addCookie(cookie);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"write cookie username\"</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在添加：cookie.setPath(\"/\");这一行代码之前，读取不到cookie，因为cookie默认的作用域是在同一路径下有效</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加这一行代码后，是在同一域名下有效</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cookie</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/read/cookie\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">readCookie</span><span class=\"params\">(@CookieValue(value = <span class=\"string\">\"username\"</span>,defaultValue = <span class=\"string\">\"\"</span>)</span> String cookie) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"cookie:username ==&gt; \"</span>+cookie;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"GitHub保存笔记源文件20190215\"><a href=\"#GitHub保存笔记源文件20190215\" class=\"headerlink\" title=\"GitHub保存笔记源文件20190215\"></a>GitHub保存笔记源文件20190215</h1><ol>\n<li><p>在<code>hexo</code>下创建笔记 </p>\n<blockquote>\n<p>   hexo new “fileName”</p>\n<p>   hexo generate</p>\n<p>   hexo deploy </p>\n</blockquote>\n</li>\n<li><p>在Blog目录下执行git命令把修改添加到Git仓库中</p>\n<blockquote>\n<p>   git add <file></file></p>\n<p>   git commit -m “message”</p>\n<p>   git push -u origin master</p>\n</blockquote>\n</li>\n</ol>\n<p>这样，换到任何环境，都不会丢失自己之前写过的笔记了（除非github不再免费存储了）</p>\n<h1 id=\"idea-本地Debugger-20190221\"><a href=\"#idea-本地Debugger-20190221\" class=\"headerlink\" title=\"idea 本地Debugger 20190221\"></a>idea 本地Debugger 20190221</h1><ol>\n<li>在idea操作页面 Run–&gt;Edit-configurations–&gt;点击左上角的+号—&gt;在弹出的页面中选中Remote（开启远程监听）</li>\n<li>Name 输入一个名称；setting都默认就好；Host 输入要测试的服务器ID，本地的话默认就好；Port 测试监听的端口，本地默认；Search sources using module’s classpath 选中要测试的代码路径；jvm默认：-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005</li>\n<li>启动测试的服务</li>\n<li>启动远程监听</li>\n<li>在需要调试的地方加上断点，即可进行断点调试了 </li>\n</ol>\n<h1 id=\"JAVA-解析XML\"><a href=\"#JAVA-解析XML\" class=\"headerlink\" title=\"JAVA 解析XML\"></a>JAVA 解析XML</h1><p>参考<a href=\"https://www.cnblogs.com/longqingyang/p/5577937.html\" target=\"_blank\" rel=\"noopener\">XML解析——Java中XML的四种解析方式</a></p>\n<h1 id=\"JAVA-解析-HTML\"><a href=\"#JAVA-解析-HTML\" class=\"headerlink\" title=\"JAVA 解析 HTML\"></a>JAVA 解析 HTML</h1><p>导入需要的jar</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">compile</span>(<span class=\"string\">'org.jsoup:jsoup:1.11.3'</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据HTMl解析题目的内容</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> content</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> Map&lt;String, Object&gt; <span class=\"title\">getQuestionByHtml</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        org.jsoup.nodes.Document dom = Jsoup.parse(content);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取最外层信息（题目ID，知识点编码）根据样式属性获取</span></span><br><span class=\"line\">        Elements elements = dom.select(<span class=\"string\">\"div.popup-questions\"</span>);</span><br><span class=\"line\">        String knowID = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        String questionID = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != elements &amp;&amp; elements.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Element element = elements.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">            knowID = element.attr(<span class=\"string\">\"knowid\"</span>);<span class=\"comment\">//获取属性的值</span></span><br><span class=\"line\">            questionID = element.attr(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取题目配置信息</span></span><br><span class=\"line\">        Elements qelements = dom.select(<span class=\"string\">\"div.question\"</span>);</span><br><span class=\"line\">        String code = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        String type = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        String answer = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        String score = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != qelements &amp;&amp; qelements.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            Element qelement = qelements.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">            code = qelement.attr(<span class=\"string\">\"code\"</span>);</span><br><span class=\"line\">            type = qelement.attr(<span class=\"string\">\"type\"</span>);</span><br><span class=\"line\">            answer = qelement.attr(<span class=\"string\">\"answer\"</span>);</span><br><span class=\"line\">            score = qelement.attr(<span class=\"string\">\"score\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取题干</span></span><br><span class=\"line\">        Elements titles = dom.select(<span class=\"string\">\"p.label\"</span>);</span><br><span class=\"line\">        String title = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != titles &amp;&amp; titles.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            title = titles.get(<span class=\"number\">0</span>).html();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//答案解析</span></span><br><span class=\"line\">        String analysis = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        Elements eanalysis = dom.select(<span class=\"string\">\"p.label\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != eanalysis &amp;&amp; eanalysis.size() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            analysis = eanalysis.get(<span class=\"number\">0</span>).html();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//解析选项</span></span><br><span class=\"line\">        Elements options = dom.getElementsByTag(<span class=\"string\">\"li\"</span>);</span><br><span class=\"line\">        Map&lt;String, String&gt; optionMap = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Element option : options) &#123;</span><br><span class=\"line\">            optionMap.put(option.attr(<span class=\"string\">\"code\"</span>), option.html());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//组装</span></span><br><span class=\"line\">        Map&lt;String, Object&gt; result = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        Map&lt;String, Object&gt; question = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        question.put(<span class=\"string\">\"id\"</span>, questionID);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"code\"</span>, code);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"type\"</span>, type);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"answer\"</span>, answer);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"score\"</span>, score);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"title\"</span>, title);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"knowid\"</span>, knowID);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"options\"</span>, optionMap);</span><br><span class=\"line\">        question.put(<span class=\"string\">\"analysis\"</span>, analysis);</span><br><span class=\"line\">        result.put(knowID, question);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"JAVA处理HTML时，去掉标签内部的属性20190315\"><a href=\"#JAVA处理HTML时，去掉标签内部的属性20190315\" class=\"headerlink\" title=\"JAVA处理HTML时，去掉标签内部的属性20190315\"></a>JAVA处理HTML时，去掉标签内部的属性20190315</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String regEx_tag = <span class=\"string\">\"&lt;(\\\\w[^&gt;|\\\\s]*)[\\\\s\\\\S]*?&gt;\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">removeEleProp</span><span class=\"params\">(String htmlStr)</span> </span>&#123;</span><br><span class=\"line\">       Pattern p = Pattern.compile(regEx_tag, Pattern.CASE_INSENSITIVE);</span><br><span class=\"line\">       Matcher m = p.matcher(htmlStr);</span><br><span class=\"line\">       StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (m.find()) &#123;</span><br><span class=\"line\">           String tagWithProp= m.group(<span class=\"number\">0</span>);</span><br><span class=\"line\">           String tag =m.group(<span class=\"number\">1</span>);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"string\">\"img\"</span>.equals(tag)) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//img标签保留属性，可进一步处理删除无用属性，仅保留src等必要属性</span></span><br><span class=\"line\">               m.appendReplacement(sb, tagWithProp);</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"string\">\"a\"</span>.equals(tag)) &#123;</span><br><span class=\"line\">               <span class=\"comment\">//a标签保留属性，可进一步处理删除无用属性，仅保留href等必要属性</span></span><br><span class=\"line\">               m.appendReplacement(sb, tagWithProp);</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">               m.appendReplacement(sb, <span class=\"string\">\"&lt;\"</span> + tag + <span class=\"string\">\"&gt;\"</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       m.appendTail(sb);</span><br><span class=\"line\">       <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"eclipse-tomcat远程调试20190319\"><a href=\"#eclipse-tomcat远程调试20190319\" class=\"headerlink\" title=\"eclipse+tomcat远程调试20190319\"></a>eclipse+tomcat远程调试20190319</h1><p>tomcat 默认提供8000为测试端口</p>\n<p>使用命令：./catalina.sh jpda start   启动服务</p>\n<p>在eclipse中创建远程监听，就可以进行远程断点调试了。</p>\n<h1 id=\"List遍历过程中操作List中的元素20190627\"><a href=\"#List遍历过程中操作List中的元素20190627\" class=\"headerlink\" title=\"List遍历过程中操作List中的元素20190627\"></a>List遍历过程中操作List中的元素20190627</h1><p>如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; names = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">names.add(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">names.add(<span class=\"string\">\"李四\"</span>);</span><br><span class=\"line\">names.add(<span class=\"string\">\"王五\"</span>);</span><br><span class=\"line\">names.add(<span class=\"string\">\"张二麻子\"</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 1.抛出java.util.ConcurrentModificationException</span></span><br><span class=\"line\"><span class=\"comment\">* 是因为在移除list中的元素时，list的长度也跟着变化，因此继续访问的话，就会数组越界了</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"string\">\"李四\"</span>.equals(name))&#123;</span><br><span class=\"line\">    \tnames.remove(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>正确做法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Iterator&lt;String&gt; is = names.iterator();</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (is.hasNext())&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(<span class=\"string\">\"李四\"</span>.equals(is.next()))&#123;</span><br><span class=\"line\">              is.remove();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>另外<code>ListIterator</code>对象提供了<code>hasPrevious()</code>方法可以判断前面是否还有元素。因此用这个迭代器可以逆向遍历集合。</p>\n<h1 id=\"List快速去重20190627\"><a href=\"#List快速去重20190627\" class=\"headerlink\" title=\"List快速去重20190627\"></a>List快速去重20190627</h1><p>大家都知道List是有序的可重复的单列列表集合。那么如何快速去重呢。想一想set的集合的特性，无序的不可重复的单项列表集合。</p>\n<blockquote>\n<p>   集合的有序无序指的是，这里的有序和无序不是指集合中的排序，而是是否按照元素添加的顺序来存储对象。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"e\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"d\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"c\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">Set&lt;String&gt; set = <span class=\"keyword\">new</span> TreeSet&lt;&gt;();</span><br><span class=\"line\">set.addAll(list);</span><br><span class=\"line\">System.out.println(set);<span class=\"comment\">//[a, c, d, e]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li><code>ArrayList</code>集合查询元素效率较高</li>\n<li><code>LinkedList</code>因为是连表形式的数据结构，因此添加，修改，删除效率比较高。</li>\n<li><code>ArrayList</code>、<code>LinkedList</code>都是非线程安全的；<code>Vector</code>线程安全的</li>\n</ol>\n</blockquote>\n<h1 id=\"Set判断是否重复的原理\"><a href=\"#Set判断是否重复的原理\" class=\"headerlink\" title=\"Set判断是否重复的原理\"></a>Set判断是否重复的原理</h1><p>在<code>Set</code>集合掉用<code>add</code>存储元素的时候，会判断<code>hash</code>值和<code>equals</code>都相同的情况下，才算是重复元素。因此如果存储自定义引用类型的元素时，要确保不重复的话，需要重写<code>hashCode</code>和<code>equals</code>方法。</p>\n<p><code>HashSet</code> 无序不可重复的集合。<code>LinkedHashSet</code>是<code>HashSet</code>的子类，区别是，<code>LinkedHashSet</code>是有序的</p>\n<h1 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h1><p><code>TreeSet</code>集合内部的值是自动排序的。如果自定义引用类型，想进行排序的话，需要实现<code>Comparble</code>接口并实现<code>comparTo</code>方法。</p>\n<p><code>TreeSet</code>集合的元素必须实现<code>Comparble</code>接口</p>\n<p><code>TreeSet</code>不允许存储<code>null</code>值</p>\n<p>不是线程安全的</p>"},{"title":"搭建一个spring-springmvc-mybitis项目","date":"2017-12-15T03:23:01.000Z","_content":"\n# 背景\n\n平时做项目都是在前人搭建好的项目上进行开发，虽然对框架有了一定的了解，能完成开发任务，可是自己始终没有完整的搭建过ssm框架，并且对一个**web**项目中所应用的技术没有一个好的认知和总结。因此自己总结了一下，以备以后使用。并希望在以后的学习中，不断完善该文档。\n\n<!-- more -->\n\n# 技术介绍\n\n项目管理：maven\n\n集成框架：使用轻量级的spring框架\n\n控制层框架：使用springmvc\n\n视图模板：thymeleaf\n\n数据层：使用mybitis3\n\n日志框架：logback\n\n数据库连接池：dbcp2\n\n数据库：mysql\n\n# 添加spring，springmvc应用\n\n## 添加依赖\n\n```xml\n<properties>\n\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t<project.build.locales>zh_CN</project.build.locales>\n\t<project.build.jdk>1.7</project.build.jdk>\n\t<plugin.maven-compiler>3.1</plugin.maven-compiler>\n\t<spring.version>5.0.0.RELEASE</spring.version>\n</properties>\n<!-- spring -->\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-core</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-oxm</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-tx</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-jdbc</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-aop</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-context-support</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-test</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<!-- springmvc -->\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-webmvc</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-web</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<!-- 可以使用j2ee提供的几个注解比如@resource -->\n<dependency>\n\t<groupId>javax.annotation</groupId>\n\t<artifactId>javax.annotation-api</artifactId>\n\t<version>1.2</version>\n</dependency>\n<!-- 处理json数据 -->\n<dependency>\n\t<groupId>com.alibaba</groupId>\n\t<artifactId>fastjson</artifactId>\n\t<version>1.2.41</version>\n</dependency>\n```\n\n\n\n## 添加spring配置\n\n`applicationContext.xml` spring的主配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\">\n\t<!-- spring可以自动去扫描base-pack下面或者子包下面的java文件，\n\t如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean -->\n\t<context:component-scan base-package=\"com.gaofeng\"></context:component-scan>\n</beans>\n\n```\n\n`springmvc-servlet.xml` springmvc的配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:mvc=\"http://www.springframework.org/schema/mvc\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\n\t\thttp://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd\n\t\thttp://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd\">\n\t<!-- 配置文件 -->\n\t<context:property-placeholder location=\"classpath:application.properties\" />\n\n\t<!-- 扫描控制器 -->\n\t<context:component-scan base-package=\"com.gaofeng.controller\"></context:component-scan>\n\t<!-- 注解映射支持 -->\n\t<mvc:annotation-driven>\n\t\t<mvc:message-converters>\n\t\t\t<!-- StringHttpMessageConverter 编码为UTF-8，防止乱码 -->\n\t\t\t<bean class=\"org.springframework.http.converter.StringHttpMessageConverter\">\n\t\t\t\t<constructor-arg value=\"UTF-8\" />\n\t\t\t\t<property name=\"supportedMediaTypes\">\n\t\t\t\t\t<list>\n\t\t\t\t\t\t<bean class=\"org.springframework.http.MediaType\">\n\t\t\t\t\t\t\t<constructor-arg index=\"0\" value=\"text\" />\n\t\t\t\t\t\t\t<constructor-arg index=\"1\" value=\"plain\" />\n\t\t\t\t\t\t\t<constructor-arg index=\"2\" value=\"UTF-8\" />\n\t\t\t\t\t\t</bean>\n\t\t\t\t\t\t<bean class=\"org.springframework.http.MediaType\">\n\t\t\t\t\t\t\t<constructor-arg index=\"0\" value=\"*\" />\n\t\t\t\t\t\t\t<constructor-arg index=\"1\" value=\"*\" />\n\t\t\t\t\t\t\t<constructor-arg index=\"2\" value=\"UTF-8\" />\n\t\t\t\t\t\t</bean>\n\t\t\t\t\t</list>\n\t\t\t\t</property>\n\t\t\t</bean>\n\t\t\t<!-- FastJson -->\n\t\t\t<bean\n\t\t\t\tclass=\"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4\">\n\t\t\t\t<property name=\"supportedMediaTypes\">\n\t\t\t\t\t<list>\n\t\t\t\t\t\t<value>text/html;charset=UTF-8</value>\n\t\t\t\t\t\t<value>application/json;charset=UTF-8</value>\n\t\t\t\t\t</list>\n\t\t\t\t</property>\n\t\t\t\t<property name=\"fastJsonConfig\">\n\t\t\t\t\t<bean class=\"com.alibaba.fastjson.support.config.FastJsonConfig\">\n\t\t\t\t\t\t<property name=\"features\">\n\t\t\t\t\t\t\t<list>\n\t\t\t\t\t\t\t\t<value>AllowArbitraryCommas</value>\n\t\t\t\t\t\t\t\t<value>AllowUnQuotedFieldNames</value>\n\t\t\t\t\t\t\t\t<value>DisableCircularReferenceDetect</value>\n\t\t\t\t\t\t\t</list>\n\t\t\t\t\t\t</property>\n\t\t\t\t\t\t<property name=\"dateFormat\" value=\"yyyy-MM-dd HH:mm:ss\" />\n\t\t\t\t\t</bean>\n\t\t\t\t</property>\n\t\t\t</bean>\n\t\t</mvc:message-converters>\n\t</mvc:annotation-driven>\n\t<!-- 静态资源的访问，如 js, css, jpg, png -->\n\t<!-- 如 HTML 里访问 /static/js/foo.js, 则实际访问的是 /WEB-INF/static/js/foo.js -->\n\t<mvc:resources mapping=\"/static/js/**\" location=\"/WEB-INF/static/js/\"\n\t\tcache-period=\"31556926\" />\n\t<mvc:resources mapping=\"/static/css/**\" location=\"/WEB-INF/static/css/\"\n\t\tcache-period=\"31556926\" />\n\t<mvc:resources mapping=\"/static/img/**\" location=\"/WEB-INF/static/img/\"\n\t\tcache-period=\"31556926\" />\n\t<mvc:resources mapping=\"/static/html/**\" location=\"/WEB-INF/static/html/\"\n\t\tcache-period=\"31556926\" />\n</beans>\n\n```\n\n\n\n## 修改web.xml配置加载spring配置文件\n\n```xml\n<!DOCTYPE web-app PUBLIC\n \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n\n<web-app>\n\t<display-name>Archetype Created Web Application</display-name>\n\t<!-- POST 请求的编码 -->\n\t<filter>\n\t\t<filter-name>characterEncodingFilter</filter-name>\n\t\t<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n\t\t<init-param>\n\t\t\t<param-name>encoding</param-name>\n\t\t\t<param-value>UTF-8</param-value>\n\t\t</init-param>\n\t\t<init-param>\n\t\t\t<param-name>forceEncoding</param-name>\n\t\t\t<param-value>true</param-value>\n\t\t</init-param>\n\t</filter>\n\t<filter-mapping>\n\t\t<filter-name>characterEncodingFilter</filter-name>\n\t\t<url-pattern>/*</url-pattern>\n\t</filter-mapping>\n\n\t<!-- 启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点: <listener></listener> \n\t\t和 <context-param></context-param> 紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文. \n\t\t容器将<context-param></context-param>转化为键值对,并交给ServletContext. 容器创建<listener></listener>中的类实例,即创建监听. \n\t\t这里是把spring主配置文件添加到servlet上下文中 -->\n\t<context-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>classpath:applicationContext.xml</param-value>\n\t</context-param>\n\n\t<!-- Bootstraps the root web application context before servlet initialization -->\n\t<listener>\n\t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n\t</listener>\n\n\t<!-- 配置springmvc核心selvlet-->\n\t<servlet>\n\t\t<servlet-name>springDispatcherServlet</servlet-name>\n\t\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t\t<init-param>\n\t\t\t<param-name>contextConfigLocation</param-name>\n\t\t\t<param-value>classpath:springmvc-servlet.xml</param-value>\n\t\t</init-param>\n\t\t<load-on-startup>1</load-on-startup>\n\t</servlet>\n\n\t<!-- Map all requests to the DispatcherServlet for handling -->\n\t<servlet-mapping>\n\t\t<servlet-name>springDispatcherServlet</servlet-name>\n\t\t<url-pattern>/</url-pattern>\n\t</servlet-mapping>\n</web-app>\n\n```\n\n通过上面的配置，我们已经添加了spring和springmvc框架，来验证一下。\n\n## 编写各层的bean\n\n项目使用多层的设计风格分为控制层，业务逻辑层，数据访问层，视图层；使用接口编程，降低各层的耦合性。\n\nPerson.java\n\n```java\npackage com.gaofeng.pojo;\n\npublic class Person {\n\t\n\tprivate Long id;\n\tprivate String uname;\n\tprivate String email;\n\t//省略setter和getter\n\n}\n\n```\n\nPersonServic.java 接口\n\n```java\npackage com.gaofeng.service;\n\nimport com.gaofeng.pojo.Person;\n\npublic interface PersonService {\n\n\tpublic void save(Person person);\n\n}\n```\n\nPersonServiceImpl.java实现类\n\n```java\npackage com.gaofeng.service.impl;\n\nimport org.springframework.stereotype.Service;\n\nimport com.gaofeng.pojo.Person;\nimport com.gaofeng.service.PersonService;\n\n@Service(value=\"pesonService\")\npublic class PersonServiceImpl implements PersonService {\n\t\n\tpublic void save(Person person) {\n\t\tSystem.out.println(\"save peson :\" + person.toString());\n\t}\n}\n\n```\n\nIndexController.java 控制层\n\n```java\npackage com.gaofeng.controller;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport com.gaofeng.pojo.Person;\nimport com.gaofeng.service.PersonService;\n\n@Controller\npublic class IndexController {\n\n\t@Resource(name = \"pesonService\")\n\tprivate PersonService pservice;\n\n\t@GetMapping(\"/index\")\n\tpublic String index(Model model) {\n\t\tmodel.addAttribute(\"message\", \"欢迎来到spring满汉全席\");\n\t\treturn \"index\";\n\t}\n\n\t@GetMapping(\"/test/add\")\n\tpublic String addPerson(Model model) {\n\t\tPerson p = new Person();\n\t\tp.setId(1L);\n\t\tp.setUname(\"张高峰\");\n\t\tp.setEmail(\"gaofeng0527@163.com\");\n\t\tpservice.save(p);\n\t\tmodel.addAttribute(\"message\", \"您已经成功添加一个用户\");\n\t\treturn \"index\";\n\t}\n\n}\n\n```\n\n>    `@Resource` 注解会先根据bean的名字去IOC容器中查找bean，如果没有的话才会使用类型匹配。找到后把spring ioc容器创建的bean交给IndexController使用。\n\n## 测试\n\n>    连接：http://localhost/gaofeng/index\n>\n>    页面显示：欢迎来到spring满汉全系\n>\n>    连接：http://localhost/gaofeng/test/add\n>\n>    控制台输出：save peson :Person [id=1, uname=张高峰, email=gaofeng0527@163.com]\n>\n>    页面显示：您已经成功添加一个用户\n\n## 总结\n\nspring，springmvc添加成功，可以实现依赖注入和控制反转，这也是使用spring的最主要的作用。\n\n# 添加mybitis\n\n## 添加依赖\n\n因为需要连接数据，所以要添加数据库驱动包；mybitis的包自不用说；现在大部分项目都在使用数据库连接池，因此需要加入数据库连接池的包，这里使用dbcp2。\n\n>    在spring中，常使用数据库连接池来完成对数据库的连接配置，类似于线程池的定义，数据库连接池就是维护有一定数量数据库连接的一个缓冲池，一方面，能够即取即用，免去初始化的时间，另一方面，用完的数据连接会归还到连接池中，这样就免去了不必要的连接创建、销毁工作，提升了性能。当然，使用连接池，有一下几点是连接池配置所考虑到的，也属于配置连接池的优点，而这些也会我们后面的实例配置中体现： \n>    1、 如果没有任何一个用户使用连接，那么那么应该维持一定数量的连接，等待用户使用。 \n>    2、 如果连接已经满了，则必须打开新的连接，供更多用户使用。 \n>    3、 如果一个服务器就只能有100个连接，那么如果有第101个人过来呢？应该等待其他用户释放连接 \n>    4、 如果一个用户等待时间太长了，则应该告诉用户，操作是失败的。\n>\n>    在spring中，常用的连接池有：jdbc,dbcp,c3p0,JNDI4种，他们有不同的优缺点和适用场景。其中，spring框架推荐使用dbcp，hibernate框架推荐使用c3p0。经测试发现，c3p0与dbcp相比较，c3p0能够更好的支持高并发，但是在稳定性方面略逊于dpcp。 \n\n```xml\n<!-- database -->\n<dependency>\n\t<groupId>org.apache.commons</groupId>\n\t<artifactId>commons-dbcp2</artifactId>\n\t<version>2.1.1</version>\n</dependency>\n<!-- DataBase数据库连接 mysql包 -->\n<dependency>\n\t<groupId>mysql</groupId>\n\t<artifactId>mysql-connector-java</artifactId>\n\t<version>5.1.38</version>\n</dependency>\n<!-- mybitis -->\n<dependency>\n\t<groupId>org.mybatis</groupId>\n\t<artifactId>mybatis</artifactId>\n\t<version>3.4.1</version>\n</dependency>\n<dependency>\n\t<groupId>org.mybatis</groupId>\n\t<artifactId>mybatis-spring</artifactId>\n\t<version>1.3.0</version>\n</dependency>\n```\n\n## 添加配置\n\n为了方便后期维护，把配置分成三部分：\n\n1.   application.properties 主要用来存储一些系统配置，比如数据库连接信息\n2.   spring-data.xml 主要用来配置数据库连接\n3.   applicationContext.xml spring主配置，把spring-data.xml引入进来\n\n`spring-data.xml` 数据库连接和mybitis添加\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\">\n\n\t<!-- 配置数据源 -->\n\t<!-- destroy-method=\"close\" 设置为close使Spring容器关闭同时数据源能够正常关闭，以免造成连接泄露 -->\n\t<bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\"\n\t\tdestroy-method=\"close\">\n\t\t<property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\" />\n\t\t<property name=\"url\"\n\t\t\tvalue=\"jdbc:mysql://localhost:3306/gaofeng?useUnicode=true&amp;characterEncoding=UTF-8\" />\n\t\t<property name=\"username\" value=\"root\" />\n\t\t<property name=\"password\" value=\"\" />\n\t\t<!-- 连接池启动初始连接数 -->\n\t\t<property name=\"initialSize\" value=\"5\" />\n\t\t<!-- 连接池最大连接数 -->\n\t\t<property name=\"maxTotal\" value=\"100\" />\n\t\t<!-- 最大空闲值，当经过一个高峰之后，连接池会慢慢的把不用的连接释放，一直减少到maxIdle值为止 -->\n\t\t<property name=\"maxIdle\" value=\"50\" />\n\t\t<!-- 最小空闲值,当空闲的连接数少于minIdle的值时，连接池会预先申请一部分连接，以防洪峰来时，来不及申请 -->\n\t\t<property name=\"minIdle\" value=\"5\" />\n\t\t<!-- 即启用poolPreparedStatements后，PreparedStatements 和CallableStatements \n\t\t\t都会被缓存起来复用，即相同逻辑的SQL可以复用一个游标，这样可以减少创建游标的数量。 -->\n\t\t<property name=\"poolPreparedStatements\" value=\"true\" />\n\t\t<property name=\"maxOpenPreparedStatements\" value=\"10\" />\n\n\t\t<!-- 给出一条简单的sql语句进行验证 -->\n\t\t<property name=\"validationQuery\" value=\"select NOW()\" />\n\t\t<!-- 在取出连接时进行有效验证, 实现如服务器重启后自动重连 -->\n\t\t<property name=\"testOnBorrow\" value=\"false\" />\n\t\t<property name=\"testWhileIdle\" value=\"true\" />\n\t\t<property name=\"logAbandoned\" value=\"true\" />\n\t\t<property name=\"removeAbandonedTimeout\" value=\"120\" />\n\t\t<!-- 运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务 -->\n\t\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"3600000\" />\n\t\t<!-- 连接的超时时间，默认为半小时 -->\n\t\t<property name=\"minEvictableIdleTimeMillis\" value=\"3600000\" />\n\t</bean>\n\t<!-- 2. SQL session factory -->\n\t<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t\t<property name=\"mapperLocations\" value=\"classpath:com/gaofeng/mapper/**/*.xml\" /> \n\t</bean>\n\t<!-- 3. Instantiate Mapper -->\n\t<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n\t\t<property name=\"basePackage\" value=\"com.gaofeng.mapper\" />\n\t</bean>\n</beans>\n```\n\n>    `org.mybatis.spring.mapper.MapperScannerConfigurer` 类会为basePackage包下的所有类作为mybitis的mapper注册到ioc容器中，并创建bean。方便后期自动注入。\n\n修改`applicationContext.xml`，导入`spring-data.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\">\n\n\t<import resource=\"classpath:spring-data.xml\"/>\n\t<!-- spring可以自动去扫描base-pack下面或者子包下面的java文件，\n\t如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean -->\n\t<context:component-scan base-package=\"com.gaofeng\"></context:component-scan>\n</beans>\n```\n\n## 编写mapper接口和配置文件\n\nPersonMapper接口\n\n```java\npackage com.gaofeng.mapper;\n\nimport com.gaofeng.pojo.Person;\n\npublic interface PersonMapper {\n\t\n\tpublic Person findPersonById(Long id);\n\n}\n```\n\nPersonMapper.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!-- 1.命名空间要和接口全名称一致 \n     2.sql语句映射配置的Id要和接口中的方法一致 \n     3.查询中如果类属性和数据库表中的字段名称不一致时，可以采用 \n\tselect user_name as userName 的形式 \n     4.返回类型最好使用类全名，也可以采用别名的形式。 -->\n<mapper namespace=\"com.gaofeng.mapper.PersonMapper\">\n\t<select id=\"findPersonById\" resultType=\"com.gaofeng.pojo.Person\">\n\t\tselect * from person where id = #{id}\n\t</select>\n</mapper>\n```\n\n## 数据准备工作\n\n创建数据库，创建表，添加测试数据，在这里就不再讲了。\n\n## 修改之前的service.impl和controller\n\n修改PersonService.java，添加findPersonById方法\n\n```java\npackage com.gaofeng.service;\n\nimport com.gaofeng.pojo.Person;\n\npublic interface PersonService {\n\n\tpublic void save(Person person);\n\n\tpublic Person findPersonById(Long id);\n\n}\n\n```\n\n修改PersonServiceImpl.java\n\n```java\npackage com.gaofeng.service.impl;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.gaofeng.mapper.PersonMapper;\nimport com.gaofeng.pojo.Person;\nimport com.gaofeng.service.PersonService;\n\n@Service(value=\"pesonService\")\npublic class PersonServiceImpl implements PersonService {\n\t\n\t/**\n\t * 这个地方因为之前在spring-data.xml配置文件中使用\n\t * MapperScannerConfigurer 扫描 mapper包，并创建了bean\n\t * 因此这里可以自动注入\n\t */\n\t@Autowired\n\tprivate PersonMapper pmapper;\n\n\tpublic void save(Person person) {\n\t\tSystem.out.println(\"save peson :\" + person.toString());\n\t}\n\t\n\tpublic Person findPersonById(Long id) {\n\t\treturn pmapper.findPersonById(id);\n\t}\n\n}\n```\n\nIndexController.java，添加`/dome/{id}`处理方法\n\n```java\npackage com.gaofeng.controller;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport com.gaofeng.pojo.Person;\nimport com.gaofeng.service.PersonService;\n\n@Controller\npublic class IndexController {\n\n\t@Resource(name = \"pesonService\")\n\tprivate PersonService pservice;\n\n\t@GetMapping(\"/index\")\n\tpublic String index(Model model) {\n\t\tmodel.addAttribute(\"message\", \"欢迎来到spring满汉全席\");\n\t\treturn \"index\";\n\t}\n\n\t@GetMapping(\"/test/add\")\n\tpublic String addPerson(Model model) {\n\t\tPerson p = new Person();\n\t\tp.setId(1L);\n\t\tp.setUname(\"张高峰\");\n\t\tp.setEmail(\"gaofeng0527@163.com\");\n\t\tpservice.save(p);\n\t\tmodel.addAttribute(\"message\", \"您已经成功添加一个用户\");\n\t\treturn \"index\";\n\t}\n\n\t@GetMapping(\"/dome/{id}\")\n\t@ResponseBody\n\tpublic Person findPerson(@PathVariable(value = \"id\") Long id) {\n\t\treturn pservice.findPersonById(id);\n\t}\n}\n\n```\n\n\n\n## 测试\n\n>    访问连接：http://localhost/gaofeng/dome/1\n>\n>    页面显示：{\"email\":\"gaofeng0527@163.com\",\"id\":1,\"uname\":\"张高峰\"}\n>\n>    控制台：输出sql语句\n\n自此，三大框架集成完毕。\n\n# 集成logback日志框架\n\n之前已经写过这个了，把连接贴下面，以供参考吧\n\n[集成logback日志框架](https://gaofeng0527.github.io/logback/)\n\n# 使用thymeleaf作为前端模版\n\n这个之前也写过了\n\n[springmvc集成thymeleaf](https://gaofeng0527.github.io/thymeleaf/)\n\n\n\n# 总结\n\nweb开发，这些都是基础，在开发过程中还会遇到很多问题，希望以后没遇到一个问题，自己都能记录下来。每天让自己进步一点。哎，有些后悔之前几年蹉跎了岁月。","source":"_posts/javaweb-project.md","raw":"---\ntitle: 搭建一个spring-springmvc-mybitis项目\ndate: 2017-12-15 11:23:01\ntags: [javaweb,springmvc]\n---\n\n# 背景\n\n平时做项目都是在前人搭建好的项目上进行开发，虽然对框架有了一定的了解，能完成开发任务，可是自己始终没有完整的搭建过ssm框架，并且对一个**web**项目中所应用的技术没有一个好的认知和总结。因此自己总结了一下，以备以后使用。并希望在以后的学习中，不断完善该文档。\n\n<!-- more -->\n\n# 技术介绍\n\n项目管理：maven\n\n集成框架：使用轻量级的spring框架\n\n控制层框架：使用springmvc\n\n视图模板：thymeleaf\n\n数据层：使用mybitis3\n\n日志框架：logback\n\n数据库连接池：dbcp2\n\n数据库：mysql\n\n# 添加spring，springmvc应用\n\n## 添加依赖\n\n```xml\n<properties>\n\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t<project.build.locales>zh_CN</project.build.locales>\n\t<project.build.jdk>1.7</project.build.jdk>\n\t<plugin.maven-compiler>3.1</plugin.maven-compiler>\n\t<spring.version>5.0.0.RELEASE</spring.version>\n</properties>\n<!-- spring -->\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-core</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-oxm</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-tx</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-jdbc</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-aop</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-context-support</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-test</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<!-- springmvc -->\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-webmvc</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework</groupId>\n\t<artifactId>spring-web</artifactId>\n\t<version>${spring.version}</version>\n</dependency>\n<!-- 可以使用j2ee提供的几个注解比如@resource -->\n<dependency>\n\t<groupId>javax.annotation</groupId>\n\t<artifactId>javax.annotation-api</artifactId>\n\t<version>1.2</version>\n</dependency>\n<!-- 处理json数据 -->\n<dependency>\n\t<groupId>com.alibaba</groupId>\n\t<artifactId>fastjson</artifactId>\n\t<version>1.2.41</version>\n</dependency>\n```\n\n\n\n## 添加spring配置\n\n`applicationContext.xml` spring的主配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\">\n\t<!-- spring可以自动去扫描base-pack下面或者子包下面的java文件，\n\t如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean -->\n\t<context:component-scan base-package=\"com.gaofeng\"></context:component-scan>\n</beans>\n\n```\n\n`springmvc-servlet.xml` springmvc的配置文件\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:mvc=\"http://www.springframework.org/schema/mvc\" xmlns:tx=\"http://www.springframework.org/schema/tx\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\n\t\thttp://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd\n\t\thttp://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd\">\n\t<!-- 配置文件 -->\n\t<context:property-placeholder location=\"classpath:application.properties\" />\n\n\t<!-- 扫描控制器 -->\n\t<context:component-scan base-package=\"com.gaofeng.controller\"></context:component-scan>\n\t<!-- 注解映射支持 -->\n\t<mvc:annotation-driven>\n\t\t<mvc:message-converters>\n\t\t\t<!-- StringHttpMessageConverter 编码为UTF-8，防止乱码 -->\n\t\t\t<bean class=\"org.springframework.http.converter.StringHttpMessageConverter\">\n\t\t\t\t<constructor-arg value=\"UTF-8\" />\n\t\t\t\t<property name=\"supportedMediaTypes\">\n\t\t\t\t\t<list>\n\t\t\t\t\t\t<bean class=\"org.springframework.http.MediaType\">\n\t\t\t\t\t\t\t<constructor-arg index=\"0\" value=\"text\" />\n\t\t\t\t\t\t\t<constructor-arg index=\"1\" value=\"plain\" />\n\t\t\t\t\t\t\t<constructor-arg index=\"2\" value=\"UTF-8\" />\n\t\t\t\t\t\t</bean>\n\t\t\t\t\t\t<bean class=\"org.springframework.http.MediaType\">\n\t\t\t\t\t\t\t<constructor-arg index=\"0\" value=\"*\" />\n\t\t\t\t\t\t\t<constructor-arg index=\"1\" value=\"*\" />\n\t\t\t\t\t\t\t<constructor-arg index=\"2\" value=\"UTF-8\" />\n\t\t\t\t\t\t</bean>\n\t\t\t\t\t</list>\n\t\t\t\t</property>\n\t\t\t</bean>\n\t\t\t<!-- FastJson -->\n\t\t\t<bean\n\t\t\t\tclass=\"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4\">\n\t\t\t\t<property name=\"supportedMediaTypes\">\n\t\t\t\t\t<list>\n\t\t\t\t\t\t<value>text/html;charset=UTF-8</value>\n\t\t\t\t\t\t<value>application/json;charset=UTF-8</value>\n\t\t\t\t\t</list>\n\t\t\t\t</property>\n\t\t\t\t<property name=\"fastJsonConfig\">\n\t\t\t\t\t<bean class=\"com.alibaba.fastjson.support.config.FastJsonConfig\">\n\t\t\t\t\t\t<property name=\"features\">\n\t\t\t\t\t\t\t<list>\n\t\t\t\t\t\t\t\t<value>AllowArbitraryCommas</value>\n\t\t\t\t\t\t\t\t<value>AllowUnQuotedFieldNames</value>\n\t\t\t\t\t\t\t\t<value>DisableCircularReferenceDetect</value>\n\t\t\t\t\t\t\t</list>\n\t\t\t\t\t\t</property>\n\t\t\t\t\t\t<property name=\"dateFormat\" value=\"yyyy-MM-dd HH:mm:ss\" />\n\t\t\t\t\t</bean>\n\t\t\t\t</property>\n\t\t\t</bean>\n\t\t</mvc:message-converters>\n\t</mvc:annotation-driven>\n\t<!-- 静态资源的访问，如 js, css, jpg, png -->\n\t<!-- 如 HTML 里访问 /static/js/foo.js, 则实际访问的是 /WEB-INF/static/js/foo.js -->\n\t<mvc:resources mapping=\"/static/js/**\" location=\"/WEB-INF/static/js/\"\n\t\tcache-period=\"31556926\" />\n\t<mvc:resources mapping=\"/static/css/**\" location=\"/WEB-INF/static/css/\"\n\t\tcache-period=\"31556926\" />\n\t<mvc:resources mapping=\"/static/img/**\" location=\"/WEB-INF/static/img/\"\n\t\tcache-period=\"31556926\" />\n\t<mvc:resources mapping=\"/static/html/**\" location=\"/WEB-INF/static/html/\"\n\t\tcache-period=\"31556926\" />\n</beans>\n\n```\n\n\n\n## 修改web.xml配置加载spring配置文件\n\n```xml\n<!DOCTYPE web-app PUBLIC\n \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"\n \"http://java.sun.com/dtd/web-app_2_3.dtd\" >\n\n<web-app>\n\t<display-name>Archetype Created Web Application</display-name>\n\t<!-- POST 请求的编码 -->\n\t<filter>\n\t\t<filter-name>characterEncodingFilter</filter-name>\n\t\t<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>\n\t\t<init-param>\n\t\t\t<param-name>encoding</param-name>\n\t\t\t<param-value>UTF-8</param-value>\n\t\t</init-param>\n\t\t<init-param>\n\t\t\t<param-name>forceEncoding</param-name>\n\t\t\t<param-value>true</param-value>\n\t\t</init-param>\n\t</filter>\n\t<filter-mapping>\n\t\t<filter-name>characterEncodingFilter</filter-name>\n\t\t<url-pattern>/*</url-pattern>\n\t</filter-mapping>\n\n\t<!-- 启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点: <listener></listener> \n\t\t和 <context-param></context-param> 紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文. \n\t\t容器将<context-param></context-param>转化为键值对,并交给ServletContext. 容器创建<listener></listener>中的类实例,即创建监听. \n\t\t这里是把spring主配置文件添加到servlet上下文中 -->\n\t<context-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>classpath:applicationContext.xml</param-value>\n\t</context-param>\n\n\t<!-- Bootstraps the root web application context before servlet initialization -->\n\t<listener>\n\t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n\t</listener>\n\n\t<!-- 配置springmvc核心selvlet-->\n\t<servlet>\n\t\t<servlet-name>springDispatcherServlet</servlet-name>\n\t\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t\t<init-param>\n\t\t\t<param-name>contextConfigLocation</param-name>\n\t\t\t<param-value>classpath:springmvc-servlet.xml</param-value>\n\t\t</init-param>\n\t\t<load-on-startup>1</load-on-startup>\n\t</servlet>\n\n\t<!-- Map all requests to the DispatcherServlet for handling -->\n\t<servlet-mapping>\n\t\t<servlet-name>springDispatcherServlet</servlet-name>\n\t\t<url-pattern>/</url-pattern>\n\t</servlet-mapping>\n</web-app>\n\n```\n\n通过上面的配置，我们已经添加了spring和springmvc框架，来验证一下。\n\n## 编写各层的bean\n\n项目使用多层的设计风格分为控制层，业务逻辑层，数据访问层，视图层；使用接口编程，降低各层的耦合性。\n\nPerson.java\n\n```java\npackage com.gaofeng.pojo;\n\npublic class Person {\n\t\n\tprivate Long id;\n\tprivate String uname;\n\tprivate String email;\n\t//省略setter和getter\n\n}\n\n```\n\nPersonServic.java 接口\n\n```java\npackage com.gaofeng.service;\n\nimport com.gaofeng.pojo.Person;\n\npublic interface PersonService {\n\n\tpublic void save(Person person);\n\n}\n```\n\nPersonServiceImpl.java实现类\n\n```java\npackage com.gaofeng.service.impl;\n\nimport org.springframework.stereotype.Service;\n\nimport com.gaofeng.pojo.Person;\nimport com.gaofeng.service.PersonService;\n\n@Service(value=\"pesonService\")\npublic class PersonServiceImpl implements PersonService {\n\t\n\tpublic void save(Person person) {\n\t\tSystem.out.println(\"save peson :\" + person.toString());\n\t}\n}\n\n```\n\nIndexController.java 控制层\n\n```java\npackage com.gaofeng.controller;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport com.gaofeng.pojo.Person;\nimport com.gaofeng.service.PersonService;\n\n@Controller\npublic class IndexController {\n\n\t@Resource(name = \"pesonService\")\n\tprivate PersonService pservice;\n\n\t@GetMapping(\"/index\")\n\tpublic String index(Model model) {\n\t\tmodel.addAttribute(\"message\", \"欢迎来到spring满汉全席\");\n\t\treturn \"index\";\n\t}\n\n\t@GetMapping(\"/test/add\")\n\tpublic String addPerson(Model model) {\n\t\tPerson p = new Person();\n\t\tp.setId(1L);\n\t\tp.setUname(\"张高峰\");\n\t\tp.setEmail(\"gaofeng0527@163.com\");\n\t\tpservice.save(p);\n\t\tmodel.addAttribute(\"message\", \"您已经成功添加一个用户\");\n\t\treturn \"index\";\n\t}\n\n}\n\n```\n\n>    `@Resource` 注解会先根据bean的名字去IOC容器中查找bean，如果没有的话才会使用类型匹配。找到后把spring ioc容器创建的bean交给IndexController使用。\n\n## 测试\n\n>    连接：http://localhost/gaofeng/index\n>\n>    页面显示：欢迎来到spring满汉全系\n>\n>    连接：http://localhost/gaofeng/test/add\n>\n>    控制台输出：save peson :Person [id=1, uname=张高峰, email=gaofeng0527@163.com]\n>\n>    页面显示：您已经成功添加一个用户\n\n## 总结\n\nspring，springmvc添加成功，可以实现依赖注入和控制反转，这也是使用spring的最主要的作用。\n\n# 添加mybitis\n\n## 添加依赖\n\n因为需要连接数据，所以要添加数据库驱动包；mybitis的包自不用说；现在大部分项目都在使用数据库连接池，因此需要加入数据库连接池的包，这里使用dbcp2。\n\n>    在spring中，常使用数据库连接池来完成对数据库的连接配置，类似于线程池的定义，数据库连接池就是维护有一定数量数据库连接的一个缓冲池，一方面，能够即取即用，免去初始化的时间，另一方面，用完的数据连接会归还到连接池中，这样就免去了不必要的连接创建、销毁工作，提升了性能。当然，使用连接池，有一下几点是连接池配置所考虑到的，也属于配置连接池的优点，而这些也会我们后面的实例配置中体现： \n>    1、 如果没有任何一个用户使用连接，那么那么应该维持一定数量的连接，等待用户使用。 \n>    2、 如果连接已经满了，则必须打开新的连接，供更多用户使用。 \n>    3、 如果一个服务器就只能有100个连接，那么如果有第101个人过来呢？应该等待其他用户释放连接 \n>    4、 如果一个用户等待时间太长了，则应该告诉用户，操作是失败的。\n>\n>    在spring中，常用的连接池有：jdbc,dbcp,c3p0,JNDI4种，他们有不同的优缺点和适用场景。其中，spring框架推荐使用dbcp，hibernate框架推荐使用c3p0。经测试发现，c3p0与dbcp相比较，c3p0能够更好的支持高并发，但是在稳定性方面略逊于dpcp。 \n\n```xml\n<!-- database -->\n<dependency>\n\t<groupId>org.apache.commons</groupId>\n\t<artifactId>commons-dbcp2</artifactId>\n\t<version>2.1.1</version>\n</dependency>\n<!-- DataBase数据库连接 mysql包 -->\n<dependency>\n\t<groupId>mysql</groupId>\n\t<artifactId>mysql-connector-java</artifactId>\n\t<version>5.1.38</version>\n</dependency>\n<!-- mybitis -->\n<dependency>\n\t<groupId>org.mybatis</groupId>\n\t<artifactId>mybatis</artifactId>\n\t<version>3.4.1</version>\n</dependency>\n<dependency>\n\t<groupId>org.mybatis</groupId>\n\t<artifactId>mybatis-spring</artifactId>\n\t<version>1.3.0</version>\n</dependency>\n```\n\n## 添加配置\n\n为了方便后期维护，把配置分成三部分：\n\n1.   application.properties 主要用来存储一些系统配置，比如数据库连接信息\n2.   spring-data.xml 主要用来配置数据库连接\n3.   applicationContext.xml spring主配置，把spring-data.xml引入进来\n\n`spring-data.xml` 数据库连接和mybitis添加\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n\txmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\">\n\n\t<!-- 配置数据源 -->\n\t<!-- destroy-method=\"close\" 设置为close使Spring容器关闭同时数据源能够正常关闭，以免造成连接泄露 -->\n\t<bean id=\"dataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\"\n\t\tdestroy-method=\"close\">\n\t\t<property name=\"driverClassName\" value=\"com.mysql.jdbc.Driver\" />\n\t\t<property name=\"url\"\n\t\t\tvalue=\"jdbc:mysql://localhost:3306/gaofeng?useUnicode=true&amp;characterEncoding=UTF-8\" />\n\t\t<property name=\"username\" value=\"root\" />\n\t\t<property name=\"password\" value=\"\" />\n\t\t<!-- 连接池启动初始连接数 -->\n\t\t<property name=\"initialSize\" value=\"5\" />\n\t\t<!-- 连接池最大连接数 -->\n\t\t<property name=\"maxTotal\" value=\"100\" />\n\t\t<!-- 最大空闲值，当经过一个高峰之后，连接池会慢慢的把不用的连接释放，一直减少到maxIdle值为止 -->\n\t\t<property name=\"maxIdle\" value=\"50\" />\n\t\t<!-- 最小空闲值,当空闲的连接数少于minIdle的值时，连接池会预先申请一部分连接，以防洪峰来时，来不及申请 -->\n\t\t<property name=\"minIdle\" value=\"5\" />\n\t\t<!-- 即启用poolPreparedStatements后，PreparedStatements 和CallableStatements \n\t\t\t都会被缓存起来复用，即相同逻辑的SQL可以复用一个游标，这样可以减少创建游标的数量。 -->\n\t\t<property name=\"poolPreparedStatements\" value=\"true\" />\n\t\t<property name=\"maxOpenPreparedStatements\" value=\"10\" />\n\n\t\t<!-- 给出一条简单的sql语句进行验证 -->\n\t\t<property name=\"validationQuery\" value=\"select NOW()\" />\n\t\t<!-- 在取出连接时进行有效验证, 实现如服务器重启后自动重连 -->\n\t\t<property name=\"testOnBorrow\" value=\"false\" />\n\t\t<property name=\"testWhileIdle\" value=\"true\" />\n\t\t<property name=\"logAbandoned\" value=\"true\" />\n\t\t<property name=\"removeAbandonedTimeout\" value=\"120\" />\n\t\t<!-- 运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务 -->\n\t\t<property name=\"timeBetweenEvictionRunsMillis\" value=\"3600000\" />\n\t\t<!-- 连接的超时时间，默认为半小时 -->\n\t\t<property name=\"minEvictableIdleTimeMillis\" value=\"3600000\" />\n\t</bean>\n\t<!-- 2. SQL session factory -->\n\t<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n\t\t<property name=\"dataSource\" ref=\"dataSource\" />\n\t\t<property name=\"mapperLocations\" value=\"classpath:com/gaofeng/mapper/**/*.xml\" /> \n\t</bean>\n\t<!-- 3. Instantiate Mapper -->\n\t<bean class=\"org.mybatis.spring.mapper.MapperScannerConfigurer\">\n\t\t<property name=\"basePackage\" value=\"com.gaofeng.mapper\" />\n\t</bean>\n</beans>\n```\n\n>    `org.mybatis.spring.mapper.MapperScannerConfigurer` 类会为basePackage包下的所有类作为mybitis的mapper注册到ioc容器中，并创建bean。方便后期自动注入。\n\n修改`applicationContext.xml`，导入`spring-data.xml`\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\">\n\n\t<import resource=\"classpath:spring-data.xml\"/>\n\t<!-- spring可以自动去扫描base-pack下面或者子包下面的java文件，\n\t如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean -->\n\t<context:component-scan base-package=\"com.gaofeng\"></context:component-scan>\n</beans>\n```\n\n## 编写mapper接口和配置文件\n\nPersonMapper接口\n\n```java\npackage com.gaofeng.mapper;\n\nimport com.gaofeng.pojo.Person;\n\npublic interface PersonMapper {\n\t\n\tpublic Person findPersonById(Long id);\n\n}\n```\n\nPersonMapper.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!-- 1.命名空间要和接口全名称一致 \n     2.sql语句映射配置的Id要和接口中的方法一致 \n     3.查询中如果类属性和数据库表中的字段名称不一致时，可以采用 \n\tselect user_name as userName 的形式 \n     4.返回类型最好使用类全名，也可以采用别名的形式。 -->\n<mapper namespace=\"com.gaofeng.mapper.PersonMapper\">\n\t<select id=\"findPersonById\" resultType=\"com.gaofeng.pojo.Person\">\n\t\tselect * from person where id = #{id}\n\t</select>\n</mapper>\n```\n\n## 数据准备工作\n\n创建数据库，创建表，添加测试数据，在这里就不再讲了。\n\n## 修改之前的service.impl和controller\n\n修改PersonService.java，添加findPersonById方法\n\n```java\npackage com.gaofeng.service;\n\nimport com.gaofeng.pojo.Person;\n\npublic interface PersonService {\n\n\tpublic void save(Person person);\n\n\tpublic Person findPersonById(Long id);\n\n}\n\n```\n\n修改PersonServiceImpl.java\n\n```java\npackage com.gaofeng.service.impl;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.gaofeng.mapper.PersonMapper;\nimport com.gaofeng.pojo.Person;\nimport com.gaofeng.service.PersonService;\n\n@Service(value=\"pesonService\")\npublic class PersonServiceImpl implements PersonService {\n\t\n\t/**\n\t * 这个地方因为之前在spring-data.xml配置文件中使用\n\t * MapperScannerConfigurer 扫描 mapper包，并创建了bean\n\t * 因此这里可以自动注入\n\t */\n\t@Autowired\n\tprivate PersonMapper pmapper;\n\n\tpublic void save(Person person) {\n\t\tSystem.out.println(\"save peson :\" + person.toString());\n\t}\n\t\n\tpublic Person findPersonById(Long id) {\n\t\treturn pmapper.findPersonById(id);\n\t}\n\n}\n```\n\nIndexController.java，添加`/dome/{id}`处理方法\n\n```java\npackage com.gaofeng.controller;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport com.gaofeng.pojo.Person;\nimport com.gaofeng.service.PersonService;\n\n@Controller\npublic class IndexController {\n\n\t@Resource(name = \"pesonService\")\n\tprivate PersonService pservice;\n\n\t@GetMapping(\"/index\")\n\tpublic String index(Model model) {\n\t\tmodel.addAttribute(\"message\", \"欢迎来到spring满汉全席\");\n\t\treturn \"index\";\n\t}\n\n\t@GetMapping(\"/test/add\")\n\tpublic String addPerson(Model model) {\n\t\tPerson p = new Person();\n\t\tp.setId(1L);\n\t\tp.setUname(\"张高峰\");\n\t\tp.setEmail(\"gaofeng0527@163.com\");\n\t\tpservice.save(p);\n\t\tmodel.addAttribute(\"message\", \"您已经成功添加一个用户\");\n\t\treturn \"index\";\n\t}\n\n\t@GetMapping(\"/dome/{id}\")\n\t@ResponseBody\n\tpublic Person findPerson(@PathVariable(value = \"id\") Long id) {\n\t\treturn pservice.findPersonById(id);\n\t}\n}\n\n```\n\n\n\n## 测试\n\n>    访问连接：http://localhost/gaofeng/dome/1\n>\n>    页面显示：{\"email\":\"gaofeng0527@163.com\",\"id\":1,\"uname\":\"张高峰\"}\n>\n>    控制台：输出sql语句\n\n自此，三大框架集成完毕。\n\n# 集成logback日志框架\n\n之前已经写过这个了，把连接贴下面，以供参考吧\n\n[集成logback日志框架](https://gaofeng0527.github.io/logback/)\n\n# 使用thymeleaf作为前端模版\n\n这个之前也写过了\n\n[springmvc集成thymeleaf](https://gaofeng0527.github.io/thymeleaf/)\n\n\n\n# 总结\n\nweb开发，这些都是基础，在开发过程中还会遇到很多问题，希望以后没遇到一个问题，自己都能记录下来。每天让自己进步一点。哎，有些后悔之前几年蹉跎了岁月。","slug":"javaweb-project","published":1,"updated":"2022-11-24T13:38:45.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1eh000l4ovkp9xqa0wp","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>平时做项目都是在前人搭建好的项目上进行开发，虽然对框架有了一定的了解，能完成开发任务，可是自己始终没有完整的搭建过ssm框架，并且对一个<strong>web</strong>项目中所应用的技术没有一个好的认知和总结。因此自己总结了一下，以备以后使用。并希望在以后的学习中，不断完善该文档。</p>\n<a id=\"more\"></a>\n<h1 id=\"技术介绍\"><a href=\"#技术介绍\" class=\"headerlink\" title=\"技术介绍\"></a>技术介绍</h1><p>项目管理：maven</p>\n<p>集成框架：使用轻量级的spring框架</p>\n<p>控制层框架：使用springmvc</p>\n<p>视图模板：thymeleaf</p>\n<p>数据层：使用mybitis3</p>\n<p>日志框架：logback</p>\n<p>数据库连接池：dbcp2</p>\n<p>数据库：mysql</p>\n<h1 id=\"添加spring，springmvc应用\"><a href=\"#添加spring，springmvc应用\" class=\"headerlink\" title=\"添加spring，springmvc应用\"></a>添加spring，springmvc应用</h1><h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.locales</span>&gt;</span>zh_CN<span class=\"tag\">&lt;/<span class=\"name\">project.build.locales</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.jdk</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">project.build.jdk</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugin.maven-compiler</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">plugin.maven-compiler</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>5.0.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- spring --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-oxm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- springmvc --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 可以使用j2ee提供的几个注解比如@resource --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.annotation<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.annotation-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 处理json数据 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.41<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加spring配置\"><a href=\"#添加spring配置\" class=\"headerlink\" title=\"添加spring配置\"></a>添加spring配置</h2><p><code>applicationContext.xml</code> spring的主配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- spring可以自动去扫描base-pack下面或者子包下面的java文件，</span></span><br><span class=\"line\"><span class=\"comment\">\t如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.gaofeng\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>springmvc-servlet.xml</code> springmvc的配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span> <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置文件 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:application.properties\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 扫描控制器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.gaofeng.controller\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 注解映射支持 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- StringHttpMessageConverter 编码为UTF-8，防止乱码 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.StringHttpMessageConverter\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.MediaType\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"text\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"plain\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.MediaType\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"*\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"*\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- FastJson --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>text/html;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>application/json;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fastJsonConfig\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.fastjson.support.config.FastJsonConfig\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"features\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>AllowArbitraryCommas<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>AllowUnQuotedFieldNames<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>DisableCircularReferenceDetect<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dateFormat\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 静态资源的访问，如 js, css, jpg, png --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 如 HTML 里访问 /static/js/foo.js, 则实际访问的是 /WEB-INF/static/js/foo.js --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/static/js/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/WEB-INF/static/js/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">cache-period</span>=<span class=\"string\">\"31556926\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/static/css/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/WEB-INF/static/css/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">cache-period</span>=<span class=\"string\">\"31556926\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/static/img/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/WEB-INF/static/img/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">cache-period</span>=<span class=\"string\">\"31556926\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/static/html/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/WEB-INF/static/html/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">cache-period</span>=<span class=\"string\">\"31556926\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改web-xml配置加载spring配置文件\"><a href=\"#修改web-xml配置加载spring配置文件\" class=\"headerlink\" title=\"修改web.xml配置加载spring配置文件\"></a>修改web.xml配置加载spring配置文件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class=\"line\"><span class=\"meta\"> \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"</span></span><br><span class=\"line\"><span class=\"meta\"> \"http://java.sun.com/dtd/web-app_2_3.dtd\" &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Archetype Created Web Application<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- POST 请求的编码 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>characterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>characterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点: &lt;listener&gt;&lt;/listener&gt; </span></span><br><span class=\"line\"><span class=\"comment\">\t\t和 &lt;context-param&gt;&lt;/context-param&gt; 紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文. </span></span><br><span class=\"line\"><span class=\"comment\">\t\t容器将&lt;context-param&gt;&lt;/context-param&gt;转化为键值对,并交给ServletContext. 容器创建&lt;listener&gt;&lt;/listener&gt;中的类实例,即创建监听. </span></span><br><span class=\"line\"><span class=\"comment\">\t\t这里是把spring主配置文件添加到servlet上下文中 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:applicationContext.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- Bootstraps the root web application context before servlet initialization --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置springmvc核心selvlet--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springDispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springDispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>通过上面的配置，我们已经添加了spring和springmvc框架，来验证一下。</p>\n<h2 id=\"编写各层的bean\"><a href=\"#编写各层的bean\" class=\"headerlink\" title=\"编写各层的bean\"></a>编写各层的bean</h2><p>项目使用多层的设计风格分为控制层，业务逻辑层，数据访问层，视图层；使用接口编程，降低各层的耦合性。</p>\n<p>Person.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String uname;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">\t<span class=\"comment\">//省略setter和getter</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PersonServic.java 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PersonService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Person person)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PersonServiceImpl.java实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.service.PersonService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(value=<span class=\"string\">\"pesonService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">PersonService</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"save peson :\"</span> + person.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>IndexController.java 控制层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.service.PersonService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"pesonService\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> PersonService pservice;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/index\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"欢迎来到spring满汉全席\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/test/add\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addPerson</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tPerson p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t\tp.setId(<span class=\"number\">1L</span>);</span><br><span class=\"line\">\t\tp.setUname(<span class=\"string\">\"张高峰\"</span>);</span><br><span class=\"line\">\t\tp.setEmail(<span class=\"string\">\"gaofeng0527@163.com\"</span>);</span><br><span class=\"line\">\t\tpservice.save(p);</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"您已经成功添加一个用户\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   <code>@Resource</code> 注解会先根据bean的名字去IOC容器中查找bean，如果没有的话才会使用类型匹配。找到后把spring ioc容器创建的bean交给IndexController使用。</p>\n</blockquote>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><blockquote>\n<p>   连接：<a href=\"http://localhost/gaofeng/index\" target=\"_blank\" rel=\"noopener\">http://localhost/gaofeng/index</a></p>\n<p>   页面显示：欢迎来到spring满汉全系</p>\n<p>   连接：<a href=\"http://localhost/gaofeng/test/add\" target=\"_blank\" rel=\"noopener\">http://localhost/gaofeng/test/add</a></p>\n<p>   控制台输出：save peson :Person [id=1, uname=张高峰, <a href=\"mailto:email=gaofeng0527@163.com\" target=\"_blank\" rel=\"noopener\">email=gaofeng0527@163.com</a>]</p>\n<p>   页面显示：您已经成功添加一个用户</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>spring，springmvc添加成功，可以实现依赖注入和控制反转，这也是使用spring的最主要的作用。</p>\n<h1 id=\"添加mybitis\"><a href=\"#添加mybitis\" class=\"headerlink\" title=\"添加mybitis\"></a>添加mybitis</h1><h2 id=\"添加依赖-1\"><a href=\"#添加依赖-1\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><p>因为需要连接数据，所以要添加数据库驱动包；mybitis的包自不用说；现在大部分项目都在使用数据库连接池，因此需要加入数据库连接池的包，这里使用dbcp2。</p>\n<blockquote>\n<p>   在spring中，常使用数据库连接池来完成对数据库的连接配置，类似于线程池的定义，数据库连接池就是维护有一定数量数据库连接的一个缓冲池，一方面，能够即取即用，免去初始化的时间，另一方面，用完的数据连接会归还到连接池中，这样就免去了不必要的连接创建、销毁工作，提升了性能。当然，使用连接池，有一下几点是连接池配置所考虑到的，也属于配置连接池的优点，而这些也会我们后面的实例配置中体现：<br>   1、 如果没有任何一个用户使用连接，那么那么应该维持一定数量的连接，等待用户使用。<br>   2、 如果连接已经满了，则必须打开新的连接，供更多用户使用。<br>   3、 如果一个服务器就只能有100个连接，那么如果有第101个人过来呢？应该等待其他用户释放连接<br>   4、 如果一个用户等待时间太长了，则应该告诉用户，操作是失败的。</p>\n<p>   在spring中，常用的连接池有：jdbc,dbcp,c3p0,JNDI4种，他们有不同的优缺点和适用场景。其中，spring框架推荐使用dbcp，hibernate框架推荐使用c3p0。经测试发现，c3p0与dbcp相比较，c3p0能够更好的支持高并发，但是在稳定性方面略逊于dpcp。 </p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- database --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- DataBase数据库连接 mysql包 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.38<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- mybitis --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加配置\"><a href=\"#添加配置\" class=\"headerlink\" title=\"添加配置\"></a>添加配置</h2><p>为了方便后期维护，把配置分成三部分：</p>\n<ol>\n<li>application.properties 主要用来存储一些系统配置，比如数据库连接信息</li>\n<li>spring-data.xml 主要用来配置数据库连接</li>\n<li>applicationContext.xml spring主配置，把spring-data.xml引入进来</li>\n</ol>\n<p><code>spring-data.xml</code> 数据库连接和mybitis添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置数据源 --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- destroy-method=\"close\" 设置为close使Spring容器关闭同时数据源能够正常关闭，以免造成连接泄露 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp2.BasicDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">value</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/gaofeng?useUnicode=true&amp;amp;characterEncoding=UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"root\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 连接池启动初始连接数 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initialSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 连接池最大连接数 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxTotal\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"100\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 最大空闲值，当经过一个高峰之后，连接池会慢慢的把不用的连接释放，一直减少到maxIdle值为止 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 最小空闲值,当空闲的连接数少于minIdle的值时，连接池会预先申请一部分连接，以防洪峰来时，来不及申请 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 即启用poolPreparedStatements后，PreparedStatements 和CallableStatements </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t都会被缓存起来复用，即相同逻辑的SQL可以复用一个游标，这样可以减少创建游标的数量。 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"poolPreparedStatements\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxOpenPreparedStatements\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 给出一条简单的sql语句进行验证 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"validationQuery\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"select NOW()\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 在取出连接时进行有效验证, 实现如服务器重启后自动重连 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testOnBorrow\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testWhileIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logAbandoned\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"removeAbandonedTimeout\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"120\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"timeBetweenEvictionRunsMillis\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3600000\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 连接的超时时间，默认为半小时 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minEvictableIdleTimeMillis\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3600000\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 2. SQL session factory --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:com/gaofeng/mapper/**/*.xml\"</span> /&gt;</span> </span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 3. Instantiate Mapper --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.gaofeng.mapper\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   <code>org.mybatis.spring.mapper.MapperScannerConfigurer</code> 类会为basePackage包下的所有类作为mybitis的mapper注册到ioc容器中，并创建bean。方便后期自动注入。</p>\n</blockquote>\n<p>修改<code>applicationContext.xml</code>，导入<code>spring-data.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"classpath:spring-data.xml\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- spring可以自动去扫描base-pack下面或者子包下面的java文件，</span></span><br><span class=\"line\"><span class=\"comment\">\t如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.gaofeng\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写mapper接口和配置文件\"><a href=\"#编写mapper接口和配置文件\" class=\"headerlink\" title=\"编写mapper接口和配置文件\"></a>编写mapper接口和配置文件</h2><p>PersonMapper接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.mapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PersonMapper</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">findPersonById</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PersonMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 1.命名空间要和接口全名称一致 </span></span><br><span class=\"line\"><span class=\"comment\">     2.sql语句映射配置的Id要和接口中的方法一致 </span></span><br><span class=\"line\"><span class=\"comment\">     3.查询中如果类属性和数据库表中的字段名称不一致时，可以采用 </span></span><br><span class=\"line\"><span class=\"comment\">\tselect user_name as userName 的形式 </span></span><br><span class=\"line\"><span class=\"comment\">     4.返回类型最好使用类全名，也可以采用别名的形式。 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.gaofeng.mapper.PersonMapper\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findPersonById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.gaofeng.pojo.Person\"</span>&gt;</span></span><br><span class=\"line\">\t\tselect * from person where id = #&#123;id&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数据准备工作\"><a href=\"#数据准备工作\" class=\"headerlink\" title=\"数据准备工作\"></a>数据准备工作</h2><p>创建数据库，创建表，添加测试数据，在这里就不再讲了。</p>\n<h2 id=\"修改之前的service-impl和controller\"><a href=\"#修改之前的service-impl和controller\" class=\"headerlink\" title=\"修改之前的service.impl和controller\"></a>修改之前的service.impl和controller</h2><p>修改PersonService.java，添加findPersonById方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PersonService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Person person)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">findPersonById</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改PersonServiceImpl.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.mapper.PersonMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.service.PersonService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(value=<span class=\"string\">\"pesonService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">PersonService</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 这个地方因为之前在spring-data.xml配置文件中使用</span></span><br><span class=\"line\"><span class=\"comment\">\t * MapperScannerConfigurer 扫描 mapper包，并创建了bean</span></span><br><span class=\"line\"><span class=\"comment\">\t * 因此这里可以自动注入</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> PersonMapper pmapper;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"save peson :\"</span> + person.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">findPersonById</span><span class=\"params\">(Long id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pmapper.findPersonById(id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>IndexController.java，添加<code>/dome/{id}</code>处理方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.service.PersonService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"pesonService\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> PersonService pservice;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/index\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"欢迎来到spring满汉全席\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/test/add\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addPerson</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tPerson p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t\tp.setId(<span class=\"number\">1L</span>);</span><br><span class=\"line\">\t\tp.setUname(<span class=\"string\">\"张高峰\"</span>);</span><br><span class=\"line\">\t\tp.setEmail(<span class=\"string\">\"gaofeng0527@163.com\"</span>);</span><br><span class=\"line\">\t\tpservice.save(p);</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"您已经成功添加一个用户\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/dome/&#123;id&#125;\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">findPerson</span><span class=\"params\">(@PathVariable(value = <span class=\"string\">\"id\"</span>)</span> Long id) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pservice.findPersonById(id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><blockquote>\n<p>   访问连接：<a href=\"http://localhost/gaofeng/dome/1\" target=\"_blank\" rel=\"noopener\">http://localhost/gaofeng/dome/1</a></p>\n<p>   页面显示：{“email”:”<a href=\"mailto:gaofeng0527@163.com\" target=\"_blank\" rel=\"noopener\">gaofeng0527@163.com</a>“,”id”:1,”uname”:”张高峰”}</p>\n<p>   控制台：输出sql语句</p>\n</blockquote>\n<p>自此，三大框架集成完毕。</p>\n<h1 id=\"集成logback日志框架\"><a href=\"#集成logback日志框架\" class=\"headerlink\" title=\"集成logback日志框架\"></a>集成logback日志框架</h1><p>之前已经写过这个了，把连接贴下面，以供参考吧</p>\n<p><a href=\"https://gaofeng0527.github.io/logback/\" target=\"_blank\" rel=\"noopener\">集成logback日志框架</a></p>\n<h1 id=\"使用thymeleaf作为前端模版\"><a href=\"#使用thymeleaf作为前端模版\" class=\"headerlink\" title=\"使用thymeleaf作为前端模版\"></a>使用thymeleaf作为前端模版</h1><p>这个之前也写过了</p>\n<p><a href=\"https://gaofeng0527.github.io/thymeleaf/\" target=\"_blank\" rel=\"noopener\">springmvc集成thymeleaf</a></p>\n<h1 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>web开发，这些都是基础，在开发过程中还会遇到很多问题，希望以后没遇到一个问题，自己都能记录下来。每天让自己进步一点。哎，有些后悔之前几年蹉跎了岁月。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>平时做项目都是在前人搭建好的项目上进行开发，虽然对框架有了一定的了解，能完成开发任务，可是自己始终没有完整的搭建过ssm框架，并且对一个<strong>web</strong>项目中所应用的技术没有一个好的认知和总结。因此自己总结了一下，以备以后使用。并希望在以后的学习中，不断完善该文档。</p>","more":"<h1 id=\"技术介绍\"><a href=\"#技术介绍\" class=\"headerlink\" title=\"技术介绍\"></a>技术介绍</h1><p>项目管理：maven</p>\n<p>集成框架：使用轻量级的spring框架</p>\n<p>控制层框架：使用springmvc</p>\n<p>视图模板：thymeleaf</p>\n<p>数据层：使用mybitis3</p>\n<p>日志框架：logback</p>\n<p>数据库连接池：dbcp2</p>\n<p>数据库：mysql</p>\n<h1 id=\"添加spring，springmvc应用\"><a href=\"#添加spring，springmvc应用\" class=\"headerlink\" title=\"添加spring，springmvc应用\"></a>添加spring，springmvc应用</h1><h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.locales</span>&gt;</span>zh_CN<span class=\"tag\">&lt;/<span class=\"name\">project.build.locales</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.jdk</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">project.build.jdk</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugin.maven-compiler</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">plugin.maven-compiler</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">spring.version</span>&gt;</span>5.0.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">spring.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- spring --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-oxm<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-tx<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- springmvc --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;spring.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 可以使用j2ee提供的几个注解比如@resource --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.annotation<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>javax.annotation-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 处理json数据 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.41<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加spring配置\"><a href=\"#添加spring配置\" class=\"headerlink\" title=\"添加spring配置\"></a>添加spring配置</h2><p><code>applicationContext.xml</code> spring的主配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- spring可以自动去扫描base-pack下面或者子包下面的java文件，</span></span><br><span class=\"line\"><span class=\"comment\">\t如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.gaofeng\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>springmvc-servlet.xml</code> springmvc的配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span> <span class=\"attr\">xmlns:tx</span>=<span class=\"string\">\"http://www.springframework.org/schema/tx\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置文件 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:application.properties\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 扫描控制器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.gaofeng.controller\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 注解映射支持 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- StringHttpMessageConverter 编码为UTF-8，防止乱码 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.StringHttpMessageConverter\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.MediaType\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"text\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"plain\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.MediaType\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"*\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"*\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- FastJson --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>text/html;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>application/json;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fastJsonConfig\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.fastjson.support.config.FastJsonConfig\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"features\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>AllowArbitraryCommas<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>AllowUnQuotedFieldNames<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>DisableCircularReferenceDetect<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dateFormat\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 静态资源的访问，如 js, css, jpg, png --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 如 HTML 里访问 /static/js/foo.js, 则实际访问的是 /WEB-INF/static/js/foo.js --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/static/js/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/WEB-INF/static/js/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">cache-period</span>=<span class=\"string\">\"31556926\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/static/css/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/WEB-INF/static/css/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">cache-period</span>=<span class=\"string\">\"31556926\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/static/img/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/WEB-INF/static/img/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">cache-period</span>=<span class=\"string\">\"31556926\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/static/html/**\"</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/WEB-INF/static/html/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">cache-period</span>=<span class=\"string\">\"31556926\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改web-xml配置加载spring配置文件\"><a href=\"#修改web-xml配置加载spring配置文件\" class=\"headerlink\" title=\"修改web.xml配置加载spring配置文件\"></a>修改web.xml配置加载spring配置文件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class=\"line\"><span class=\"meta\"> \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\"</span></span><br><span class=\"line\"><span class=\"meta\"> \"http://java.sun.com/dtd/web-app_2_3.dtd\" &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">web-app</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">display-name</span>&gt;</span>Archetype Created Web Application<span class=\"tag\">&lt;/<span class=\"name\">display-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- POST 请求的编码 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>characterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>encoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>forceEncoding<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>characterEncodingFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点: &lt;listener&gt;&lt;/listener&gt; </span></span><br><span class=\"line\"><span class=\"comment\">\t\t和 &lt;context-param&gt;&lt;/context-param&gt; 紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文. </span></span><br><span class=\"line\"><span class=\"comment\">\t\t容器将&lt;context-param&gt;&lt;/context-param&gt;转化为键值对,并交给ServletContext. 容器创建&lt;listener&gt;&lt;/listener&gt;中的类实例,即创建监听. </span></span><br><span class=\"line\"><span class=\"comment\">\t\t这里是把spring主配置文件添加到servlet上下文中 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:applicationContext.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- Bootstraps the root web application context before servlet initialization --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置springmvc核心selvlet--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springDispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springDispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>通过上面的配置，我们已经添加了spring和springmvc框架，来验证一下。</p>\n<h2 id=\"编写各层的bean\"><a href=\"#编写各层的bean\" class=\"headerlink\" title=\"编写各层的bean\"></a>编写各层的bean</h2><p>项目使用多层的设计风格分为控制层，业务逻辑层，数据访问层，视图层；使用接口编程，降低各层的耦合性。</p>\n<p>Person.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String uname;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">\t<span class=\"comment\">//省略setter和getter</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PersonServic.java 接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PersonService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Person person)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PersonServiceImpl.java实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.service.PersonService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(value=<span class=\"string\">\"pesonService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">PersonService</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"save peson :\"</span> + person.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>IndexController.java 控制层</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.service.PersonService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"pesonService\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> PersonService pservice;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/index\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"欢迎来到spring满汉全席\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/test/add\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addPerson</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tPerson p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t\tp.setId(<span class=\"number\">1L</span>);</span><br><span class=\"line\">\t\tp.setUname(<span class=\"string\">\"张高峰\"</span>);</span><br><span class=\"line\">\t\tp.setEmail(<span class=\"string\">\"gaofeng0527@163.com\"</span>);</span><br><span class=\"line\">\t\tpservice.save(p);</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"您已经成功添加一个用户\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   <code>@Resource</code> 注解会先根据bean的名字去IOC容器中查找bean，如果没有的话才会使用类型匹配。找到后把spring ioc容器创建的bean交给IndexController使用。</p>\n</blockquote>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><blockquote>\n<p>   连接：<a href=\"http://localhost/gaofeng/index\" target=\"_blank\" rel=\"noopener\">http://localhost/gaofeng/index</a></p>\n<p>   页面显示：欢迎来到spring满汉全系</p>\n<p>   连接：<a href=\"http://localhost/gaofeng/test/add\" target=\"_blank\" rel=\"noopener\">http://localhost/gaofeng/test/add</a></p>\n<p>   控制台输出：save peson :Person [id=1, uname=张高峰, <a href=\"mailto:email=gaofeng0527@163.com\" target=\"_blank\" rel=\"noopener\">email=gaofeng0527@163.com</a>]</p>\n<p>   页面显示：您已经成功添加一个用户</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>spring，springmvc添加成功，可以实现依赖注入和控制反转，这也是使用spring的最主要的作用。</p>\n<h1 id=\"添加mybitis\"><a href=\"#添加mybitis\" class=\"headerlink\" title=\"添加mybitis\"></a>添加mybitis</h1><h2 id=\"添加依赖-1\"><a href=\"#添加依赖-1\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><p>因为需要连接数据，所以要添加数据库驱动包；mybitis的包自不用说；现在大部分项目都在使用数据库连接池，因此需要加入数据库连接池的包，这里使用dbcp2。</p>\n<blockquote>\n<p>   在spring中，常使用数据库连接池来完成对数据库的连接配置，类似于线程池的定义，数据库连接池就是维护有一定数量数据库连接的一个缓冲池，一方面，能够即取即用，免去初始化的时间，另一方面，用完的数据连接会归还到连接池中，这样就免去了不必要的连接创建、销毁工作，提升了性能。当然，使用连接池，有一下几点是连接池配置所考虑到的，也属于配置连接池的优点，而这些也会我们后面的实例配置中体现：<br>   1、 如果没有任何一个用户使用连接，那么那么应该维持一定数量的连接，等待用户使用。<br>   2、 如果连接已经满了，则必须打开新的连接，供更多用户使用。<br>   3、 如果一个服务器就只能有100个连接，那么如果有第101个人过来呢？应该等待其他用户释放连接<br>   4、 如果一个用户等待时间太长了，则应该告诉用户，操作是失败的。</p>\n<p>   在spring中，常用的连接池有：jdbc,dbcp,c3p0,JNDI4种，他们有不同的优缺点和适用场景。其中，spring框架推荐使用dbcp，hibernate框架推荐使用c3p0。经测试发现，c3p0与dbcp相比较，c3p0能够更好的支持高并发，但是在稳定性方面略逊于dpcp。 </p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- database --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.commons<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>commons-dbcp2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- DataBase数据库连接 mysql包 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.38<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- mybitis --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加配置\"><a href=\"#添加配置\" class=\"headerlink\" title=\"添加配置\"></a>添加配置</h2><p>为了方便后期维护，把配置分成三部分：</p>\n<ol>\n<li>application.properties 主要用来存储一些系统配置，比如数据库连接信息</li>\n<li>spring-data.xml 主要用来配置数据库连接</li>\n<li>applicationContext.xml spring主配置，把spring-data.xml引入进来</li>\n</ol>\n<p><code>spring-data.xml</code> 数据库连接和mybitis添加</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置数据源 --&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- destroy-method=\"close\" 设置为close使Spring容器关闭同时数据源能够正常关闭，以免造成连接泄露 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.apache.commons.dbcp2.BasicDataSource\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">destroy-method</span>=<span class=\"string\">\"close\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.mysql.jdbc.Driver\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">value</span>=<span class=\"string\">\"jdbc:mysql://localhost:3306/gaofeng?useUnicode=true&amp;amp;characterEncoding=UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"root\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 连接池启动初始连接数 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"initialSize\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 连接池最大连接数 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxTotal\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"100\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 最大空闲值，当经过一个高峰之后，连接池会慢慢的把不用的连接释放，一直减少到maxIdle值为止 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"50\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 最小空闲值,当空闲的连接数少于minIdle的值时，连接池会预先申请一部分连接，以防洪峰来时，来不及申请 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"5\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 即启用poolPreparedStatements后，PreparedStatements 和CallableStatements </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t都会被缓存起来复用，即相同逻辑的SQL可以复用一个游标，这样可以减少创建游标的数量。 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"poolPreparedStatements\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"maxOpenPreparedStatements\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"10\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 给出一条简单的sql语句进行验证 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"validationQuery\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"select NOW()\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 在取出连接时进行有效验证, 实现如服务器重启后自动重连 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testOnBorrow\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"testWhileIdle\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"logAbandoned\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"removeAbandonedTimeout\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"120\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 运行判断连接超时任务的时间间隔，单位为毫秒，默认为-1，即不执行任务 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"timeBetweenEvictionRunsMillis\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3600000\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 连接的超时时间，默认为半小时 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"minEvictableIdleTimeMillis\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3600000\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 2. SQL session factory --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:com/gaofeng/mapper/**/*.xml\"</span> /&gt;</span> </span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 3. Instantiate Mapper --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"com.gaofeng.mapper\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   <code>org.mybatis.spring.mapper.MapperScannerConfigurer</code> 类会为basePackage包下的所有类作为mybitis的mapper注册到ioc容器中，并创建bean。方便后期自动注入。</p>\n</blockquote>\n<p>修改<code>applicationContext.xml</code>，导入<code>spring-data.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">import</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"classpath:spring-data.xml\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- spring可以自动去扫描base-pack下面或者子包下面的java文件，</span></span><br><span class=\"line\"><span class=\"comment\">\t如果扫描到有@Component @Controller@Service等这些注解的类，则把这些类注册为bean --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.gaofeng\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写mapper接口和配置文件\"><a href=\"#编写mapper接口和配置文件\" class=\"headerlink\" title=\"编写mapper接口和配置文件\"></a>编写mapper接口和配置文件</h2><p>PersonMapper接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.mapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PersonMapper</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">findPersonById</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>PersonMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 1.命名空间要和接口全名称一致 </span></span><br><span class=\"line\"><span class=\"comment\">     2.sql语句映射配置的Id要和接口中的方法一致 </span></span><br><span class=\"line\"><span class=\"comment\">     3.查询中如果类属性和数据库表中的字段名称不一致时，可以采用 </span></span><br><span class=\"line\"><span class=\"comment\">\tselect user_name as userName 的形式 </span></span><br><span class=\"line\"><span class=\"comment\">     4.返回类型最好使用类全名，也可以采用别名的形式。 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.gaofeng.mapper.PersonMapper\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"findPersonById\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.gaofeng.pojo.Person\"</span>&gt;</span></span><br><span class=\"line\">\t\tselect * from person where id = #&#123;id&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"数据准备工作\"><a href=\"#数据准备工作\" class=\"headerlink\" title=\"数据准备工作\"></a>数据准备工作</h2><p>创建数据库，创建表，添加测试数据，在这里就不再讲了。</p>\n<h2 id=\"修改之前的service-impl和controller\"><a href=\"#修改之前的service-impl和controller\" class=\"headerlink\" title=\"修改之前的service.impl和controller\"></a>修改之前的service.impl和controller</h2><p>修改PersonService.java，添加findPersonById方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">PersonService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Person person)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">findPersonById</span><span class=\"params\">(Long id)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改PersonServiceImpl.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.mapper.PersonMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.service.PersonService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span>(value=<span class=\"string\">\"pesonService\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">PersonService</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 这个地方因为之前在spring-data.xml配置文件中使用</span></span><br><span class=\"line\"><span class=\"comment\">\t * MapperScannerConfigurer 扫描 mapper包，并创建了bean</span></span><br><span class=\"line\"><span class=\"comment\">\t * 因此这里可以自动注入</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> PersonMapper pmapper;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(Person person)</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">\"save peson :\"</span> + person.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">findPersonById</span><span class=\"params\">(Long id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pmapper.findPersonById(id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>IndexController.java，添加<code>/dome/{id}</code>处理方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.annotation.Resource;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Person;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.service.PersonService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IndexController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Resource</span>(name = <span class=\"string\">\"pesonService\"</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> PersonService pservice;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/index\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"欢迎来到spring满汉全席\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/test/add\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">addPerson</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tPerson p = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">\t\tp.setId(<span class=\"number\">1L</span>);</span><br><span class=\"line\">\t\tp.setUname(<span class=\"string\">\"张高峰\"</span>);</span><br><span class=\"line\">\t\tp.setEmail(<span class=\"string\">\"gaofeng0527@163.com\"</span>);</span><br><span class=\"line\">\t\tpservice.save(p);</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"您已经成功添加一个用户\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/dome/&#123;id&#125;\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Person <span class=\"title\">findPerson</span><span class=\"params\">(@PathVariable(value = <span class=\"string\">\"id\"</span>)</span> Long id) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pservice.findPersonById(id);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><blockquote>\n<p>   访问连接：<a href=\"http://localhost/gaofeng/dome/1\" target=\"_blank\" rel=\"noopener\">http://localhost/gaofeng/dome/1</a></p>\n<p>   页面显示：{“email”:”<a href=\"mailto:gaofeng0527@163.com\" target=\"_blank\" rel=\"noopener\">gaofeng0527@163.com</a>“,”id”:1,”uname”:”张高峰”}</p>\n<p>   控制台：输出sql语句</p>\n</blockquote>\n<p>自此，三大框架集成完毕。</p>\n<h1 id=\"集成logback日志框架\"><a href=\"#集成logback日志框架\" class=\"headerlink\" title=\"集成logback日志框架\"></a>集成logback日志框架</h1><p>之前已经写过这个了，把连接贴下面，以供参考吧</p>\n<p><a href=\"https://gaofeng0527.github.io/logback/\" target=\"_blank\" rel=\"noopener\">集成logback日志框架</a></p>\n<h1 id=\"使用thymeleaf作为前端模版\"><a href=\"#使用thymeleaf作为前端模版\" class=\"headerlink\" title=\"使用thymeleaf作为前端模版\"></a>使用thymeleaf作为前端模版</h1><p>这个之前也写过了</p>\n<p><a href=\"https://gaofeng0527.github.io/thymeleaf/\" target=\"_blank\" rel=\"noopener\">springmvc集成thymeleaf</a></p>\n<h1 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>web开发，这些都是基础，在开发过程中还会遇到很多问题，希望以后没遇到一个问题，自己都能记录下来。每天让自己进步一点。哎，有些后悔之前几年蹉跎了岁月。</p>"},{"title":"map-top","date":"2018-07-10T01:07:12.000Z","_content":"\n# 编写类对象\n\n板块类\n\n```java\npackage example.spring.beans;\n\n/**\n * 板块类\n */\npublic class Kind {\n\n    private int kindId;//板块id\n    private String kindName;//板块名称\n\n    public Kind(){ }\n    public Kind(int kindId, String kindName) {\n        this.kindId = kindId;\n        this.kindName = kindName;\n    }\n    public int getKindId() {\n        return kindId;\n    }\n\n    public void setKindId(int kindId) {\n        this.kindId = kindId;\n    }\n\n    public String getKindName() {\n        return kindName;\n    }\n\n    public void setKindName(String kindName) {\n        this.kindName = kindName;\n    }\n}\n```\n\n<!-- more -->\n\n主贴类\n\n```java\npackage example.spring.beans;\n\n/**\n * 主贴类\n */\npublic class Topic {\n\n    private int topId;//主贴id\n    private String title;//主贴标题\n    private int kindId;//板块id\n\n    public int getTopId() {\n        return topId;\n    }\n    public void setTopId(int topId) {\n        this.topId = topId;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public void setTitle(String title) {\n        this.title = title;\n    }\n    public int getKindId() {\n        return kindId;\n    }\n    public void setKindId(int kindId) {\n        this.kindId = kindId;\n    }\n\n    public Topic() {\n    }\n\n    public Topic(int topId, String title, int kindId) {\n        this.topId = topId;\n        this.title = title;\n        this.kindId = kindId;\n    }\n}\n\n```\n\n# 编写service\n\n```java\npackage example.spring.service;\n\nimport example.spring.beans.Kind;\nimport example.spring.beans.Topic;\n\nimport java.util.*;\n\npublic class TopicService {\n\n\n    /**\n     * 获取所有板块，以及板块下的所有主贴\n     * 数据我就模拟了，不连接数据库了\n     * @return\n     */\n    public Map<String,List<Topic>> findAllTopic(){\n        //1.获取所有板块\n        List<Kind> klist = this.findAllKind();\n\n        //2.声明一个map用来存储最终结果集\n        Map<String,List<Topic>> map = new HashMap<>();\n\n        //3.循环所有板块，根据板块Id获取所有该板块下的主贴\n        for(Kind kind :klist){\n            // 根据板块的Id查询主贴\n            List<Topic> tlist = this.findTopicByKindId(kind.getKindId());\n            //已板块名称作为key，主贴集合作为value\n            map.put(kind.getKindName(),tlist);\n        }\n        return map;\n    }\n\n    /**\n     * 模拟主贴表\n     * @param kindId\n     * @return\n     */\n    public List<Topic> findTopicByKindId(int kindId){\n        List<Topic> tlist = new ArrayList<>();\n        if(kindId == 1){\n            tlist.add(new Topic(1,\"java开发基础\",1));\n            tlist.add(new Topic(2,\"java.IO使用手册\",1));\n            tlist.add(new Topic(3,\"javaWEB开发\",1));\n        }else if(kindId == 2){\n            tlist.add(new Topic(4,\".net开发基础\",2));\n            tlist.add(new Topic(5,\"ASP使用手册\",2));\n        }else if(kindId == 3){\n            tlist.add(new Topic(6,\"android sdk 帮助手册\",3));\n            tlist.add(new Topic(7,\"android适配宝典\",3));\n            tlist.add(new Topic(8,\"android监听器的使用\",3));\n        }\n\n        return tlist;\n    }\n\n\n    /**\n     * 获取所有板块\n     * @return\n     */\n    public List<Kind> findAllKind(){\n        List<Kind> klist = new ArrayList<>();\n        klist.add(new Kind(1,\"java开发\"));\n        klist.add(new Kind(2,\".net开发\"));\n        klist.add(new Kind(3,\"android开发\"));\n        return klist;\n    }\n\n\n    /**\n     * 测试\n     * @param args\n     */\n    public static void main(String[] args) {\n        TopicService ts = new TopicService();\n        Map<String,List<Topic>> map = ts.findAllTopic();\n        Set<String> sets = map.keySet();\n        for(String str : sets){\n            List<Topic> tlist = map.get(str);\n            System.out.println(str+\"------------------\");\n            for (Topic top : tlist){\n                System.out.println(\"    \"+top.getTopId()+\"    \"+top.getTitle()+\"    \");\n            }\n            System.out.println(\"==============================================\");\n        }\n    }\n}\n\n```\n\n# 测试结果\n\n>    android开发------------------\n>\n>        6    android sdk 帮助手册    \n>        7    android适配宝典    \n>        8    android监听器的使用    \n>    ==============================================\n>    java开发------------------\n>        1    java开发基础    \n>        2    java.IO使用手册    \n>        3    javaWEB开发    \n>    ==============================================\n>    .net开发------------------\n>        4    .net开发基础    \n>        5    ASP使用手册    \n>    ==============================================","source":"_posts/map-top.md","raw":"---\ntitle: map-top\ndate: 2018-07-10 09:07:12\ntags: [test]\n---\n\n# 编写类对象\n\n板块类\n\n```java\npackage example.spring.beans;\n\n/**\n * 板块类\n */\npublic class Kind {\n\n    private int kindId;//板块id\n    private String kindName;//板块名称\n\n    public Kind(){ }\n    public Kind(int kindId, String kindName) {\n        this.kindId = kindId;\n        this.kindName = kindName;\n    }\n    public int getKindId() {\n        return kindId;\n    }\n\n    public void setKindId(int kindId) {\n        this.kindId = kindId;\n    }\n\n    public String getKindName() {\n        return kindName;\n    }\n\n    public void setKindName(String kindName) {\n        this.kindName = kindName;\n    }\n}\n```\n\n<!-- more -->\n\n主贴类\n\n```java\npackage example.spring.beans;\n\n/**\n * 主贴类\n */\npublic class Topic {\n\n    private int topId;//主贴id\n    private String title;//主贴标题\n    private int kindId;//板块id\n\n    public int getTopId() {\n        return topId;\n    }\n    public void setTopId(int topId) {\n        this.topId = topId;\n    }\n    public String getTitle() {\n        return title;\n    }\n    public void setTitle(String title) {\n        this.title = title;\n    }\n    public int getKindId() {\n        return kindId;\n    }\n    public void setKindId(int kindId) {\n        this.kindId = kindId;\n    }\n\n    public Topic() {\n    }\n\n    public Topic(int topId, String title, int kindId) {\n        this.topId = topId;\n        this.title = title;\n        this.kindId = kindId;\n    }\n}\n\n```\n\n# 编写service\n\n```java\npackage example.spring.service;\n\nimport example.spring.beans.Kind;\nimport example.spring.beans.Topic;\n\nimport java.util.*;\n\npublic class TopicService {\n\n\n    /**\n     * 获取所有板块，以及板块下的所有主贴\n     * 数据我就模拟了，不连接数据库了\n     * @return\n     */\n    public Map<String,List<Topic>> findAllTopic(){\n        //1.获取所有板块\n        List<Kind> klist = this.findAllKind();\n\n        //2.声明一个map用来存储最终结果集\n        Map<String,List<Topic>> map = new HashMap<>();\n\n        //3.循环所有板块，根据板块Id获取所有该板块下的主贴\n        for(Kind kind :klist){\n            // 根据板块的Id查询主贴\n            List<Topic> tlist = this.findTopicByKindId(kind.getKindId());\n            //已板块名称作为key，主贴集合作为value\n            map.put(kind.getKindName(),tlist);\n        }\n        return map;\n    }\n\n    /**\n     * 模拟主贴表\n     * @param kindId\n     * @return\n     */\n    public List<Topic> findTopicByKindId(int kindId){\n        List<Topic> tlist = new ArrayList<>();\n        if(kindId == 1){\n            tlist.add(new Topic(1,\"java开发基础\",1));\n            tlist.add(new Topic(2,\"java.IO使用手册\",1));\n            tlist.add(new Topic(3,\"javaWEB开发\",1));\n        }else if(kindId == 2){\n            tlist.add(new Topic(4,\".net开发基础\",2));\n            tlist.add(new Topic(5,\"ASP使用手册\",2));\n        }else if(kindId == 3){\n            tlist.add(new Topic(6,\"android sdk 帮助手册\",3));\n            tlist.add(new Topic(7,\"android适配宝典\",3));\n            tlist.add(new Topic(8,\"android监听器的使用\",3));\n        }\n\n        return tlist;\n    }\n\n\n    /**\n     * 获取所有板块\n     * @return\n     */\n    public List<Kind> findAllKind(){\n        List<Kind> klist = new ArrayList<>();\n        klist.add(new Kind(1,\"java开发\"));\n        klist.add(new Kind(2,\".net开发\"));\n        klist.add(new Kind(3,\"android开发\"));\n        return klist;\n    }\n\n\n    /**\n     * 测试\n     * @param args\n     */\n    public static void main(String[] args) {\n        TopicService ts = new TopicService();\n        Map<String,List<Topic>> map = ts.findAllTopic();\n        Set<String> sets = map.keySet();\n        for(String str : sets){\n            List<Topic> tlist = map.get(str);\n            System.out.println(str+\"------------------\");\n            for (Topic top : tlist){\n                System.out.println(\"    \"+top.getTopId()+\"    \"+top.getTitle()+\"    \");\n            }\n            System.out.println(\"==============================================\");\n        }\n    }\n}\n\n```\n\n# 测试结果\n\n>    android开发------------------\n>\n>        6    android sdk 帮助手册    \n>        7    android适配宝典    \n>        8    android监听器的使用    \n>    ==============================================\n>    java开发------------------\n>        1    java开发基础    \n>        2    java.IO使用手册    \n>        3    javaWEB开发    \n>    ==============================================\n>    .net开发------------------\n>        4    .net开发基础    \n>        5    ASP使用手册    \n>    ==============================================","slug":"map-top","published":1,"updated":"2022-11-24T13:38:45.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1ej000m4ovk6ejmf18q","content":"<h1 id=\"编写类对象\"><a href=\"#编写类对象\" class=\"headerlink\" title=\"编写类对象\"></a>编写类对象</h1><p>板块类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.beans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 板块类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Kind</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> kindId;<span class=\"comment\">//板块id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String kindName;<span class=\"comment\">//板块名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Kind</span><span class=\"params\">()</span></span>&#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Kind</span><span class=\"params\">(<span class=\"keyword\">int</span> kindId, String kindName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.kindId = kindId;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.kindName = kindName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getKindId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> kindId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setKindId</span><span class=\"params\">(<span class=\"keyword\">int</span> kindId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.kindId = kindId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getKindName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> kindName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setKindName</span><span class=\"params\">(String kindName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.kindName = kindName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>主贴类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.beans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 主贴类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Topic</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> topId;<span class=\"comment\">//主贴id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;<span class=\"comment\">//主贴标题</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> kindId;<span class=\"comment\">//板块id</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getTopId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> topId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTopId</span><span class=\"params\">(<span class=\"keyword\">int</span> topId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.topId = topId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getKindId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> kindId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setKindId</span><span class=\"params\">(<span class=\"keyword\">int</span> kindId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.kindId = kindId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Topic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Topic</span><span class=\"params\">(<span class=\"keyword\">int</span> topId, String title, <span class=\"keyword\">int</span> kindId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.topId = topId;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.kindId = kindId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"编写service\"><a href=\"#编写service\" class=\"headerlink\" title=\"编写service\"></a>编写service</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Kind;</span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有板块，以及板块下的所有主贴</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据我就模拟了，不连接数据库了</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String,List&lt;Topic&gt;&gt; findAllTopic()&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.获取所有板块</span></span><br><span class=\"line\">        List&lt;Kind&gt; klist = <span class=\"keyword\">this</span>.findAllKind();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.声明一个map用来存储最终结果集</span></span><br><span class=\"line\">        Map&lt;String,List&lt;Topic&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.循环所有板块，根据板块Id获取所有该板块下的主贴</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Kind kind :klist)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据板块的Id查询主贴</span></span><br><span class=\"line\">            List&lt;Topic&gt; tlist = <span class=\"keyword\">this</span>.findTopicByKindId(kind.getKindId());</span><br><span class=\"line\">            <span class=\"comment\">//已板块名称作为key，主贴集合作为value</span></span><br><span class=\"line\">            map.put(kind.getKindName(),tlist);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 模拟主贴表</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> kindId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Topic&gt; <span class=\"title\">findTopicByKindId</span><span class=\"params\">(<span class=\"keyword\">int</span> kindId)</span></span>&#123;</span><br><span class=\"line\">        List&lt;Topic&gt; tlist = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(kindId == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">1</span>,<span class=\"string\">\"java开发基础\"</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">2</span>,<span class=\"string\">\"java.IO使用手册\"</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">3</span>,<span class=\"string\">\"javaWEB开发\"</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(kindId == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">4</span>,<span class=\"string\">\".net开发基础\"</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">5</span>,<span class=\"string\">\"ASP使用手册\"</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(kindId == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">6</span>,<span class=\"string\">\"android sdk 帮助手册\"</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">7</span>,<span class=\"string\">\"android适配宝典\"</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">8</span>,<span class=\"string\">\"android监听器的使用\"</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tlist;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有板块</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Kind&gt; <span class=\"title\">findAllKind</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;Kind&gt; klist = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        klist.add(<span class=\"keyword\">new</span> Kind(<span class=\"number\">1</span>,<span class=\"string\">\"java开发\"</span>));</span><br><span class=\"line\">        klist.add(<span class=\"keyword\">new</span> Kind(<span class=\"number\">2</span>,<span class=\"string\">\".net开发\"</span>));</span><br><span class=\"line\">        klist.add(<span class=\"keyword\">new</span> Kind(<span class=\"number\">3</span>,<span class=\"string\">\"android开发\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> klist;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TopicService ts = <span class=\"keyword\">new</span> TopicService();</span><br><span class=\"line\">        Map&lt;String,List&lt;Topic&gt;&gt; map = ts.findAllTopic();</span><br><span class=\"line\">        Set&lt;String&gt; sets = map.keySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String str : sets)&#123;</span><br><span class=\"line\">            List&lt;Topic&gt; tlist = map.get(str);</span><br><span class=\"line\">            System.out.println(str+<span class=\"string\">\"------------------\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Topic top : tlist)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"    \"</span>+top.getTopId()+<span class=\"string\">\"    \"</span>+top.getTitle()+<span class=\"string\">\"    \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"==============================================\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h1><blockquote>\n<p>   android开发——————</p>\n<pre><code>6    android sdk 帮助手册    \n7    android适配宝典    \n8    android监听器的使用    \n</code></pre><p>   ==============================================<br>   java开发——————<br>       1    java开发基础<br>       2    java.IO使用手册    </p>\n<pre><code>3    javaWEB开发    \n</code></pre><p>   ==============================================<br>   .net开发——————<br>       4    .net开发基础    </p>\n<pre><code>5    ASP使用手册    \n</code></pre><p>   ==============================================</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"编写类对象\"><a href=\"#编写类对象\" class=\"headerlink\" title=\"编写类对象\"></a>编写类对象</h1><p>板块类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.beans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 板块类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Kind</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> kindId;<span class=\"comment\">//板块id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String kindName;<span class=\"comment\">//板块名称</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Kind</span><span class=\"params\">()</span></span>&#123; &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Kind</span><span class=\"params\">(<span class=\"keyword\">int</span> kindId, String kindName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.kindId = kindId;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.kindName = kindName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getKindId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> kindId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setKindId</span><span class=\"params\">(<span class=\"keyword\">int</span> kindId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.kindId = kindId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getKindName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> kindName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setKindName</span><span class=\"params\">(String kindName)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.kindName = kindName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>主贴类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.beans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 主贴类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Topic</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> topId;<span class=\"comment\">//主贴id</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String title;<span class=\"comment\">//主贴标题</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> kindId;<span class=\"comment\">//板块id</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getTopId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> topId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTopId</span><span class=\"params\">(<span class=\"keyword\">int</span> topId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.topId = topId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getTitle</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTitle</span><span class=\"params\">(String title)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getKindId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> kindId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setKindId</span><span class=\"params\">(<span class=\"keyword\">int</span> kindId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.kindId = kindId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Topic</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Topic</span><span class=\"params\">(<span class=\"keyword\">int</span> topId, String title, <span class=\"keyword\">int</span> kindId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.topId = topId;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.title = title;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.kindId = kindId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"编写service\"><a href=\"#编写service\" class=\"headerlink\" title=\"编写service\"></a>编写service</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Kind;</span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Topic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TopicService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有板块，以及板块下的所有主贴</span></span><br><span class=\"line\"><span class=\"comment\">     * 数据我就模拟了，不连接数据库了</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String,List&lt;Topic&gt;&gt; findAllTopic()&#123;</span><br><span class=\"line\">        <span class=\"comment\">//1.获取所有板块</span></span><br><span class=\"line\">        List&lt;Kind&gt; klist = <span class=\"keyword\">this</span>.findAllKind();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//2.声明一个map用来存储最终结果集</span></span><br><span class=\"line\">        Map&lt;String,List&lt;Topic&gt;&gt; map = <span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3.循环所有板块，根据板块Id获取所有该板块下的主贴</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Kind kind :klist)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 根据板块的Id查询主贴</span></span><br><span class=\"line\">            List&lt;Topic&gt; tlist = <span class=\"keyword\">this</span>.findTopicByKindId(kind.getKindId());</span><br><span class=\"line\">            <span class=\"comment\">//已板块名称作为key，主贴集合作为value</span></span><br><span class=\"line\">            map.put(kind.getKindName(),tlist);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 模拟主贴表</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> kindId</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Topic&gt; <span class=\"title\">findTopicByKindId</span><span class=\"params\">(<span class=\"keyword\">int</span> kindId)</span></span>&#123;</span><br><span class=\"line\">        List&lt;Topic&gt; tlist = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(kindId == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">1</span>,<span class=\"string\">\"java开发基础\"</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">2</span>,<span class=\"string\">\"java.IO使用手册\"</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">3</span>,<span class=\"string\">\"javaWEB开发\"</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(kindId == <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">4</span>,<span class=\"string\">\".net开发基础\"</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">5</span>,<span class=\"string\">\"ASP使用手册\"</span>,<span class=\"number\">2</span>));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(kindId == <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">6</span>,<span class=\"string\">\"android sdk 帮助手册\"</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">7</span>,<span class=\"string\">\"android适配宝典\"</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">            tlist.add(<span class=\"keyword\">new</span> Topic(<span class=\"number\">8</span>,<span class=\"string\">\"android监听器的使用\"</span>,<span class=\"number\">3</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> tlist;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有板块</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Kind&gt; <span class=\"title\">findAllKind</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        List&lt;Kind&gt; klist = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        klist.add(<span class=\"keyword\">new</span> Kind(<span class=\"number\">1</span>,<span class=\"string\">\"java开发\"</span>));</span><br><span class=\"line\">        klist.add(<span class=\"keyword\">new</span> Kind(<span class=\"number\">2</span>,<span class=\"string\">\".net开发\"</span>));</span><br><span class=\"line\">        klist.add(<span class=\"keyword\">new</span> Kind(<span class=\"number\">3</span>,<span class=\"string\">\"android开发\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> klist;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 测试</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> args</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TopicService ts = <span class=\"keyword\">new</span> TopicService();</span><br><span class=\"line\">        Map&lt;String,List&lt;Topic&gt;&gt; map = ts.findAllTopic();</span><br><span class=\"line\">        Set&lt;String&gt; sets = map.keySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String str : sets)&#123;</span><br><span class=\"line\">            List&lt;Topic&gt; tlist = map.get(str);</span><br><span class=\"line\">            System.out.println(str+<span class=\"string\">\"------------------\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Topic top : tlist)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"    \"</span>+top.getTopId()+<span class=\"string\">\"    \"</span>+top.getTitle()+<span class=\"string\">\"    \"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"==============================================\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h1><blockquote>\n<p>   android开发——————</p>\n<pre><code>6    android sdk 帮助手册    \n7    android适配宝典    \n8    android监听器的使用    \n</code></pre><p>   ==============================================<br>   java开发——————<br>       1    java开发基础<br>       2    java.IO使用手册    </p>\n<pre><code>3    javaWEB开发    \n</code></pre><p>   ==============================================<br>   .net开发——————<br>       4    .net开发基础    </p>\n<pre><code>5    ASP使用手册    \n</code></pre><p>   ==============================================</p>\n</blockquote>"},{"title":"绕开过滤器方法和问题","date":"2016-12-12T08:56:06.000Z","_content":"\n# 起因\n\n今天写的是一个在项目中遇到的问题，为了解决XSS攻击，在web.xml配置了一个过滤器，该过滤器会把提交上来的数据进行转义，也就是把html标签给转义了。这就影响到了信息发布的模块，因为在线编辑器存储到服务器上的内容都是转化成html代码存储的，现在过滤器给转义了，所以在显示的时候有出问题了，如图：\n\n<!-- more -->\n\n![](http://ohhigdkar.bkt.clouddn.com/filter1.png)\n\n# 解决方案\n\n1.从数据库取出之后，反转义一次（这个没什么可说的，主要就是字符串操作）\n\n2.绕开上面配置的filter，不对信息发布做拦截（当然可能有点不安全，主要是解决问题时遇到的新问题，值得注意）\n\n## 实例\n\n1.在web.xml配置文件配置filter的时候，可以配置对象实例化需要的参数，这里我们配置的是当在访问某个请求的时候，不过滤该请求，例：\n\n```xml\n<filter id=\"Filter_Xss\">\n\t\t<filter-name>XSSFilter</filter-name>\n\t\t<filter-class>cn.org.ciptc.lms.web.cache.XSSFilter</filter-class>\n\t\t<init-param>\n\t\t\t<param-name>exUrl</param-name>\n\t\t\t<param-value>/notice/save</param-value><!--要绕开的请求 -->\n\t\t</init-param>\n\t</filter>\n\t<filter-mapping id=\"Filter_Xss__Mapping\">\n\t\t<filter-name>XSSFilter</filter-name>\n\t\t<url-pattern>/*</url-pattern>\n\t</filter-mapping>\n```\n\n2.在filter类中，在doFilter方法中需要做这样的判断\n\n```java\npublic void doFilter(ServletRequest request, ServletResponse response,\n\t\t\tFilterChain paramFilterChain) throws IOException, ServletException {\n\t\tString url = ((HttpServletRequest) request).getServletPath();\n\t\tString pathUrl = ((HttpServletRequest) request).getPathInfo();\n\t\t//System.out.println(\"url:\" + url + \" exUrl:\" + exUrl + \" pathUrl:\" + pathUrl);\n\t\tif(null != pathUrl && pathUrl.length()>0){\n\t\t\turl = url+pathUrl;\n\t\t}\n\t\tif (url.equals(exUrl)) {\n\t\t\tparamFilterChain.doFilter(request, response);\n\t\t} else {\n\t\t\t//进行过滤操作\n\t\t}\n\n\t}\n```\n\n在这段代码中就有一个坑，在不同的web容器中或者web.xml不同类型的配置中  HttpServletRequest 的getServletPath()方法有可能会返回空，不知道这个问题的同学，可能就发现为什么我在本地测试没问题，部署到服务器上不行了呢，或者我做服务迁移了之后，怎么过滤器失效了呢。那么不妨查询一下是否是这个问题引起的。\n\n这个时候，我们可以调用该类的getPathInfo()方法，如上面的实例，问题就解决了。\n\n","source":"_posts/javaweb-filter.md","raw":"---\ntitle: 绕开过滤器方法和问题\ndate: 2016-12-12 16:56:06\ntags: java\n---\n\n# 起因\n\n今天写的是一个在项目中遇到的问题，为了解决XSS攻击，在web.xml配置了一个过滤器，该过滤器会把提交上来的数据进行转义，也就是把html标签给转义了。这就影响到了信息发布的模块，因为在线编辑器存储到服务器上的内容都是转化成html代码存储的，现在过滤器给转义了，所以在显示的时候有出问题了，如图：\n\n<!-- more -->\n\n![](http://ohhigdkar.bkt.clouddn.com/filter1.png)\n\n# 解决方案\n\n1.从数据库取出之后，反转义一次（这个没什么可说的，主要就是字符串操作）\n\n2.绕开上面配置的filter，不对信息发布做拦截（当然可能有点不安全，主要是解决问题时遇到的新问题，值得注意）\n\n## 实例\n\n1.在web.xml配置文件配置filter的时候，可以配置对象实例化需要的参数，这里我们配置的是当在访问某个请求的时候，不过滤该请求，例：\n\n```xml\n<filter id=\"Filter_Xss\">\n\t\t<filter-name>XSSFilter</filter-name>\n\t\t<filter-class>cn.org.ciptc.lms.web.cache.XSSFilter</filter-class>\n\t\t<init-param>\n\t\t\t<param-name>exUrl</param-name>\n\t\t\t<param-value>/notice/save</param-value><!--要绕开的请求 -->\n\t\t</init-param>\n\t</filter>\n\t<filter-mapping id=\"Filter_Xss__Mapping\">\n\t\t<filter-name>XSSFilter</filter-name>\n\t\t<url-pattern>/*</url-pattern>\n\t</filter-mapping>\n```\n\n2.在filter类中，在doFilter方法中需要做这样的判断\n\n```java\npublic void doFilter(ServletRequest request, ServletResponse response,\n\t\t\tFilterChain paramFilterChain) throws IOException, ServletException {\n\t\tString url = ((HttpServletRequest) request).getServletPath();\n\t\tString pathUrl = ((HttpServletRequest) request).getPathInfo();\n\t\t//System.out.println(\"url:\" + url + \" exUrl:\" + exUrl + \" pathUrl:\" + pathUrl);\n\t\tif(null != pathUrl && pathUrl.length()>0){\n\t\t\turl = url+pathUrl;\n\t\t}\n\t\tif (url.equals(exUrl)) {\n\t\t\tparamFilterChain.doFilter(request, response);\n\t\t} else {\n\t\t\t//进行过滤操作\n\t\t}\n\n\t}\n```\n\n在这段代码中就有一个坑，在不同的web容器中或者web.xml不同类型的配置中  HttpServletRequest 的getServletPath()方法有可能会返回空，不知道这个问题的同学，可能就发现为什么我在本地测试没问题，部署到服务器上不行了呢，或者我做服务迁移了之后，怎么过滤器失效了呢。那么不妨查询一下是否是这个问题引起的。\n\n这个时候，我们可以调用该类的getPathInfo()方法，如上面的实例，问题就解决了。\n\n","slug":"javaweb-filter","published":1,"updated":"2022-11-24T13:38:45.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1el000o4ovkfqk2jxry","content":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>今天写的是一个在项目中遇到的问题，为了解决XSS攻击，在web.xml配置了一个过滤器，该过滤器会把提交上来的数据进行转义，也就是把html标签给转义了。这就影响到了信息发布的模块，因为在线编辑器存储到服务器上的内容都是转化成html代码存储的，现在过滤器给转义了，所以在显示的时候有出问题了，如图：</p>\n<a id=\"more\"></a>\n<p><img src=\"http://ohhigdkar.bkt.clouddn.com/filter1.png\" alt></p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>1.从数据库取出之后，反转义一次（这个没什么可说的，主要就是字符串操作）</p>\n<p>2.绕开上面配置的filter，不对信息发布做拦截（当然可能有点不安全，主要是解决问题时遇到的新问题，值得注意）</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>1.在web.xml配置文件配置filter的时候，可以配置对象实例化需要的参数，这里我们配置的是当在访问某个请求的时候，不过滤该请求，例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Filter_Xss\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>XSSFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>cn.org.ciptc.lms.web.cache.XSSFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>exUrl<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/notice/save<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span><span class=\"comment\">&lt;!--要绕开的请求 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Filter_Xss__Mapping\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>XSSFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.在filter类中，在doFilter方法中需要做这样的判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tFilterChain paramFilterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">\t\tString url = ((HttpServletRequest) request).getServletPath();</span><br><span class=\"line\">\t\tString pathUrl = ((HttpServletRequest) request).getPathInfo();</span><br><span class=\"line\">\t\t<span class=\"comment\">//System.out.println(\"url:\" + url + \" exUrl:\" + exUrl + \" pathUrl:\" + pathUrl);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != pathUrl &amp;&amp; pathUrl.length()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\turl = url+pathUrl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (url.equals(exUrl)) &#123;</span><br><span class=\"line\">\t\t\tparamFilterChain.doFilter(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//进行过滤操作</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>在这段代码中就有一个坑，在不同的web容器中或者web.xml不同类型的配置中  HttpServletRequest 的getServletPath()方法有可能会返回空，不知道这个问题的同学，可能就发现为什么我在本地测试没问题，部署到服务器上不行了呢，或者我做服务迁移了之后，怎么过滤器失效了呢。那么不妨查询一下是否是这个问题引起的。</p>\n<p>这个时候，我们可以调用该类的getPathInfo()方法，如上面的实例，问题就解决了。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h1><p>今天写的是一个在项目中遇到的问题，为了解决XSS攻击，在web.xml配置了一个过滤器，该过滤器会把提交上来的数据进行转义，也就是把html标签给转义了。这就影响到了信息发布的模块，因为在线编辑器存储到服务器上的内容都是转化成html代码存储的，现在过滤器给转义了，所以在显示的时候有出问题了，如图：</p>","more":"<p><img src=\"http://ohhigdkar.bkt.clouddn.com/filter1.png\" alt></p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>1.从数据库取出之后，反转义一次（这个没什么可说的，主要就是字符串操作）</p>\n<p>2.绕开上面配置的filter，不对信息发布做拦截（当然可能有点不安全，主要是解决问题时遇到的新问题，值得注意）</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>1.在web.xml配置文件配置filter的时候，可以配置对象实例化需要的参数，这里我们配置的是当在访问某个请求的时候，不过滤该请求，例：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Filter_Xss\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>XSSFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>cn.org.ciptc.lms.web.cache.XSSFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>exUrl<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/notice/save<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span><span class=\"comment\">&lt;!--要绕开的请求 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span> <span class=\"attr\">id</span>=<span class=\"string\">\"Filter_Xss__Mapping\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>XSSFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.在filter类中，在doFilter方法中需要做这样的判断</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest request, ServletResponse response,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\t\tFilterChain paramFilterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">\t\tString url = ((HttpServletRequest) request).getServletPath();</span><br><span class=\"line\">\t\tString pathUrl = ((HttpServletRequest) request).getPathInfo();</span><br><span class=\"line\">\t\t<span class=\"comment\">//System.out.println(\"url:\" + url + \" exUrl:\" + exUrl + \" pathUrl:\" + pathUrl);</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != pathUrl &amp;&amp; pathUrl.length()&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\turl = url+pathUrl;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (url.equals(exUrl)) &#123;</span><br><span class=\"line\">\t\t\tparamFilterChain.doFilter(request, response);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//进行过滤操作</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>在这段代码中就有一个坑，在不同的web容器中或者web.xml不同类型的配置中  HttpServletRequest 的getServletPath()方法有可能会返回空，不知道这个问题的同学，可能就发现为什么我在本地测试没问题，部署到服务器上不行了呢，或者我做服务迁移了之后，怎么过滤器失效了呢。那么不妨查询一下是否是这个问题引起的。</p>\n<p>这个时候，我们可以调用该类的getPathInfo()方法，如上面的实例，问题就解决了。</p>"},{"title":"MyBatis简介","date":"2017-04-27T02:53:08.000Z","_content":"\n\n\n# MyBatis简介\n\nMyBatis是一个轻量级的ORM（Object Relational Mapping）框架。支持普通的SQL查询，存储过程和高级映射的优秀持久层框架。消除了大部分JDBC代码；主要使用xml或者注解完成配置和原始映射。相比较Hibernate框架更加灵活。\n\n<!-- more -->\n\n# 入门\n\n每个MyBatis的应用程序都以一个SqlSessionFactory对象的实例为核心，因为我们要从这个对象中获取SqlSession对象去操作数据库。SqlSessionFactory对象的实例可以通过SqlSessionFactoryBuilder对象来获得，该对象可以从XML配置文件\n\n## 简单查询\n\n1.创建mybatis-config.xml\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n\t<!-- 引入资源文件 -->\n\t<properties resource=\"config.properties\">\n\t\t\n\t</properties>\n  <!-- 配置数据库信息 -->\n\t<environments default=\"development\">\n\t\t<environment id=\"development\">\n\t\t\t<transactionManager type=\"JDBC\" />\n\t\t\t<dataSource type=\"POOLED\">\n\t\t\t\t<property name=\"driver\" value=\"${driver}\" />\n\t\t\t\t<property name=\"url\" value=\"${url}\" />\n\t\t\t\t<property name=\"username\" value=\"${uname}\" />\n\t\t\t\t<property name=\"password\" value=\"\" />\n\t\t\t</dataSource>\n\t\t</environment>\n\t</environments>\n\t<!-- 引入映射文件，后面会讲到-->\n\t<mappers>\n\t\t<mapper resource=\"com/lms/cert/model/ClassUserMapper.xml\" />\n\t\t<mapper resource=\"com/lms/cert/model/CardBatchMapper.xml\" />\n\t\t<mapper resource=\"com/lms/cert/model/CardMapper.xml\" />\n\t</mappers>\n\n</configuration>\n```\n\n2.加载配置文件，并获取SqlSessionFactory\n\n``` java\n\t\tString resource = \"mybatis-config.xml\";\n\t\tSqlSessionFactory sessionFactory = null;\n\t\tSqlSession session = null;\n\t\ttry {\n\t\t\tInputStream in = Resources.getResourceAsStream(resource);\n\t\t\tsessionFactory = new SqlSessionFactoryBuilder().build(in);\n\t\t\tSystem.out.println(sessionFactory);\n\t\t\t\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n```\n\n>    org.apache.ibatis.session.defaults.DefaultSqlSessionFactory@33a10788\n\n\n\n3.创建一个数据表映射文件xxxMapper.xml\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!-- 这里的namespace命名空间需要注意，如果后面需要用到接口编程的时候，这里要使用创建的接口的全名，否则会报接口未注册的异常 -->\n<mapper namespace=\"com.lms.cert.inter.ClassUserMapper\">\n\t\n\t<resultMap type=\"com.lms.cert.model.ClassUser\" id=\"resultListUser\">\n\t\t<id column=\"id\" property=\"id\"/>\n\t\t<result column=\"class_id\" property=\"class_id\"/>\n\t\t<result column=\"class_course_id\" property=\"class_course_id\"/>\n\t\t<result column=\"card_id\" property=\"card_id\"/>\n\t\t<result column=\"register_time\" property=\"register_time\"/>\n\t</resultMap>\n\t\n  <!-- 这里select元素的id，如果使用接口编程，此处id的值要与接口中的方法名保持一致 -->\n\t<select id=\"selectByTime\" parameterType=\"java.util.Date\" resultMap=\"resultListUser\">\n\t\t<![CDATA[select * from t_class_user where register_time <= #{beginTime}]]>\n\t</select>\n\t\n\t<select id=\"selectClassUser\" resultType=\"com.lms.cert.model.ClassUser\">\n\t\tselect * from t_class_user where id = #{id}\n\t</select>\n\t\n</mapper>\n```\n\n4.通过sqlSessionFactory实例获取session，并进行一次查询操作\n\n``` java\n\t\t\tsession = sessionFactory.openSession();\n\t\t\tClassUser cu = session.selectOne(\"com.lms.cert.inter.ClassUserMapper.selectClassUser\", 7401);\n\t\t\tif (null != cu) {\n\t\t\t\tSystem.out.println(cu);\n\t\t\t}\t\n```\n\n>    ClassUser [id=7401, class_id=81, class_course_id=237, user_id=2, card_id=null, register_time=Sat Oct 08 00:00:00 CST 2016, register_end_time=null, score=0]\n\n记得查询完，要关闭session\n\n\n\n\n\n\n\n\n\n","source":"_posts/mybatis-in-action.md","raw":"---\ntitle: MyBatis简介\ndate: 2017-04-27 10:53:08\ntags: mybatis\n---\n\n\n\n# MyBatis简介\n\nMyBatis是一个轻量级的ORM（Object Relational Mapping）框架。支持普通的SQL查询，存储过程和高级映射的优秀持久层框架。消除了大部分JDBC代码；主要使用xml或者注解完成配置和原始映射。相比较Hibernate框架更加灵活。\n\n<!-- more -->\n\n# 入门\n\n每个MyBatis的应用程序都以一个SqlSessionFactory对象的实例为核心，因为我们要从这个对象中获取SqlSession对象去操作数据库。SqlSessionFactory对象的实例可以通过SqlSessionFactoryBuilder对象来获得，该对象可以从XML配置文件\n\n## 简单查询\n\n1.创建mybatis-config.xml\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n\t<!-- 引入资源文件 -->\n\t<properties resource=\"config.properties\">\n\t\t\n\t</properties>\n  <!-- 配置数据库信息 -->\n\t<environments default=\"development\">\n\t\t<environment id=\"development\">\n\t\t\t<transactionManager type=\"JDBC\" />\n\t\t\t<dataSource type=\"POOLED\">\n\t\t\t\t<property name=\"driver\" value=\"${driver}\" />\n\t\t\t\t<property name=\"url\" value=\"${url}\" />\n\t\t\t\t<property name=\"username\" value=\"${uname}\" />\n\t\t\t\t<property name=\"password\" value=\"\" />\n\t\t\t</dataSource>\n\t\t</environment>\n\t</environments>\n\t<!-- 引入映射文件，后面会讲到-->\n\t<mappers>\n\t\t<mapper resource=\"com/lms/cert/model/ClassUserMapper.xml\" />\n\t\t<mapper resource=\"com/lms/cert/model/CardBatchMapper.xml\" />\n\t\t<mapper resource=\"com/lms/cert/model/CardMapper.xml\" />\n\t</mappers>\n\n</configuration>\n```\n\n2.加载配置文件，并获取SqlSessionFactory\n\n``` java\n\t\tString resource = \"mybatis-config.xml\";\n\t\tSqlSessionFactory sessionFactory = null;\n\t\tSqlSession session = null;\n\t\ttry {\n\t\t\tInputStream in = Resources.getResourceAsStream(resource);\n\t\t\tsessionFactory = new SqlSessionFactoryBuilder().build(in);\n\t\t\tSystem.out.println(sessionFactory);\n\t\t\t\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n```\n\n>    org.apache.ibatis.session.defaults.DefaultSqlSessionFactory@33a10788\n\n\n\n3.创建一个数据表映射文件xxxMapper.xml\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<!-- 这里的namespace命名空间需要注意，如果后面需要用到接口编程的时候，这里要使用创建的接口的全名，否则会报接口未注册的异常 -->\n<mapper namespace=\"com.lms.cert.inter.ClassUserMapper\">\n\t\n\t<resultMap type=\"com.lms.cert.model.ClassUser\" id=\"resultListUser\">\n\t\t<id column=\"id\" property=\"id\"/>\n\t\t<result column=\"class_id\" property=\"class_id\"/>\n\t\t<result column=\"class_course_id\" property=\"class_course_id\"/>\n\t\t<result column=\"card_id\" property=\"card_id\"/>\n\t\t<result column=\"register_time\" property=\"register_time\"/>\n\t</resultMap>\n\t\n  <!-- 这里select元素的id，如果使用接口编程，此处id的值要与接口中的方法名保持一致 -->\n\t<select id=\"selectByTime\" parameterType=\"java.util.Date\" resultMap=\"resultListUser\">\n\t\t<![CDATA[select * from t_class_user where register_time <= #{beginTime}]]>\n\t</select>\n\t\n\t<select id=\"selectClassUser\" resultType=\"com.lms.cert.model.ClassUser\">\n\t\tselect * from t_class_user where id = #{id}\n\t</select>\n\t\n</mapper>\n```\n\n4.通过sqlSessionFactory实例获取session，并进行一次查询操作\n\n``` java\n\t\t\tsession = sessionFactory.openSession();\n\t\t\tClassUser cu = session.selectOne(\"com.lms.cert.inter.ClassUserMapper.selectClassUser\", 7401);\n\t\t\tif (null != cu) {\n\t\t\t\tSystem.out.println(cu);\n\t\t\t}\t\n```\n\n>    ClassUser [id=7401, class_id=81, class_course_id=237, user_id=2, card_id=null, register_time=Sat Oct 08 00:00:00 CST 2016, register_end_time=null, score=0]\n\n记得查询完，要关闭session\n\n\n\n\n\n\n\n\n\n","slug":"mybatis-in-action","published":1,"updated":"2022-11-24T13:38:45.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1en000q4ovkxap853bi","content":"<h1 id=\"MyBatis简介\"><a href=\"#MyBatis简介\" class=\"headerlink\" title=\"MyBatis简介\"></a>MyBatis简介</h1><p>MyBatis是一个轻量级的ORM（Object Relational Mapping）框架。支持普通的SQL查询，存储过程和高级映射的优秀持久层框架。消除了大部分JDBC代码；主要使用xml或者注解完成配置和原始映射。相比较Hibernate框架更加灵活。</p>\n<a id=\"more\"></a>\n<h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><p>每个MyBatis的应用程序都以一个SqlSessionFactory对象的实例为核心，因为我们要从这个对象中获取SqlSession对象去操作数据库。SqlSessionFactory对象的实例可以通过SqlSessionFactoryBuilder对象来获得，该对象可以从XML配置文件</p>\n<h2 id=\"简单查询\"><a href=\"#简单查询\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h2><p>1.创建mybatis-config.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 引入资源文件 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"config.properties\"</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 配置数据库信息 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;driver&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;url&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 引入映射文件，后面会讲到--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"com/lms/cert/model/ClassUserMapper.xml\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"com/lms/cert/model/CardBatchMapper.xml\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"com/lms/cert/model/CardMapper.xml\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.加载配置文件，并获取SqlSessionFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String resource = <span class=\"string\">\"mybatis-config.xml\"</span>;</span><br><span class=\"line\">SqlSessionFactory sessionFactory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">SqlSession session = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\tInputStream in = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">\tsessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class=\"line\">\tSystem.out.println(sessionFactory);</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   org.apache.ibatis.session.defaults.DefaultSqlSessionFactory@33a10788</p>\n</blockquote>\n<p>3.创建一个数据表映射文件xxxMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这里的namespace命名空间需要注意，如果后面需要用到接口编程的时候，这里要使用创建的接口的全名，否则会报接口未注册的异常 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.lms.cert.inter.ClassUserMapper\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.lms.cert.model.ClassUser\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"resultListUser\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"class_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"class_id\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"class_course_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"class_course_id\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"card_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"card_id\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"register_time\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"register_time\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 这里select元素的id，如果使用接口编程，此处id的值要与接口中的方法名保持一致 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"selectByTime\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"java.util.Date\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"resultListUser\"</span>&gt;</span></span><br><span class=\"line\">\t\t&lt;![CDATA[select * from t_class_user where register_time &lt;= #&#123;beginTime&#125;]]&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"selectClassUser\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.lms.cert.model.ClassUser\"</span>&gt;</span></span><br><span class=\"line\">\t\tselect * from t_class_user where id = #&#123;id&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>4.通过sqlSessionFactory实例获取session，并进行一次查询操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session = sessionFactory.openSession();</span><br><span class=\"line\">ClassUser cu = session.selectOne(<span class=\"string\">\"com.lms.cert.inter.ClassUserMapper.selectClassUser\"</span>, <span class=\"number\">7401</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != cu) &#123;</span><br><span class=\"line\">\tSystem.out.println(cu);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   ClassUser [id=7401, class_id=81, class_course_id=237, user_id=2, card_id=null, register_time=Sat Oct 08 00:00:00 CST 2016, register_end_time=null, score=0]</p>\n</blockquote>\n<p>记得查询完，要关闭session</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"MyBatis简介\"><a href=\"#MyBatis简介\" class=\"headerlink\" title=\"MyBatis简介\"></a>MyBatis简介</h1><p>MyBatis是一个轻量级的ORM（Object Relational Mapping）框架。支持普通的SQL查询，存储过程和高级映射的优秀持久层框架。消除了大部分JDBC代码；主要使用xml或者注解完成配置和原始映射。相比较Hibernate框架更加灵活。</p>","more":"<h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><p>每个MyBatis的应用程序都以一个SqlSessionFactory对象的实例为核心，因为我们要从这个对象中获取SqlSession对象去操作数据库。SqlSessionFactory对象的实例可以通过SqlSessionFactoryBuilder对象来获得，该对象可以从XML配置文件</p>\n<h2 id=\"简单查询\"><a href=\"#简单查询\" class=\"headerlink\" title=\"简单查询\"></a>简单查询</h2><p>1.创建mybatis-config.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 引入资源文件 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"config.properties\"</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 配置数据库信息 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;driver&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;url&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 引入映射文件，后面会讲到--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"com/lms/cert/model/ClassUserMapper.xml\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"com/lms/cert/model/CardBatchMapper.xml\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"com/lms/cert/model/CardMapper.xml\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>2.加载配置文件，并获取SqlSessionFactory</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String resource = <span class=\"string\">\"mybatis-config.xml\"</span>;</span><br><span class=\"line\">SqlSessionFactory sessionFactory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">SqlSession session = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\tInputStream in = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">\tsessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class=\"line\">\tSystem.out.println(sessionFactory);</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\te.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   org.apache.ibatis.session.defaults.DefaultSqlSessionFactory@33a10788</p>\n</blockquote>\n<p>3.创建一个数据表映射文件xxxMapper.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这里的namespace命名空间需要注意，如果后面需要用到接口编程的时候，这里要使用创建的接口的全名，否则会报接口未注册的异常 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.lms.cert.inter.ClassUserMapper\"</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">type</span>=<span class=\"string\">\"com.lms.cert.model.ClassUser\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"resultListUser\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"id\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"class_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"class_id\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"class_course_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"class_course_id\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"card_id\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"card_id\"</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">\"register_time\"</span> <span class=\"attr\">property</span>=<span class=\"string\">\"register_time\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 这里select元素的id，如果使用接口编程，此处id的值要与接口中的方法名保持一致 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"selectByTime\"</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">\"java.util.Date\"</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">\"resultListUser\"</span>&gt;</span></span><br><span class=\"line\">\t\t&lt;![CDATA[select * from t_class_user where register_time &lt;= #&#123;beginTime&#125;]]&gt;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"selectClassUser\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.lms.cert.model.ClassUser\"</span>&gt;</span></span><br><span class=\"line\">\t\tselect * from t_class_user where id = #&#123;id&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>4.通过sqlSessionFactory实例获取session，并进行一次查询操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">session = sessionFactory.openSession();</span><br><span class=\"line\">ClassUser cu = session.selectOne(<span class=\"string\">\"com.lms.cert.inter.ClassUserMapper.selectClassUser\"</span>, <span class=\"number\">7401</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != cu) &#123;</span><br><span class=\"line\">\tSystem.out.println(cu);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   ClassUser [id=7401, class_id=81, class_course_id=237, user_id=2, card_id=null, register_time=Sat Oct 08 00:00:00 CST 2016, register_end_time=null, score=0]</p>\n</blockquote>\n<p>记得查询完，要关闭session</p>"},{"title":"Logback日志框架","date":"2017-12-13T03:42:49.000Z","_content":"\n# 简介\n\nlogback和log4j是同一个人写的。logback重写了内核，比log4j更加强大，性能更好，因此log4j也可以被logback替代。\n\nslf4j这个jar只是提供了一些接口，供其他日志框架实现。类似于jdbc一样。通俗的讲，slf4j告诉系统，你通过我可以使用任何实现我接口的日志系统。允许最终用户在部署系统时使用其所希望的日子System，只需要更换jar包即可。\n\n因此建议logback和slf4j配合使用.\n\n<!-- more -->\n\n# 入门\n\n## 导入jar依赖\n\nlogback分三个模块core（基础模块），classic（是log4j改进版，并且实现了slf4j接口,依赖core模块），access（与servlet容器集成，提供http访问记录功能）。\n\n这里我们主要用到slf4j-api,logback-classic,logback-core\n\nmaven\n\n```xml\n<properties>\n\t<!-- base setting -->\n\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t<project.build.locales>zh_CN</project.build.locales>\n\t<project.build.jdk>1.7</project.build.jdk>\n\t<plugin.maven-compiler>3.1</plugin.maven-compiler>\n\t<!-- lib versions -->\n\t<slf4j.version>1.7.21</slf4j.version>\n\t<logback.version>1.2.3</logback.version>\n</properties>\n<dependency>\n\t<groupId>org.slf4j</groupId>\n\t<artifactId>slf4j-api</artifactId>\n\t<version>${slf4j.version}</version>\n</dependency>\n<dependency>\n\t<groupId>ch.qos.logback</groupId>\n\t<artifactId>logback-classic</artifactId>\n\t<version>${logback.version}</version>\n</dependency>\n<dependency>\n\t<groupId>ch.qos.logback</groupId>\n\t<artifactId>logback-core</artifactId>\n\t<version>${logback.version}</version>\n</dependency>\n```\n\n>    这里有个地方需要注意一下，当我们在maven仓库中拷贝`logback-classic`依赖时，会有`<scope>test</scope>`.  scope为test表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。比较典型的如junit。[参考(maven secope详解)](http://blog.csdn.net/kimylrong/article/details/50353161)\n\n## 简单应用\n\n```java\npackage com.cack.logger;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HelloWord1 {\n\n\tpublic static void main(String[] args) {\n\t\tLogger logger = LoggerFactory.getLogger(HelloWord1.class);\n\t\tlogger.debug(\"hello word\");\n\t}\n\n}\n```\n\n控制台输出\n\n`13:22:30.228 [main] DEBUG com.cack.logger.HelloWord1 - hello word`\n\n上面的例子可以看到，通过LoggerFactory可以获取一个logger，并且用logger的debug方法记录日子。\n\n这里都是用到的slf4j的类。看不出对logback的依赖。实际上输入内容是有slf4j的实现类，也就是logback-classic包中的实现类输出的。\n\n当使用logback输出日志的时候，它会默认去找logback-test.xml配置文件，如果没找到，会接着去找logback.xml配置文件，如果还没找到，就会使用默认的配置了。默认的配置是通过控制台输出。\n\n也可以通过下面的例子看出来这个流程：\n\n```java\npackage com.cack.logger;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport ch.qos.logback.classic.LoggerContext;\nimport ch.qos.logback.core.util.StatusPrinter;\n\npublic class HelloWord1 {\n\n\tpublic static void main(String[] args) {\n\t\tLogger logger = LoggerFactory.getLogger(HelloWord1.class);\n\t\tlogger.debug(\"hello word\");\n\t\tLoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n\t\tStatusPrinter.print(lc);\n\t}\n}\n```\n\n>    13:28:08.792 [main] DEBUG com.cack.logger.HelloWord1 - hello word\n>    13:28:08,744 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback-test.xml]\n>    13:28:08,744 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.groovy]\n>    13:28:08,744 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.xml]\n>    13:28:08,748 |-INFO in ch.qos.logback.classic.BasicConfigurator@6d5380c2 - Setting up default configuration.\n\n## Logger,Appender,Layout\n\nLogback建立在这三个主要的类上，这三个类协同合作可以帮助使用者根据消息类型和消息级别输出日志，还可以在程序运行期间，控制消息的输出格式和输出目的地。\n\n### Logger 上下文\n\nLogger主要日志输出类，负责日子的输出工作，可以被分级：TRACE，DEBUG，INFO，WARN，ERROR。如果Logger没有被定义级别，他会从他父类继承。\n\n### Appender 输出器\n\n主要用于控制日志输出目的地，目前有控制台，文件，远程套接字服务器，数据库，jms，远程UNIX Syslog守护进程等多种appender。默认是控制台appender。\n\n可以为一个logger设置多个appender。\n\n### Layout格式化\n\nLayout 负责根据用户意愿对记录请求进行格式化，appender 负责将格式化后的输出发送到目的地。PatternLayout 是标准 logback 发行包的一部分，允许用户按照类似于 C 语言的 printf 函数的转换模式设置输出格式。\n\n## 配置详解\n\n### **<configuration>**包含的属性\n\n>    1.   scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true.\n>    2.   scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟.\n>    3.   debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。\n\n```xml\n<configuration scan=\"true\" scanPeriod=\"60 second\" debug=\"true\">\n</configuration>\n```\n\n\n\n### **<property>** 设置变量\n\n用来定义变量值的标签，该标签有两个属性`name`,`value`,定义的变量会存在logger的上下文中，可以使用${} 来使用变量\n\n### **<contextName>**上下文名称\n\n设置上下文名称，用来区分不同应用程序的输出，一旦设置不允许修改。下面结合`<property>`标签设置上下文\n\n```xml\n<configuration scan=\"true\" debug=\"true\">\n  <property name=\"cname\" value=\"myApp\"></property>\n  <contextName>${cname}</contextName> \n  <!-- 上面两句等同于  <contextName>myApp</contextName>-->\n</configuration>\n```\n\n### **<timestamp>** 获取时间戳\n\n可以结合创建日志文件的时候作为文件名使用\n\n```xml\n<timestamp key=\"bySecond\" datePattern=\"yyyyMMdd'T'HHmmss\"></timestamp>\n```\n\n### **<logger>**\n\n用来设置某一个包或者具体的某一个类的日志打印级别、以及指定`<appender>`。`<logger>`仅有一个name属性，一个可选的level和一个可选的additivity属性。\n\n>    1.   name：用来指定受此logger约束的某一个包或者具体的某一个类。\n>    2.   level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。\n>    3.   additivity：是否向上级logger传递打印信息。默认是true。\n\n`<logger>`可以包含零个或多个`<appender-ref>`元素，标识这个appender将会添加到这个logger。\n\n当logger内没有配置appender的时候，本logger是不输出任何内容的。如果additivity设置为true的话，会把打印信息默认向上传输，父类配置了appender的话，就会输出日志信息了。\n\n### **<root>**\n\n也是`<logger>`元素，但是它是根logger。只有一个level属性，应为已经被命名为”root”.\n\n>    1.   level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。\n\n`<root>`可以包含零个或多个`<appender-ref>`元素，标识这个appender将会添加到这个logger。\n\n### **<appender>**详解\n\n`<appender>`是`<configuration>`的子节点，是负责写日志的组件。`<appender>`有两个必要属性`name`和`class`。`name`指定`appender`名称，`class`指定`appender`的全限定名。\n\n#### ConsoleAppender\n\n把日志打印到控制台，有以下两个节点\n\n>    1.   `<encoder>`:对日志进行格式化。encoder有个默认的layout `PatternLayoutEncoder`\n>    2.   `<target>`：字符串 System.out 或者 System.err ，默认 System.out .\n\n```xml\n<configuration>  \n  <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">  \n    <encoder>  \n      <pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>  \n    </encoder>  \n  </appender>  \n \n  <root level=\"DEBUG\">  \n    <appender-ref ref=\"STDOUT\" />  \n  </root>  \n</configuration>\n```\n\n#### FileAppender\n\n把日志添加到文件，有以下子节点：\n\n>    1.   `<file>`：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。\n>    2.   `<append>`：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。\n>    3.   `<encoder>`：对记录事件进行格式化。\n>    4.   `<prudent>`：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。\n\n```xml\n<configuration>  \n  <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">  \n    <file>testFile.log</file>  \n    <append>true</append>  \n    <encoder>  \n      <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n    </encoder>  \n  </appender>  \n \n  <root level=\"DEBUG\">  \n    <appender-ref ref=\"FILE\" />  \n  </root>  \n</configuration>\n```\n\n#### RollingFIleAppender\n\n滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：\n\n>    1.   `<file>`：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。\n>    2.   `<append>`：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。\n>    3.   `<encoder>`：对记录事件进行格式化。\n>    4.   `<rollingPolicy>`:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。\n>    5.   `<triggeringPolicy >`: 告知 RollingFileAppender 何时激活滚动。\n>    6.   `<prudent>`：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。\n\n常用的policy，`TimeBasedRollingPolicy`根据时间节点滚动策略，`SizeBasedTriggeringPolicy`： 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点`<maxFileSize>`:这是活动文件的大小，默认值是10MB。\n\n```xml\n<configuration>   \n  <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">   \n \n    <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">   \n      <fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>   \n      <maxHistory>30</maxHistory>    \n    </rollingPolicy>   \n \n    <encoder>   \n      <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>   \n    </encoder>   \n  </appender>    \n \n  <root level=\"DEBUG\">   \n    <appender-ref ref=\"FILE\" />   \n  </root>   \n</configuration>\n```\n\n另外还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这些就不在这里讲解了，大家可以参考官方文档。当然大家可以编写自己的Appender。\n\n### **<encoder>**\n\n负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。\n目前PatternLayoutEncoder 是唯一有用的且默认的encoder ，有一个`<pattern>`节点，用来设置日志的输入格式。使用“%”加“转换符”方式，如果要输出“%”，则必须用“\\”对“\\%”进行转义。\n\n```xml\n<encoder>   \n   <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>   \n</encoder>\n```\n\n格式修饰符，与转换符共同使用：\n可选的格式修饰符位于“%”和转换符之间。第一个可选修饰符是左对齐 标志，符号是减号“-”；接着是可选的最小宽度 修饰符，用十进制数表示。如果字符小于最小宽度，则左填充或右填充，默认是左填充（即右对齐），填充符为空格。如果字符大于最小宽度，字符永远不会被截断。最大宽度 修饰符，符号是点号”.”后面加十进制数。如果字符大于最大宽度，则从前面截断。点符号“.”后面加减号“-”在加数字，表示从尾部截断。\n\n例如：%-4relative 表示，将输出从程序启动到创建日志记录的时间 进行左对齐 且最小宽度为4。\n\n## 完整的logback.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n-scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true\n-scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。\n-           当scan为true时，此属性生效。默认的时间间隔为1分钟\n-debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。\n-\n- configuration 子节点为 appender、logger、root\n-->\n<configuration scan=\"true\" scanPeriod=\"60 second\" debug=\"false\">\n \n    <!-- 负责写日志,控制台日志 -->\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n \n        <!-- 一是把日志信息转换成字节数组,二是把字节数组写入到输出流 -->\n        <encoder>\n            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5level] [%thread] %logger{0} %msg%n</Pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n    </appender>\n \n    <!-- 文件日志 -->\n    <appender name=\"DEBUG\" class=\"ch.qos.logback.core.FileAppender\">\n        <file>debug.log</file>\n        <!-- append: true,日志被追加到文件结尾; false,清空现存文件;默认是true -->\n        <append>true</append>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <!-- LevelFilter: 级别过滤器，根据日志级别进行过滤 -->\n            <level>DEBUG</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        <encoder>\n            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5level] [%thread] %logger{0} %msg%n</Pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n    </appender>\n \n    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->\n    <appender name=\"INFO\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <File>info.log</File>\n \n        <!-- ThresholdFilter:临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 -->\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n            <level>INFO</level>\n        </filter>\n \n        <encoder>\n            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5level] [%thread] %logger{0} %msg%n</Pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n \n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!-- 每天生成一个日志文件，保存30天的日志文件\n            - 如果隔一段时间没有输出日志，前面过期的日志不会被删除，只有再重新打印日志的时候，会触发删除过期日志的操作。\n            -->\n            <fileNamePattern>info.%d{yyyy-MM-dd}.log</fileNamePattern>\n            <maxHistory>30</maxHistory>\n            <TimeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>100MB</maxFileSize>\n            </TimeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n    </appender >\n \n    <!--<!– 异常日志输出 –>-->\n    <!--<appender name=\"EXCEPTION\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">-->\n        <!--<file>exception.log</file>-->\n        <!--<!– 求值过滤器，评估、鉴别日志是否符合指定条件. 需要额外的两个JAR包，commons-compiler.jar和janino.jar –>-->\n        <!--<filter class=\"ch.qos.logback.core.filter.EvaluatorFilter\">-->\n            <!--<!– 默认为 ch.qos.logback.classic.boolex.JaninoEventEvaluator –>-->\n            <!--<evaluator>-->\n                <!--<!– 过滤掉所有日志消息中不包含\"Exception\"字符串的日志 –>-->\n                <!--<expression>return message.contains(\"Exception\");</expression>-->\n            <!--</evaluator>-->\n            <!--<OnMatch>ACCEPT</OnMatch>-->\n            <!--<OnMismatch>DENY</OnMismatch>-->\n        <!--</filter>-->\n \n        <!--<triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">-->\n            <!--<!– 触发节点，按固定文件大小生成，超过5M，生成新的日志文件 –>-->\n            <!--<maxFileSize>5MB</maxFileSize>-->\n        <!--</triggeringPolicy>-->\n    <!--</appender>-->\n \n    <appender name=\"ERROR\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>error.log</file>\n \n        <encoder>\n            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5level] [%thread] %logger{0} %msg%n</Pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n \n        <!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。\n        -    窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。\n        -    可以指定文件压缩选项\n        -->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n            <fileNamePattern>error.%d{yyyy-MM}(%i).log.zip</fileNamePattern>\n            <minIndex>1</minIndex>\n            <maxIndex>3</maxIndex>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>100MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            <maxHistory>30</maxHistory>\n        </rollingPolicy>\n    </appender>\n \n    <!-- 异步输出 -->\n    <appender name =\"ASYNC\" class= \"ch.qos.logback.classic.AsyncAppender\">\n        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->\n        <discardingThreshold >0</discardingThreshold>\n        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->\n        <queueSize>512</queueSize>\n        <!-- 添加附加的appender,最多只能添加一个 -->\n        <appender-ref ref =\"ERROR\"/>\n    </appender>\n \n    <!--\n    - 1.name：包名或类名，用来指定受此logger约束的某一个包或者具体的某一个类\n    - 2.未设置打印级别，所以继承他的上级<root>的日志级别“DEBUG”\n    - 3.未设置additivity，默认为true，将此logger的打印信息向上级传递；\n    - 4.未设置appender，此logger本身不打印任何信息，级别为“DEBUG”及大于“DEBUG”的日志信息传递给root，\n    -  root接到下级传递的信息，交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；\n    -->\n    <logger name=\"ch.qos.logback\" />\n \n    <!--\n    - 1.将级别为“INFO”及大于“INFO”的日志信息交给此logger指定的名为“STDOUT”的appender处理，在控制台中打出日志，\n    -   不再向次logger的上级 <logger name=\"logback\"/> 传递打印信息\n    - 2.level：设置打印级别（TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF），还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。\n    -        如果未设置此属性，那么当前logger将会继承上级的级别。\n    - 3.additivity：为false，表示此logger的打印信息不再向上级传递,如果设置为true，会打印两次\n    - 4.appender-ref：指定了名字为\"STDOUT\"的appender。\n    -->\n    <logger name=\"com.weizhi.common.LogMain\" level=\"INFO\" additivity=\"false\">\n        <appender-ref ref=\"STDOUT\"/>\n        <!--<appender-ref ref=\"DEBUG\"/>-->\n        <!--<appender-ref ref=\"EXCEPTION\"/>-->\n        <!--<appender-ref ref=\"INFO\"/>-->\n        <!--<appender-ref ref=\"ERROR\"/>-->\n        <appender-ref ref=\"ASYNC\"/>\n    </logger>\n \n    <!--\n    - 根logger\n    - level:设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。\n    -       默认是DEBUG。\n    -appender-ref:可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger\n    -->\n    <root level=\"DEBUG\">\n        <appender-ref ref=\"STDOUT\"/>\n        <!--<appender-ref ref=\"DEBUG\"/>-->\n        <!--<appender-ref ref=\"EXCEPTION\"/>-->\n        <!--<appender-ref ref=\"INFO\"/>-->\n        <appender-ref ref=\"ASYNC\"/>\n    </root>\n</configuration>\n```\n\n\n\n","source":"_posts/logback.md","raw":"---\ntitle: Logback日志框架\ndate: 2017-12-13 11:42:49\ntags: [java]\n---\n\n# 简介\n\nlogback和log4j是同一个人写的。logback重写了内核，比log4j更加强大，性能更好，因此log4j也可以被logback替代。\n\nslf4j这个jar只是提供了一些接口，供其他日志框架实现。类似于jdbc一样。通俗的讲，slf4j告诉系统，你通过我可以使用任何实现我接口的日志系统。允许最终用户在部署系统时使用其所希望的日子System，只需要更换jar包即可。\n\n因此建议logback和slf4j配合使用.\n\n<!-- more -->\n\n# 入门\n\n## 导入jar依赖\n\nlogback分三个模块core（基础模块），classic（是log4j改进版，并且实现了slf4j接口,依赖core模块），access（与servlet容器集成，提供http访问记录功能）。\n\n这里我们主要用到slf4j-api,logback-classic,logback-core\n\nmaven\n\n```xml\n<properties>\n\t<!-- base setting -->\n\t<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n\t<project.build.locales>zh_CN</project.build.locales>\n\t<project.build.jdk>1.7</project.build.jdk>\n\t<plugin.maven-compiler>3.1</plugin.maven-compiler>\n\t<!-- lib versions -->\n\t<slf4j.version>1.7.21</slf4j.version>\n\t<logback.version>1.2.3</logback.version>\n</properties>\n<dependency>\n\t<groupId>org.slf4j</groupId>\n\t<artifactId>slf4j-api</artifactId>\n\t<version>${slf4j.version}</version>\n</dependency>\n<dependency>\n\t<groupId>ch.qos.logback</groupId>\n\t<artifactId>logback-classic</artifactId>\n\t<version>${logback.version}</version>\n</dependency>\n<dependency>\n\t<groupId>ch.qos.logback</groupId>\n\t<artifactId>logback-core</artifactId>\n\t<version>${logback.version}</version>\n</dependency>\n```\n\n>    这里有个地方需要注意一下，当我们在maven仓库中拷贝`logback-classic`依赖时，会有`<scope>test</scope>`.  scope为test表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。比较典型的如junit。[参考(maven secope详解)](http://blog.csdn.net/kimylrong/article/details/50353161)\n\n## 简单应用\n\n```java\npackage com.cack.logger;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HelloWord1 {\n\n\tpublic static void main(String[] args) {\n\t\tLogger logger = LoggerFactory.getLogger(HelloWord1.class);\n\t\tlogger.debug(\"hello word\");\n\t}\n\n}\n```\n\n控制台输出\n\n`13:22:30.228 [main] DEBUG com.cack.logger.HelloWord1 - hello word`\n\n上面的例子可以看到，通过LoggerFactory可以获取一个logger，并且用logger的debug方法记录日子。\n\n这里都是用到的slf4j的类。看不出对logback的依赖。实际上输入内容是有slf4j的实现类，也就是logback-classic包中的实现类输出的。\n\n当使用logback输出日志的时候，它会默认去找logback-test.xml配置文件，如果没找到，会接着去找logback.xml配置文件，如果还没找到，就会使用默认的配置了。默认的配置是通过控制台输出。\n\n也可以通过下面的例子看出来这个流程：\n\n```java\npackage com.cack.logger;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport ch.qos.logback.classic.LoggerContext;\nimport ch.qos.logback.core.util.StatusPrinter;\n\npublic class HelloWord1 {\n\n\tpublic static void main(String[] args) {\n\t\tLogger logger = LoggerFactory.getLogger(HelloWord1.class);\n\t\tlogger.debug(\"hello word\");\n\t\tLoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n\t\tStatusPrinter.print(lc);\n\t}\n}\n```\n\n>    13:28:08.792 [main] DEBUG com.cack.logger.HelloWord1 - hello word\n>    13:28:08,744 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback-test.xml]\n>    13:28:08,744 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.groovy]\n>    13:28:08,744 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.xml]\n>    13:28:08,748 |-INFO in ch.qos.logback.classic.BasicConfigurator@6d5380c2 - Setting up default configuration.\n\n## Logger,Appender,Layout\n\nLogback建立在这三个主要的类上，这三个类协同合作可以帮助使用者根据消息类型和消息级别输出日志，还可以在程序运行期间，控制消息的输出格式和输出目的地。\n\n### Logger 上下文\n\nLogger主要日志输出类，负责日子的输出工作，可以被分级：TRACE，DEBUG，INFO，WARN，ERROR。如果Logger没有被定义级别，他会从他父类继承。\n\n### Appender 输出器\n\n主要用于控制日志输出目的地，目前有控制台，文件，远程套接字服务器，数据库，jms，远程UNIX Syslog守护进程等多种appender。默认是控制台appender。\n\n可以为一个logger设置多个appender。\n\n### Layout格式化\n\nLayout 负责根据用户意愿对记录请求进行格式化，appender 负责将格式化后的输出发送到目的地。PatternLayout 是标准 logback 发行包的一部分，允许用户按照类似于 C 语言的 printf 函数的转换模式设置输出格式。\n\n## 配置详解\n\n### **<configuration>**包含的属性\n\n>    1.   scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true.\n>    2.   scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟.\n>    3.   debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。\n\n```xml\n<configuration scan=\"true\" scanPeriod=\"60 second\" debug=\"true\">\n</configuration>\n```\n\n\n\n### **<property>** 设置变量\n\n用来定义变量值的标签，该标签有两个属性`name`,`value`,定义的变量会存在logger的上下文中，可以使用${} 来使用变量\n\n### **<contextName>**上下文名称\n\n设置上下文名称，用来区分不同应用程序的输出，一旦设置不允许修改。下面结合`<property>`标签设置上下文\n\n```xml\n<configuration scan=\"true\" debug=\"true\">\n  <property name=\"cname\" value=\"myApp\"></property>\n  <contextName>${cname}</contextName> \n  <!-- 上面两句等同于  <contextName>myApp</contextName>-->\n</configuration>\n```\n\n### **<timestamp>** 获取时间戳\n\n可以结合创建日志文件的时候作为文件名使用\n\n```xml\n<timestamp key=\"bySecond\" datePattern=\"yyyyMMdd'T'HHmmss\"></timestamp>\n```\n\n### **<logger>**\n\n用来设置某一个包或者具体的某一个类的日志打印级别、以及指定`<appender>`。`<logger>`仅有一个name属性，一个可选的level和一个可选的additivity属性。\n\n>    1.   name：用来指定受此logger约束的某一个包或者具体的某一个类。\n>    2.   level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。\n>    3.   additivity：是否向上级logger传递打印信息。默认是true。\n\n`<logger>`可以包含零个或多个`<appender-ref>`元素，标识这个appender将会添加到这个logger。\n\n当logger内没有配置appender的时候，本logger是不输出任何内容的。如果additivity设置为true的话，会把打印信息默认向上传输，父类配置了appender的话，就会输出日志信息了。\n\n### **<root>**\n\n也是`<logger>`元素，但是它是根logger。只有一个level属性，应为已经被命名为”root”.\n\n>    1.   level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。\n\n`<root>`可以包含零个或多个`<appender-ref>`元素，标识这个appender将会添加到这个logger。\n\n### **<appender>**详解\n\n`<appender>`是`<configuration>`的子节点，是负责写日志的组件。`<appender>`有两个必要属性`name`和`class`。`name`指定`appender`名称，`class`指定`appender`的全限定名。\n\n#### ConsoleAppender\n\n把日志打印到控制台，有以下两个节点\n\n>    1.   `<encoder>`:对日志进行格式化。encoder有个默认的layout `PatternLayoutEncoder`\n>    2.   `<target>`：字符串 System.out 或者 System.err ，默认 System.out .\n\n```xml\n<configuration>  \n  <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">  \n    <encoder>  \n      <pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>  \n    </encoder>  \n  </appender>  \n \n  <root level=\"DEBUG\">  \n    <appender-ref ref=\"STDOUT\" />  \n  </root>  \n</configuration>\n```\n\n#### FileAppender\n\n把日志添加到文件，有以下子节点：\n\n>    1.   `<file>`：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。\n>    2.   `<append>`：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。\n>    3.   `<encoder>`：对记录事件进行格式化。\n>    4.   `<prudent>`：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。\n\n```xml\n<configuration>  \n  <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">  \n    <file>testFile.log</file>  \n    <append>true</append>  \n    <encoder>  \n      <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>  \n    </encoder>  \n  </appender>  \n \n  <root level=\"DEBUG\">  \n    <appender-ref ref=\"FILE\" />  \n  </root>  \n</configuration>\n```\n\n#### RollingFIleAppender\n\n滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：\n\n>    1.   `<file>`：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。\n>    2.   `<append>`：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。\n>    3.   `<encoder>`：对记录事件进行格式化。\n>    4.   `<rollingPolicy>`:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。\n>    5.   `<triggeringPolicy >`: 告知 RollingFileAppender 何时激活滚动。\n>    6.   `<prudent>`：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。\n\n常用的policy，`TimeBasedRollingPolicy`根据时间节点滚动策略，`SizeBasedTriggeringPolicy`： 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点`<maxFileSize>`:这是活动文件的大小，默认值是10MB。\n\n```xml\n<configuration>   \n  <appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">   \n \n    <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">   \n      <fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern>   \n      <maxHistory>30</maxHistory>    \n    </rollingPolicy>   \n \n    <encoder>   \n      <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>   \n    </encoder>   \n  </appender>    \n \n  <root level=\"DEBUG\">   \n    <appender-ref ref=\"FILE\" />   \n  </root>   \n</configuration>\n```\n\n另外还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这些就不在这里讲解了，大家可以参考官方文档。当然大家可以编写自己的Appender。\n\n### **<encoder>**\n\n负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。\n目前PatternLayoutEncoder 是唯一有用的且默认的encoder ，有一个`<pattern>`节点，用来设置日志的输入格式。使用“%”加“转换符”方式，如果要输出“%”，则必须用“\\”对“\\%”进行转义。\n\n```xml\n<encoder>   \n   <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>   \n</encoder>\n```\n\n格式修饰符，与转换符共同使用：\n可选的格式修饰符位于“%”和转换符之间。第一个可选修饰符是左对齐 标志，符号是减号“-”；接着是可选的最小宽度 修饰符，用十进制数表示。如果字符小于最小宽度，则左填充或右填充，默认是左填充（即右对齐），填充符为空格。如果字符大于最小宽度，字符永远不会被截断。最大宽度 修饰符，符号是点号”.”后面加十进制数。如果字符大于最大宽度，则从前面截断。点符号“.”后面加减号“-”在加数字，表示从尾部截断。\n\n例如：%-4relative 表示，将输出从程序启动到创建日志记录的时间 进行左对齐 且最小宽度为4。\n\n## 完整的logback.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!--\n-scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true\n-scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。\n-           当scan为true时，此属性生效。默认的时间间隔为1分钟\n-debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。\n-\n- configuration 子节点为 appender、logger、root\n-->\n<configuration scan=\"true\" scanPeriod=\"60 second\" debug=\"false\">\n \n    <!-- 负责写日志,控制台日志 -->\n    <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n \n        <!-- 一是把日志信息转换成字节数组,二是把字节数组写入到输出流 -->\n        <encoder>\n            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5level] [%thread] %logger{0} %msg%n</Pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n    </appender>\n \n    <!-- 文件日志 -->\n    <appender name=\"DEBUG\" class=\"ch.qos.logback.core.FileAppender\">\n        <file>debug.log</file>\n        <!-- append: true,日志被追加到文件结尾; false,清空现存文件;默认是true -->\n        <append>true</append>\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\n            <!-- LevelFilter: 级别过滤器，根据日志级别进行过滤 -->\n            <level>DEBUG</level>\n            <onMatch>ACCEPT</onMatch>\n            <onMismatch>DENY</onMismatch>\n        </filter>\n        <encoder>\n            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5level] [%thread] %logger{0} %msg%n</Pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n    </appender>\n \n    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->\n    <appender name=\"INFO\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <File>info.log</File>\n \n        <!-- ThresholdFilter:临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 -->\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\n            <level>INFO</level>\n        </filter>\n \n        <encoder>\n            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5level] [%thread] %logger{0} %msg%n</Pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n \n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\n            <!-- 每天生成一个日志文件，保存30天的日志文件\n            - 如果隔一段时间没有输出日志，前面过期的日志不会被删除，只有再重新打印日志的时候，会触发删除过期日志的操作。\n            -->\n            <fileNamePattern>info.%d{yyyy-MM-dd}.log</fileNamePattern>\n            <maxHistory>30</maxHistory>\n            <TimeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>100MB</maxFileSize>\n            </TimeBasedFileNamingAndTriggeringPolicy>\n        </rollingPolicy>\n    </appender >\n \n    <!--<!– 异常日志输出 –>-->\n    <!--<appender name=\"EXCEPTION\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">-->\n        <!--<file>exception.log</file>-->\n        <!--<!– 求值过滤器，评估、鉴别日志是否符合指定条件. 需要额外的两个JAR包，commons-compiler.jar和janino.jar –>-->\n        <!--<filter class=\"ch.qos.logback.core.filter.EvaluatorFilter\">-->\n            <!--<!– 默认为 ch.qos.logback.classic.boolex.JaninoEventEvaluator –>-->\n            <!--<evaluator>-->\n                <!--<!– 过滤掉所有日志消息中不包含\"Exception\"字符串的日志 –>-->\n                <!--<expression>return message.contains(\"Exception\");</expression>-->\n            <!--</evaluator>-->\n            <!--<OnMatch>ACCEPT</OnMatch>-->\n            <!--<OnMismatch>DENY</OnMismatch>-->\n        <!--</filter>-->\n \n        <!--<triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\">-->\n            <!--<!– 触发节点，按固定文件大小生成，超过5M，生成新的日志文件 –>-->\n            <!--<maxFileSize>5MB</maxFileSize>-->\n        <!--</triggeringPolicy>-->\n    <!--</appender>-->\n \n    <appender name=\"ERROR\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\n        <file>error.log</file>\n \n        <encoder>\n            <Pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%5level] [%thread] %logger{0} %msg%n</Pattern>\n            <charset>UTF-8</charset>\n        </encoder>\n \n        <!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。\n        -    窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。\n        -    可以指定文件压缩选项\n        -->\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\">\n            <fileNamePattern>error.%d{yyyy-MM}(%i).log.zip</fileNamePattern>\n            <minIndex>1</minIndex>\n            <maxIndex>3</maxIndex>\n            <timeBasedFileNamingAndTriggeringPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\">\n                <maxFileSize>100MB</maxFileSize>\n            </timeBasedFileNamingAndTriggeringPolicy>\n            <maxHistory>30</maxHistory>\n        </rollingPolicy>\n    </appender>\n \n    <!-- 异步输出 -->\n    <appender name =\"ASYNC\" class= \"ch.qos.logback.classic.AsyncAppender\">\n        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->\n        <discardingThreshold >0</discardingThreshold>\n        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->\n        <queueSize>512</queueSize>\n        <!-- 添加附加的appender,最多只能添加一个 -->\n        <appender-ref ref =\"ERROR\"/>\n    </appender>\n \n    <!--\n    - 1.name：包名或类名，用来指定受此logger约束的某一个包或者具体的某一个类\n    - 2.未设置打印级别，所以继承他的上级<root>的日志级别“DEBUG”\n    - 3.未设置additivity，默认为true，将此logger的打印信息向上级传递；\n    - 4.未设置appender，此logger本身不打印任何信息，级别为“DEBUG”及大于“DEBUG”的日志信息传递给root，\n    -  root接到下级传递的信息，交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；\n    -->\n    <logger name=\"ch.qos.logback\" />\n \n    <!--\n    - 1.将级别为“INFO”及大于“INFO”的日志信息交给此logger指定的名为“STDOUT”的appender处理，在控制台中打出日志，\n    -   不再向次logger的上级 <logger name=\"logback\"/> 传递打印信息\n    - 2.level：设置打印级别（TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF），还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。\n    -        如果未设置此属性，那么当前logger将会继承上级的级别。\n    - 3.additivity：为false，表示此logger的打印信息不再向上级传递,如果设置为true，会打印两次\n    - 4.appender-ref：指定了名字为\"STDOUT\"的appender。\n    -->\n    <logger name=\"com.weizhi.common.LogMain\" level=\"INFO\" additivity=\"false\">\n        <appender-ref ref=\"STDOUT\"/>\n        <!--<appender-ref ref=\"DEBUG\"/>-->\n        <!--<appender-ref ref=\"EXCEPTION\"/>-->\n        <!--<appender-ref ref=\"INFO\"/>-->\n        <!--<appender-ref ref=\"ERROR\"/>-->\n        <appender-ref ref=\"ASYNC\"/>\n    </logger>\n \n    <!--\n    - 根logger\n    - level:设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。\n    -       默认是DEBUG。\n    -appender-ref:可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger\n    -->\n    <root level=\"DEBUG\">\n        <appender-ref ref=\"STDOUT\"/>\n        <!--<appender-ref ref=\"DEBUG\"/>-->\n        <!--<appender-ref ref=\"EXCEPTION\"/>-->\n        <!--<appender-ref ref=\"INFO\"/>-->\n        <appender-ref ref=\"ASYNC\"/>\n    </root>\n</configuration>\n```\n\n\n\n","slug":"logback","published":1,"updated":"2022-11-24T13:38:45.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1eo000t4ovkmcvjx05m","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>logback和log4j是同一个人写的。logback重写了内核，比log4j更加强大，性能更好，因此log4j也可以被logback替代。</p>\n<p>slf4j这个jar只是提供了一些接口，供其他日志框架实现。类似于jdbc一样。通俗的讲，slf4j告诉系统，你通过我可以使用任何实现我接口的日志系统。允许最终用户在部署系统时使用其所希望的日子System，只需要更换jar包即可。</p>\n<p>因此建议logback和slf4j配合使用.</p>\n<a id=\"more\"></a>\n<h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><h2 id=\"导入jar依赖\"><a href=\"#导入jar依赖\" class=\"headerlink\" title=\"导入jar依赖\"></a>导入jar依赖</h2><p>logback分三个模块core（基础模块），classic（是log4j改进版，并且实现了slf4j接口,依赖core模块），access（与servlet容器集成，提供http访问记录功能）。</p>\n<p>这里我们主要用到slf4j-api,logback-classic,logback-core</p>\n<p>maven</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- base setting --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.locales</span>&gt;</span>zh_CN<span class=\"tag\">&lt;/<span class=\"name\">project.build.locales</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.jdk</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">project.build.jdk</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugin.maven-compiler</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">plugin.maven-compiler</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- lib versions --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.21<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logback.version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">logback.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   这里有个地方需要注意一下，当我们在maven仓库中拷贝<code>logback-classic</code>依赖时，会有<code>&lt;scope&gt;test&lt;/scope&gt;</code>.  scope为test表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。比较典型的如junit。<a href=\"http://blog.csdn.net/kimylrong/article/details/50353161\" target=\"_blank\" rel=\"noopener\">参考(maven secope详解)</a></p>\n</blockquote>\n<h2 id=\"简单应用\"><a href=\"#简单应用\" class=\"headerlink\" title=\"简单应用\"></a>简单应用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cack.logger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWord1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tLogger logger = LoggerFactory.getLogger(HelloWord1.class);</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">\"hello word\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台输出</p>\n<p><code>13:22:30.228 [main] DEBUG com.cack.logger.HelloWord1 - hello word</code></p>\n<p>上面的例子可以看到，通过LoggerFactory可以获取一个logger，并且用logger的debug方法记录日子。</p>\n<p>这里都是用到的slf4j的类。看不出对logback的依赖。实际上输入内容是有slf4j的实现类，也就是logback-classic包中的实现类输出的。</p>\n<p>当使用logback输出日志的时候，它会默认去找logback-test.xml配置文件，如果没找到，会接着去找logback.xml配置文件，如果还没找到，就会使用默认的配置了。默认的配置是通过控制台输出。</p>\n<p>也可以通过下面的例子看出来这个流程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cack.logger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ch.qos.logback.classic.LoggerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ch.qos.logback.core.util.StatusPrinter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWord1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tLogger logger = LoggerFactory.getLogger(HelloWord1.class);</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">\"hello word\"</span>);</span><br><span class=\"line\">\t\tLoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class=\"line\">\t\tStatusPrinter.print(lc);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   13:28:08.792 [main] DEBUG com.cack.logger.HelloWord1 - hello word<br>   13:28:08,744 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback-test.xml]<br>   13:28:08,744 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.groovy]<br>   13:28:08,744 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.xml]<br>   13:28:08,748 |-INFO in ch.qos.logback.classic.BasicConfigurator@6d5380c2 - Setting up default configuration.</p>\n</blockquote>\n<h2 id=\"Logger-Appender-Layout\"><a href=\"#Logger-Appender-Layout\" class=\"headerlink\" title=\"Logger,Appender,Layout\"></a>Logger,Appender,Layout</h2><p>Logback建立在这三个主要的类上，这三个类协同合作可以帮助使用者根据消息类型和消息级别输出日志，还可以在程序运行期间，控制消息的输出格式和输出目的地。</p>\n<h3 id=\"Logger-上下文\"><a href=\"#Logger-上下文\" class=\"headerlink\" title=\"Logger 上下文\"></a>Logger 上下文</h3><p>Logger主要日志输出类，负责日子的输出工作，可以被分级：TRACE，DEBUG，INFO，WARN，ERROR。如果Logger没有被定义级别，他会从他父类继承。</p>\n<h3 id=\"Appender-输出器\"><a href=\"#Appender-输出器\" class=\"headerlink\" title=\"Appender 输出器\"></a>Appender 输出器</h3><p>主要用于控制日志输出目的地，目前有控制台，文件，远程套接字服务器，数据库，jms，远程UNIX Syslog守护进程等多种appender。默认是控制台appender。</p>\n<p>可以为一个logger设置多个appender。</p>\n<h3 id=\"Layout格式化\"><a href=\"#Layout格式化\" class=\"headerlink\" title=\"Layout格式化\"></a>Layout格式化</h3><p>Layout 负责根据用户意愿对记录请求进行格式化，appender 负责将格式化后的输出发送到目的地。PatternLayout 是标准 logback 发行包的一部分，允许用户按照类似于 C 语言的 printf 函数的转换模式设置输出格式。</p>\n<h2 id=\"配置详解\"><a href=\"#配置详解\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h2><h3 id=\"包含的属性\"><a href=\"#包含的属性\" class=\"headerlink\" title=\"包含的属性\"></a><strong><configuration></configuration></strong>包含的属性</h3><blockquote>\n<ol>\n<li>scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true.</li>\n<li>scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟.</li>\n<li>debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 second\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置变量\"><a href=\"#设置变量\" class=\"headerlink\" title=\" 设置变量\"></a><strong><property></property></strong> 设置变量</h3><p>用来定义变量值的标签，该标签有两个属性<code>name</code>,<code>value</code>,定义的变量会存在logger的上下文中，可以使用${} 来使用变量</p>\n<h3 id=\"上下文名称\"><a href=\"#上下文名称\" class=\"headerlink\" title=\"上下文名称\"></a><strong><contextname></contextname></strong>上下文名称</h3><p>设置上下文名称，用来区分不同应用程序的输出，一旦设置不允许修改。下面结合<code>&lt;property&gt;</code>标签设置上下文</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cname\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"myApp\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">contextName</span>&gt;</span>$&#123;cname&#125;<span class=\"tag\">&lt;/<span class=\"name\">contextName</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 上面两句等同于  &lt;contextName&gt;myApp&lt;/contextName&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取时间戳\"><a href=\"#获取时间戳\" class=\"headerlink\" title=\" 获取时间戳\"></a><strong><timestamp></timestamp></strong> 获取时间戳</h3><p>可以结合创建日志文件的时候作为文件名使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">timestamp</span> <span class=\"attr\">key</span>=<span class=\"string\">\"bySecond\"</span> <span class=\"attr\">datePattern</span>=<span class=\"string\">\"yyyyMMdd'T'HHmmss\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">timestamp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a><strong><logger></logger></strong></h3><p>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<code>&lt;appender&gt;</code>。<code>&lt;logger&gt;</code>仅有一个name属性，一个可选的level和一个可选的additivity属性。</p>\n<blockquote>\n<ol>\n<li>name：用来指定受此logger约束的某一个包或者具体的某一个类。</li>\n<li>level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。</li>\n<li>additivity：是否向上级logger传递打印信息。默认是true。</li>\n</ol>\n</blockquote>\n<p><code>&lt;logger&gt;</code>可以包含零个或多个<code>&lt;appender-ref&gt;</code>元素，标识这个appender将会添加到这个logger。</p>\n<p>当logger内没有配置appender的时候，本logger是不输出任何内容的。如果additivity设置为true的话，会把打印信息默认向上传输，父类配置了appender的话，就会输出日志信息了。</p>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title></a><strong><root></root></strong></h3><p>也是<code>&lt;logger&gt;</code>元素，但是它是根logger。只有一个level属性，应为已经被命名为”root”.</p>\n<blockquote>\n<ol>\n<li>level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。</li>\n</ol>\n</blockquote>\n<p><code>&lt;root&gt;</code>可以包含零个或多个<code>&lt;appender-ref&gt;</code>元素，标识这个appender将会添加到这个logger。</p>\n<h3 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a><strong><appender></appender></strong>详解</h3><p><code>&lt;appender&gt;</code>是<code>&lt;configuration&gt;</code>的子节点，是负责写日志的组件。<code>&lt;appender&gt;</code>有两个必要属性<code>name</code>和<code>class</code>。<code>name</code>指定<code>appender</code>名称，<code>class</code>指定<code>appender</code>的全限定名。</p>\n<h4 id=\"ConsoleAppender\"><a href=\"#ConsoleAppender\" class=\"headerlink\" title=\"ConsoleAppender\"></a>ConsoleAppender</h4><p>把日志打印到控制台，有以下两个节点</p>\n<blockquote>\n<ol>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化。encoder有个默认的layout <code>PatternLayoutEncoder</code></li>\n<li><code>&lt;target&gt;</code>：字符串 System.out 或者 System.err ，默认 System.out .</li>\n</ol>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"STDOUT\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"STDOUT\"</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"FileAppender\"><a href=\"#FileAppender\" class=\"headerlink\" title=\"FileAppender\"></a>FileAppender</h4><p>把日志添加到文件，有以下子节点：</p>\n<blockquote>\n<ol>\n<li><code>&lt;file&gt;</code>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。</li>\n<li><code>&lt;append&gt;</code>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。</li>\n<li><code>&lt;encoder&gt;</code>：对记录事件进行格式化。</li>\n<li><code>&lt;prudent&gt;</code>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.FileAppender\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>testFile.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"RollingFIleAppender\"><a href=\"#RollingFIleAppender\" class=\"headerlink\" title=\"RollingFIleAppender\"></a>RollingFIleAppender</h4><p>滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：</p>\n<blockquote>\n<ol>\n<li><code>&lt;file&gt;</code>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。</li>\n<li><code>&lt;append&gt;</code>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。</li>\n<li><code>&lt;encoder&gt;</code>：对记录事件进行格式化。</li>\n<li><code>&lt;rollingPolicy&gt;</code>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。</li>\n<li><code>&lt;triggeringPolicy &gt;</code>: 告知 RollingFileAppender 何时激活滚动。</li>\n<li><code>&lt;prudent&gt;</code>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。</li>\n</ol>\n</blockquote>\n<p>常用的policy，<code>TimeBasedRollingPolicy</code>根据时间节点滚动策略，<code>SizeBasedTriggeringPolicy</code>： 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点<code>&lt;maxFileSize&gt;</code>:这是活动文件的大小，默认值是10MB。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span>   </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span>   </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>logFile.%d&#123;yyyy-MM-dd&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span>   </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span>   </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span>   </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>    </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span>   </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>另外还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这些就不在这里讲解了，大家可以参考官方文档。当然大家可以编写自己的Appender。</p>\n<h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title></a><strong><encoder></encoder></strong></h3><p>负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。<br>目前PatternLayoutEncoder 是唯一有用的且默认的encoder ，有一个<code>&lt;pattern&gt;</code>节点，用来设置日志的输入格式。使用“%”加“转换符”方式，如果要输出“%”，则必须用“\\”对“\\%”进行转义。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span>   </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span>   </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>格式修饰符，与转换符共同使用：<br>可选的格式修饰符位于“%”和转换符之间。第一个可选修饰符是左对齐 标志，符号是减号“-”；接着是可选的最小宽度 修饰符，用十进制数表示。如果字符小于最小宽度，则左填充或右填充，默认是左填充（即右对齐），填充符为空格。如果字符大于最小宽度，字符永远不会被截断。最大宽度 修饰符，符号是点号”.”后面加十进制数。如果字符大于最大宽度，则从前面截断。点符号“.”后面加减号“-”在加数字，表示从尾部截断。</p>\n<p>例如：%-4relative 表示，将输出从程序启动到创建日志记录的时间 进行左对齐 且最小宽度为4。</p>\n<h2 id=\"完整的logback-xml\"><a href=\"#完整的logback-xml\" class=\"headerlink\" title=\"完整的logback.xml\"></a>完整的logback.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">-scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true</span></span><br><span class=\"line\"><span class=\"comment\">-scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。</span></span><br><span class=\"line\"><span class=\"comment\">-           当scan为true时，此属性生效。默认的时间间隔为1分钟</span></span><br><span class=\"line\"><span class=\"comment\">-de<span class=\"doctag\">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class=\"line\"><span class=\"comment\">-</span></span><br><span class=\"line\"><span class=\"comment\">- configuration 子节点为 appender、logger、root</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 second\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 负责写日志,控制台日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"STDOUT\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 一是把日志信息转换成字节数组,二是把字节数组写入到输出流 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%5level] [%thread] %logger&#123;0&#125; %msg%n<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 文件日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"DEBUG\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.FileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>debug.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- append: true,日志被追加到文件结尾; false,清空现存文件;默认是true --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- LevelFilter: 级别过滤器，根据日志级别进行过滤 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%5level] [%thread] %logger&#123;0&#125; %msg%n<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"INFO\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">File</span>&gt;</span>info.log<span class=\"tag\">&lt;/<span class=\"name\">File</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- ThresholdFilter:临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.ThresholdFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>INFO<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%5level] [%thread] %logger&#123;0&#125; %msg%n<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 每天生成一个日志文件，保存30天的日志文件</span></span><br><span class=\"line\"><span class=\"comment\">            - 如果隔一段时间没有输出日志，前面过期的日志不会被删除，只有再重新打印日志的时候，会触发删除过期日志的操作。</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>info.%d&#123;yyyy-MM-dd&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TimeBasedFileNamingAndTriggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">maxFileSize</span>&gt;</span>100MB<span class=\"tag\">&lt;/<span class=\"name\">maxFileSize</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TimeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span> &gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;!– 异常日志输出 –&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;appender name=\"EXCEPTION\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;file&gt;exception.log&lt;/file&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;!– 求值过滤器，评估、鉴别日志是否符合指定条件. 需要额外的两个JAR包，commons-compiler.jar和janino.jar –&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;filter class=\"ch.qos.logback.core.filter.EvaluatorFilter\"&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;!– 默认为 ch.qos.logback.classic.boolex.JaninoEventEvaluator –&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;evaluator&gt;--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--&lt;!– 过滤掉所有日志消息中不包含\"Exception\"字符串的日志 –&gt;--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--&lt;expression&gt;return message.contains(\"Exception\");&lt;/expression&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;/evaluator&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;OnMatch&gt;ACCEPT&lt;/OnMatch&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;OnMismatch&gt;DENY&lt;/OnMismatch&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;/filter&gt;--&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;!– 触发节点，按固定文件大小生成，超过5M，生成新的日志文件 –&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;maxFileSize&gt;5MB&lt;/maxFileSize&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;/triggeringPolicy&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;/appender&gt;--&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ERROR\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>error.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%5level] [%thread] %logger&#123;0&#125; %msg%n<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。</span></span><br><span class=\"line\"><span class=\"comment\">        -    窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。</span></span><br><span class=\"line\"><span class=\"comment\">        -    可以指定文件压缩选项</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>error.%d&#123;yyyy-MM&#125;(%i).log.zip<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">minIndex</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">minIndex</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxIndex</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">maxIndex</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">timeBasedFileNamingAndTriggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">maxFileSize</span>&gt;</span>100MB<span class=\"tag\">&lt;/<span class=\"name\">maxFileSize</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 异步输出 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span> =<span class=\"string\">\"ASYNC\"</span> <span class=\"attr\">class</span>= <span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">discardingThreshold</span> &gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">discardingThreshold</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>512<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span> =<span class=\"string\">\"ERROR\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    - 1.name：包名或类名，用来指定受此logger约束的某一个包或者具体的某一个类</span></span><br><span class=\"line\"><span class=\"comment\">    - 2.未设置打印级别，所以继承他的上级&lt;root&gt;的日志级别“DEBUG”</span></span><br><span class=\"line\"><span class=\"comment\">    - 3.未设置additivity，默认为true，将此logger的打印信息向上级传递；</span></span><br><span class=\"line\"><span class=\"comment\">    - 4.未设置appender，此logger本身不打印任何信息，级别为“DEBUG”及大于“DEBUG”的日志信息传递给root，</span></span><br><span class=\"line\"><span class=\"comment\">    -  root接到下级传递的信息，交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ch.qos.logback\"</span> /&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    - 1.将级别为“INFO”及大于“INFO”的日志信息交给此logger指定的名为“STDOUT”的appender处理，在控制台中打出日志，</span></span><br><span class=\"line\"><span class=\"comment\">    -   不再向次logger的上级 &lt;logger name=\"logback\"/&gt; 传递打印信息</span></span><br><span class=\"line\"><span class=\"comment\">    - 2.level：设置打印级别（TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF），还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。</span></span><br><span class=\"line\"><span class=\"comment\">    -        如果未设置此属性，那么当前logger将会继承上级的级别。</span></span><br><span class=\"line\"><span class=\"comment\">    - 3.additivity：为false，表示此logger的打印信息不再向上级传递,如果设置为true，会打印两次</span></span><br><span class=\"line\"><span class=\"comment\">    - 4.appender-ref：指定了名字为\"STDOUT\"的appender。</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.weizhi.common.LogMain\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"INFO\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"STDOUT\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"DEBUG\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"EXCEPTION\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"INFO\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"ERROR\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    - 根logger</span></span><br><span class=\"line\"><span class=\"comment\">    - level:设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。</span></span><br><span class=\"line\"><span class=\"comment\">    -       默认是DEBUG。</span></span><br><span class=\"line\"><span class=\"comment\">    -appender-ref:可以包含零个或多个&lt;appender-ref&gt;元素，标识这个appender将会添加到这个logger</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"STDOUT\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"DEBUG\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"EXCEPTION\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"INFO\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>logback和log4j是同一个人写的。logback重写了内核，比log4j更加强大，性能更好，因此log4j也可以被logback替代。</p>\n<p>slf4j这个jar只是提供了一些接口，供其他日志框架实现。类似于jdbc一样。通俗的讲，slf4j告诉系统，你通过我可以使用任何实现我接口的日志系统。允许最终用户在部署系统时使用其所希望的日子System，只需要更换jar包即可。</p>\n<p>因此建议logback和slf4j配合使用.</p>","more":"<h1 id=\"入门\"><a href=\"#入门\" class=\"headerlink\" title=\"入门\"></a>入门</h1><h2 id=\"导入jar依赖\"><a href=\"#导入jar依赖\" class=\"headerlink\" title=\"导入jar依赖\"></a>导入jar依赖</h2><p>logback分三个模块core（基础模块），classic（是log4j改进版，并且实现了slf4j接口,依赖core模块），access（与servlet容器集成，提供http访问记录功能）。</p>\n<p>这里我们主要用到slf4j-api,logback-classic,logback-core</p>\n<p>maven</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- base setting --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">project.build.sourceEncoding</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.locales</span>&gt;</span>zh_CN<span class=\"tag\">&lt;/<span class=\"name\">project.build.locales</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">project.build.jdk</span>&gt;</span>1.7<span class=\"tag\">&lt;/<span class=\"name\">project.build.jdk</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugin.maven-compiler</span>&gt;</span>3.1<span class=\"tag\">&lt;/<span class=\"name\">plugin.maven-compiler</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- lib versions --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">slf4j.version</span>&gt;</span>1.7.21<span class=\"tag\">&lt;/<span class=\"name\">slf4j.version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">logback.version</span>&gt;</span>1.2.3<span class=\"tag\">&lt;/<span class=\"name\">logback.version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-classic<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>logback-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;logback.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   这里有个地方需要注意一下，当我们在maven仓库中拷贝<code>logback-classic</code>依赖时，会有<code>&lt;scope&gt;test&lt;/scope&gt;</code>.  scope为test表示依赖项目仅仅参与测试相关的工作，包括测试代码的编译，执行。比较典型的如junit。<a href=\"http://blog.csdn.net/kimylrong/article/details/50353161\" target=\"_blank\" rel=\"noopener\">参考(maven secope详解)</a></p>\n</blockquote>\n<h2 id=\"简单应用\"><a href=\"#简单应用\" class=\"headerlink\" title=\"简单应用\"></a>简单应用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cack.logger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWord1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tLogger logger = LoggerFactory.getLogger(HelloWord1.class);</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">\"hello word\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>控制台输出</p>\n<p><code>13:22:30.228 [main] DEBUG com.cack.logger.HelloWord1 - hello word</code></p>\n<p>上面的例子可以看到，通过LoggerFactory可以获取一个logger，并且用logger的debug方法记录日子。</p>\n<p>这里都是用到的slf4j的类。看不出对logback的依赖。实际上输入内容是有slf4j的实现类，也就是logback-classic包中的实现类输出的。</p>\n<p>当使用logback输出日志的时候，它会默认去找logback-test.xml配置文件，如果没找到，会接着去找logback.xml配置文件，如果还没找到，就会使用默认的配置了。默认的配置是通过控制台输出。</p>\n<p>也可以通过下面的例子看出来这个流程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.cack.logger;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> ch.qos.logback.classic.LoggerContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ch.qos.logback.core.util.StatusPrinter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWord1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tLogger logger = LoggerFactory.getLogger(HelloWord1.class);</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">\"hello word\"</span>);</span><br><span class=\"line\">\t\tLoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();</span><br><span class=\"line\">\t\tStatusPrinter.print(lc);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   13:28:08.792 [main] DEBUG com.cack.logger.HelloWord1 - hello word<br>   13:28:08,744 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback-test.xml]<br>   13:28:08,744 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.groovy]<br>   13:28:08,744 |-INFO in ch.qos.logback.classic.LoggerContext[default] - Could NOT find resource [logback.xml]<br>   13:28:08,748 |-INFO in ch.qos.logback.classic.BasicConfigurator@6d5380c2 - Setting up default configuration.</p>\n</blockquote>\n<h2 id=\"Logger-Appender-Layout\"><a href=\"#Logger-Appender-Layout\" class=\"headerlink\" title=\"Logger,Appender,Layout\"></a>Logger,Appender,Layout</h2><p>Logback建立在这三个主要的类上，这三个类协同合作可以帮助使用者根据消息类型和消息级别输出日志，还可以在程序运行期间，控制消息的输出格式和输出目的地。</p>\n<h3 id=\"Logger-上下文\"><a href=\"#Logger-上下文\" class=\"headerlink\" title=\"Logger 上下文\"></a>Logger 上下文</h3><p>Logger主要日志输出类，负责日子的输出工作，可以被分级：TRACE，DEBUG，INFO，WARN，ERROR。如果Logger没有被定义级别，他会从他父类继承。</p>\n<h3 id=\"Appender-输出器\"><a href=\"#Appender-输出器\" class=\"headerlink\" title=\"Appender 输出器\"></a>Appender 输出器</h3><p>主要用于控制日志输出目的地，目前有控制台，文件，远程套接字服务器，数据库，jms，远程UNIX Syslog守护进程等多种appender。默认是控制台appender。</p>\n<p>可以为一个logger设置多个appender。</p>\n<h3 id=\"Layout格式化\"><a href=\"#Layout格式化\" class=\"headerlink\" title=\"Layout格式化\"></a>Layout格式化</h3><p>Layout 负责根据用户意愿对记录请求进行格式化，appender 负责将格式化后的输出发送到目的地。PatternLayout 是标准 logback 发行包的一部分，允许用户按照类似于 C 语言的 printf 函数的转换模式设置输出格式。</p>\n<h2 id=\"配置详解\"><a href=\"#配置详解\" class=\"headerlink\" title=\"配置详解\"></a>配置详解</h2><h3 id=\"包含的属性\"><a href=\"#包含的属性\" class=\"headerlink\" title=\"包含的属性\"></a><strong><configuration></configuration></strong>包含的属性</h3><blockquote>\n<ol>\n<li>scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true.</li>\n<li>scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟.</li>\n<li>debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 second\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置变量\"><a href=\"#设置变量\" class=\"headerlink\" title=\" 设置变量\"></a><strong><property></property></strong> 设置变量</h3><p>用来定义变量值的标签，该标签有两个属性<code>name</code>,<code>value</code>,定义的变量会存在logger的上下文中，可以使用${} 来使用变量</p>\n<h3 id=\"上下文名称\"><a href=\"#上下文名称\" class=\"headerlink\" title=\"上下文名称\"></a><strong><contextname></contextname></strong>上下文名称</h3><p>设置上下文名称，用来区分不同应用程序的输出，一旦设置不允许修改。下面结合<code>&lt;property&gt;</code>标签设置上下文</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cname\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"myApp\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">contextName</span>&gt;</span>$&#123;cname&#125;<span class=\"tag\">&lt;/<span class=\"name\">contextName</span>&gt;</span> </span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 上面两句等同于  &lt;contextName&gt;myApp&lt;/contextName&gt;--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取时间戳\"><a href=\"#获取时间戳\" class=\"headerlink\" title=\" 获取时间戳\"></a><strong><timestamp></timestamp></strong> 获取时间戳</h3><p>可以结合创建日志文件的时候作为文件名使用</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">timestamp</span> <span class=\"attr\">key</span>=<span class=\"string\">\"bySecond\"</span> <span class=\"attr\">datePattern</span>=<span class=\"string\">\"yyyyMMdd'T'HHmmss\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">timestamp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id><a href=\"#\" class=\"headerlink\" title></a><strong><logger></logger></strong></h3><p>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<code>&lt;appender&gt;</code>。<code>&lt;logger&gt;</code>仅有一个name属性，一个可选的level和一个可选的additivity属性。</p>\n<blockquote>\n<ol>\n<li>name：用来指定受此logger约束的某一个包或者具体的某一个类。</li>\n<li>level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。</li>\n<li>additivity：是否向上级logger传递打印信息。默认是true。</li>\n</ol>\n</blockquote>\n<p><code>&lt;logger&gt;</code>可以包含零个或多个<code>&lt;appender-ref&gt;</code>元素，标识这个appender将会添加到这个logger。</p>\n<p>当logger内没有配置appender的时候，本logger是不输出任何内容的。如果additivity设置为true的话，会把打印信息默认向上传输，父类配置了appender的话，就会输出日志信息了。</p>\n<h3 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title></a><strong><root></root></strong></h3><p>也是<code>&lt;logger&gt;</code>元素，但是它是根logger。只有一个level属性，应为已经被命名为”root”.</p>\n<blockquote>\n<ol>\n<li>level：用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。默认是DEBUG。</li>\n</ol>\n</blockquote>\n<p><code>&lt;root&gt;</code>可以包含零个或多个<code>&lt;appender-ref&gt;</code>元素，标识这个appender将会添加到这个logger。</p>\n<h3 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a><strong><appender></appender></strong>详解</h3><p><code>&lt;appender&gt;</code>是<code>&lt;configuration&gt;</code>的子节点，是负责写日志的组件。<code>&lt;appender&gt;</code>有两个必要属性<code>name</code>和<code>class</code>。<code>name</code>指定<code>appender</code>名称，<code>class</code>指定<code>appender</code>的全限定名。</p>\n<h4 id=\"ConsoleAppender\"><a href=\"#ConsoleAppender\" class=\"headerlink\" title=\"ConsoleAppender\"></a>ConsoleAppender</h4><p>把日志打印到控制台，有以下两个节点</p>\n<blockquote>\n<ol>\n<li><code>&lt;encoder&gt;</code>:对日志进行格式化。encoder有个默认的layout <code>PatternLayoutEncoder</code></li>\n<li><code>&lt;target&gt;</code>：字符串 System.out 或者 System.err ，默认 System.out .</li>\n</ol>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"STDOUT\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"STDOUT\"</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"FileAppender\"><a href=\"#FileAppender\" class=\"headerlink\" title=\"FileAppender\"></a>FileAppender</h4><p>把日志添加到文件，有以下子节点：</p>\n<blockquote>\n<ol>\n<li><code>&lt;file&gt;</code>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。</li>\n<li><code>&lt;append&gt;</code>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。</li>\n<li><code>&lt;encoder&gt;</code>：对记录事件进行格式化。</li>\n<li><code>&lt;prudent&gt;</code>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.FileAppender\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>testFile.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span>  </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>  </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"RollingFIleAppender\"><a href=\"#RollingFIleAppender\" class=\"headerlink\" title=\"RollingFIleAppender\"></a>RollingFIleAppender</h4><p>滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：</p>\n<blockquote>\n<ol>\n<li><code>&lt;file&gt;</code>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。</li>\n<li><code>&lt;append&gt;</code>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。</li>\n<li><code>&lt;encoder&gt;</code>：对记录事件进行格式化。</li>\n<li><code>&lt;rollingPolicy&gt;</code>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。</li>\n<li><code>&lt;triggeringPolicy &gt;</code>: 告知 RollingFileAppender 何时激活滚动。</li>\n<li><code>&lt;prudent&gt;</code>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。</li>\n</ol>\n</blockquote>\n<p>常用的policy，<code>TimeBasedRollingPolicy</code>根据时间节点滚动策略，<code>SizeBasedTriggeringPolicy</code>： 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。只有一个节点<code>&lt;maxFileSize&gt;</code>:这是活动文件的大小，默认值是10MB。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"FILE\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span>   </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span>   </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>logFile.%d&#123;yyyy-MM-dd&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span>   </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span>    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span>   </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span>   </span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span>    </span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span>   </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"FILE\"</span> /&gt;</span>   </span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span>   </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>另外还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这些就不在这里讲解了，大家可以参考官方文档。当然大家可以编写自己的Appender。</p>\n<h3 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title></a><strong><encoder></encoder></strong></h3><p>负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流。<br>目前PatternLayoutEncoder 是唯一有用的且默认的encoder ，有一个<code>&lt;pattern&gt;</code>节点，用来设置日志的输入格式。使用“%”加“转换符”方式，如果要输出“%”，则必须用“\\”对“\\%”进行转义。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span>   </span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class=\"tag\">&lt;/<span class=\"name\">pattern</span>&gt;</span>   </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>格式修饰符，与转换符共同使用：<br>可选的格式修饰符位于“%”和转换符之间。第一个可选修饰符是左对齐 标志，符号是减号“-”；接着是可选的最小宽度 修饰符，用十进制数表示。如果字符小于最小宽度，则左填充或右填充，默认是左填充（即右对齐），填充符为空格。如果字符大于最小宽度，字符永远不会被截断。最大宽度 修饰符，符号是点号”.”后面加十进制数。如果字符大于最大宽度，则从前面截断。点符号“.”后面加减号“-”在加数字，表示从尾部截断。</p>\n<p>例如：%-4relative 表示，将输出从程序启动到创建日志记录的时间 进行左对齐 且最小宽度为4。</p>\n<h2 id=\"完整的logback-xml\"><a href=\"#完整的logback-xml\" class=\"headerlink\" title=\"完整的logback.xml\"></a>完整的logback.xml</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">-scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true</span></span><br><span class=\"line\"><span class=\"comment\">-scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。</span></span><br><span class=\"line\"><span class=\"comment\">-           当scan为true时，此属性生效。默认的时间间隔为1分钟</span></span><br><span class=\"line\"><span class=\"comment\">-de<span class=\"doctag\">bug:</span>当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</span></span><br><span class=\"line\"><span class=\"comment\">-</span></span><br><span class=\"line\"><span class=\"comment\">- configuration 子节点为 appender、logger、root</span></span><br><span class=\"line\"><span class=\"comment\">--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">scan</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">scanPeriod</span>=<span class=\"string\">\"60 second\"</span> <span class=\"attr\">debug</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 负责写日志,控制台日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"STDOUT\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.ConsoleAppender\"</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 一是把日志信息转换成字节数组,二是把字节数组写入到输出流 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%5level] [%thread] %logger&#123;0&#125; %msg%n<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 文件日志 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"DEBUG\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.FileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>debug.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- append: true,日志被追加到文件结尾; false,清空现存文件;默认是true --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">append</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">append</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.LevelFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- LevelFilter: 级别过滤器，根据日志级别进行过滤 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>DEBUG<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMatch</span>&gt;</span>ACCEPT<span class=\"tag\">&lt;/<span class=\"name\">onMatch</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">onMismatch</span>&gt;</span>DENY<span class=\"tag\">&lt;/<span class=\"name\">onMismatch</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%5level] [%thread] %logger&#123;0&#125; %msg%n<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"INFO\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">File</span>&gt;</span>info.log<span class=\"tag\">&lt;/<span class=\"name\">File</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- ThresholdFilter:临界值过滤器，过滤掉 TRACE 和 DEBUG 级别的日志 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.classic.filter.ThresholdFilter\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">level</span>&gt;</span>INFO<span class=\"tag\">&lt;/<span class=\"name\">level</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%5level] [%thread] %logger&#123;0&#125; %msg%n<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 每天生成一个日志文件，保存30天的日志文件</span></span><br><span class=\"line\"><span class=\"comment\">            - 如果隔一段时间没有输出日志，前面过期的日志不会被删除，只有再重新打印日志的时候，会触发删除过期日志的操作。</span></span><br><span class=\"line\"><span class=\"comment\">            --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>info.%d&#123;yyyy-MM-dd&#125;.log<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">TimeBasedFileNamingAndTriggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">maxFileSize</span>&gt;</span>100MB<span class=\"tag\">&lt;/<span class=\"name\">maxFileSize</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">TimeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span> &gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;!– 异常日志输出 –&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;appender name=\"EXCEPTION\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;file&gt;exception.log&lt;/file&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;!– 求值过滤器，评估、鉴别日志是否符合指定条件. 需要额外的两个JAR包，commons-compiler.jar和janino.jar –&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;filter class=\"ch.qos.logback.core.filter.EvaluatorFilter\"&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;!– 默认为 ch.qos.logback.classic.boolex.JaninoEventEvaluator –&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;evaluator&gt;--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--&lt;!– 过滤掉所有日志消息中不包含\"Exception\"字符串的日志 –&gt;--&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--&lt;expression&gt;return message.contains(\"Exception\");&lt;/expression&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;/evaluator&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;OnMatch&gt;ACCEPT&lt;/OnMatch&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;OnMismatch&gt;DENY&lt;/OnMismatch&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;/filter&gt;--&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;triggeringPolicy class=\"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy\"&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;!– 触发节点，按固定文件大小生成，超过5M，生成新的日志文件 –&gt;--&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--&lt;maxFileSize&gt;5MB&lt;/maxFileSize&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;/triggeringPolicy&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;/appender&gt;--&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ERROR\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.RollingFileAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">file</span>&gt;</span>error.log<span class=\"tag\">&lt;/<span class=\"name\">file</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Pattern</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;] [%5level] [%thread] %logger&#123;0&#125; %msg%n<span class=\"tag\">&lt;/<span class=\"name\">Pattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">charset</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">charset</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">encoder</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。</span></span><br><span class=\"line\"><span class=\"comment\">        -    窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。</span></span><br><span class=\"line\"><span class=\"comment\">        -    可以指定文件压缩选项</span></span><br><span class=\"line\"><span class=\"comment\">        --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">rollingPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.FixedWindowRollingPolicy\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">fileNamePattern</span>&gt;</span>error.%d&#123;yyyy-MM&#125;(%i).log.zip<span class=\"tag\">&lt;/<span class=\"name\">fileNamePattern</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">minIndex</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">minIndex</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxIndex</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">maxIndex</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">timeBasedFileNamingAndTriggeringPolicy</span> <span class=\"attr\">class</span>=<span class=\"string\">\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\"</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">maxFileSize</span>&gt;</span>100MB<span class=\"tag\">&lt;/<span class=\"name\">maxFileSize</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">maxHistory</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">maxHistory</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">rollingPolicy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 异步输出 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span> =<span class=\"string\">\"ASYNC\"</span> <span class=\"attr\">class</span>= <span class=\"string\">\"ch.qos.logback.classic.AsyncAppender\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">discardingThreshold</span> &gt;</span>0<span class=\"tag\">&lt;/<span class=\"name\">discardingThreshold</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">queueSize</span>&gt;</span>512<span class=\"tag\">&lt;/<span class=\"name\">queueSize</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span> =<span class=\"string\">\"ERROR\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    - 1.name：包名或类名，用来指定受此logger约束的某一个包或者具体的某一个类</span></span><br><span class=\"line\"><span class=\"comment\">    - 2.未设置打印级别，所以继承他的上级&lt;root&gt;的日志级别“DEBUG”</span></span><br><span class=\"line\"><span class=\"comment\">    - 3.未设置additivity，默认为true，将此logger的打印信息向上级传递；</span></span><br><span class=\"line\"><span class=\"comment\">    - 4.未设置appender，此logger本身不打印任何信息，级别为“DEBUG”及大于“DEBUG”的日志信息传递给root，</span></span><br><span class=\"line\"><span class=\"comment\">    -  root接到下级传递的信息，交给已经配置好的名为“STDOUT”的appender处理，“STDOUT”appender将信息打印到控制台；</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"ch.qos.logback\"</span> /&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    - 1.将级别为“INFO”及大于“INFO”的日志信息交给此logger指定的名为“STDOUT”的appender处理，在控制台中打出日志，</span></span><br><span class=\"line\"><span class=\"comment\">    -   不再向次logger的上级 &lt;logger name=\"logback\"/&gt; 传递打印信息</span></span><br><span class=\"line\"><span class=\"comment\">    - 2.level：设置打印级别（TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF），还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。</span></span><br><span class=\"line\"><span class=\"comment\">    -        如果未设置此属性，那么当前logger将会继承上级的级别。</span></span><br><span class=\"line\"><span class=\"comment\">    - 3.additivity：为false，表示此logger的打印信息不再向上级传递,如果设置为true，会打印两次</span></span><br><span class=\"line\"><span class=\"comment\">    - 4.appender-ref：指定了名字为\"STDOUT\"的appender。</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">\"com.weizhi.common.LogMain\"</span> <span class=\"attr\">level</span>=<span class=\"string\">\"INFO\"</span> <span class=\"attr\">additivity</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"STDOUT\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"DEBUG\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"EXCEPTION\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"INFO\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"ERROR\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">logger</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">    - 根logger</span></span><br><span class=\"line\"><span class=\"comment\">    - level:设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，不能设置为INHERITED或者同义词NULL。</span></span><br><span class=\"line\"><span class=\"comment\">    -       默认是DEBUG。</span></span><br><span class=\"line\"><span class=\"comment\">    -appender-ref:可以包含零个或多个&lt;appender-ref&gt;元素，标识这个appender将会添加到这个logger</span></span><br><span class=\"line\"><span class=\"comment\">    --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">\"DEBUG\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"STDOUT\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"DEBUG\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"EXCEPTION\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--&lt;appender-ref ref=\"INFO\"/&gt;--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"ASYNC\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"初识MongoDB","date":"2019-03-15T08:41:33.000Z","_content":"\n# MongoDB\n\n非关系型数据库；分布式文档存储数据库。内容大部分以json的格式存储\n\n在`MongoDB`中基本概念是 文档（document）、集合(collection)、数据库(database)、数据字段\\域（field）\n\n一个`MongoDB`中可以创建多个数据库\n\nadmin： 从权限的角度来看，这是\"root\"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\nlocal: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合\nconfig: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。\n\nMongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。\n\n<!-- more -->\n\n# 下载\n\nwindows 下载地址：https://www.mongodb.com/download-center/community?jmp=docs\n\n选择对应的系统版本和安装方式，点击下载即可\n\n# 安装\n\n1.   点击安装文件，一路next\n2.   在安装过程中，可以设置db存储路径和日志输出路径\n3.   不要勾选`Install MongoDB Compass`，因为会联网安装，在国内的话，还是省省吧\n4.   最后点击`Install`等着就行了\n\n>    我当时安装完，去在安装页面设置的路径中查找我刚安装的MongoDB，结果一脸懵逼，这里只有看其他教程需要手动创建的db和log文件夹，bin文件目录呢？？？\n>\n>    试想，会不会给我装到C盘了，一看果然如此，在C盘的`Program Files`目录下。安装时没认真看选择路径，就先放这里吧\n\n>    后来看了官方文档，当前版本4.0 是可以选择以服务形式安装，就会默认创建好`mongod.cfg`配置文件。并默认安装到C盘。\n>\n>    并且会默认创建一个`MongoDB`的服务，等安装成功后会自动启动。\n\n# 运行\n\n因为前面我们选择了自动安装服务的模式，因此可以去bin目录下直接运行`mongo.exe`\n\n```shell\nMongoDB shell version v4.0.6\nconnecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb\nImplicit session: session { \"id\" : UUID(\"4b452b86-6bff-4780-9920-286b6f1114dc\") }\nMongoDB server version: 4.0.6\nWelcome to the MongoDB shell.\nFor interactive help, type \"help\".\nFor more comprehensive documentation, see\n        http://docs.mongodb.org/\nQuestions? Try the support group\n        http://groups.google.com/group/mongodb-user\nServer has startup warnings:\n2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten]\n2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.\n2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.\n2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten]\n---\nEnable MongoDB's free cloud-based monitoring service, which will then receive and display\nmetrics about your deployment (disk utilization, CPU, operation statistics, etc).\n\nThe monitoring data will be available on a MongoDB website with a unique URL accessible to you\nand anyone you share the URL with. MongoDB may use this information to make product\nimprovements and to suggest MongoDB products and deployment options to you.\n\nTo enable free monitoring, run the following command: db.enableFreeMonitoring()\nTo permanently disable this reminder, run the following command: db.disableFreeMonitoring()\n---\n```\n\n启动成功。\n\n或者在浏览器中输入`localhost:27017` 页面显示\n\n`It looks like you are trying to access MongoDB over HTTP on the native driver port.`\n\n也表示启动成功\n\n# 使用MongoDB\n\n## 常用命令\n\n1.   show dbs    显示数据库列表\n2.   user dbname 进入某个库\n3.   show collections   显示集合列表（关系型数据库中的表）\n4.   help 查看MongoDB支持哪些命令\n5.   db.help() 查看当前数据库支持哪些方法\n\n## 创建 & 新增\n\n数据库方面操作\n\n1.   use db_name  切换数据库，如果不存在则自动创建\n2.   db.getName() 查看当前数据库名字 可以简写：`db`\n3.   db.stats() 查看当前数据库状态，包括名字，有多少个集合等\n4.   db.dropDatabase() 删除当前数据库\n\n集合操作\n\n1.   db.createCollection('collection_name')  创建集合\n\n     | 字段          |  类型  | 描述                                       |\n     | ----------- | :--: | ---------------------------------------- |\n     | capped      |  布尔  | （可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。**当该值为 true 时，必须指定 size 参数。** |\n     | autoIndexId |  布尔  | （可选）如为 true，自动在 _id 字段创建索引。默认为 false。    |\n     | size        |  数值  | （可选）为固定集合指定一个最大值（以字节计）。**如果 capped 为 true，也需要指定该字段。** |\n     | max         |  数值  | （可选）指定固定集合中包含文档的最大数量。                    |\n\n     >相当于关系型数据库中创建表\n     >\n     >```json\n     >db.createCollection(\"mycol\",{capped:true,autoIndexId:true,size:6142800,max:1000})\n     >```\n     >\n\n2.   db.col.insert() 向集合中添加内容，如果集合不存在，会自动创建\n\n     ```json\n     db.user.insert({uname:\"gaofeng\"}) -- 添加一个名为user的集合，并添加一条数据\n     ```\n\n3.   db.col.drop()  可以删除集合\n\n插入一条数据\n\n1.    db.col.insert({username:\"gaofeng\",age:25,address:\"北京\"})  插入一条数据\n2.    也可以声明一个对象：\n\n>    ```json\n>    users = {uname:\"lisi\",age:25,address:\"beijing\"}\n>    users   -- 再次输入可以查看\n>    { \"uname\" : \"lisi\", \"age\" : 25, \"address\" : \"beijing\" }\n>    ```\n>\n>    db.col.insert(users) 进行插入\n>\n>    db.col.save(users) 也可以进行插入，当提供objectId的时候，就是更新操作了\n\n# 更新\n\nupdate() 和 save() 方法都可以完成更新操作\n\n1.   db.col.update(`<query>`,`<update>`,{upsert:`<boolean>`,multi:`<boolean>`,writeConcern:`<document>`})\n\n>    query : update的查询条件，例如要查询uname为gaofeng的，这里可以直接写{uname:\"gaofeng\"}\n>\n>    update : update的对象和一些更新的操作符，对应sql中set后面的内容\n>\n>    upsert : 可选，表示如果不存在更新的内容，是否插入新的文档，true为插入，false不插入，默认为false\n>\n>    multi : 可选，默认为false，只更新找到的第一条，如果设置为true，则更新所有符合条件的记录\n>\n>    writeConcern : 可选，抛出异常的级别\n>\n>    ```json\n>    > db.user.update({uname:\"gaofeng\"},{$set:{age:15}},{multi:true})\n>    WriteResult({ \"nMatched\" : 2, \"nUpserted\" : 0, \"nModified\" : 2 })\n>    ```\n>\n>    更新了两条记录\n\n2.   db.col.save(`<document>`,writeConcern:`<document>`)\n\n     前面介绍过，save一条数据时，如果带有objectId值，并且该值在集合中存在，就会自动执行更新操作。如果没有，则执行插入操作。\n\n# 删除\n\n删除使用`db.col.remove()`\n\n>    语法：db.col.remove(`<query>`,{justOne:`<boolean>`,writeConcern:`<document>`})\n>\n>    query: 可选，删除的赛选条件，相当于sql中where后面的内容\n>\n>    justOne：可选，如果为true或1，则只删除符合条件的第一条文档，反之删除所有，默认为false；\n\n实例：\n\n```json\ndb.col.remove({uname:'gaofeng'},{justOne:true})  //删除名字为gaofeng的第一条文档\n\ndb.col.remove({})   //删除所有数据\n```\n\n# 查询\n\n语法：\n\n>    db.col.find(query,projection)\n>\n>    query : 可选，查询条件\n>\n>    projection ： 使用投影操作符指定返回的键，如果要返回所有键值，忽略这个参数\n>\n>    db.col.find().pretty() 可以格式化显示查询结果\n>\n>    ```json\n>    > db.user.find({uname:'gaofeng'}).pretty()\n>    {\n>            \"_id\" : ObjectId(\"5c8b716e4a5c57c4ada08ab6\"),\n>            \"uname\" : \"gaofeng\",\n>            \"age\" : 15\n>    }\n>    {\n>            \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"),\n>            \"uname\" : \"gaofeng\",\n>            \"age\" : 15\n>    }\n>    ```\n>\n>    \n\nMongoDB 于 SQL中的语法比较\n\n| 操作    | 格式           | 范例                                       | RDBMS中的类似语句         |\n| ----- | ------------ | ---------------------------------------- | ------------------- |\n| 等于    | `{:`}        | `db.col.find({\"by\":\"菜鸟教程\"}).pretty()`    | `where by = '菜鸟教程'` |\n| 小于    | `{:{$lt:}}`  | `db.col.find({\"likes\":{$lt:50}}).pretty()` | `where likes < 50`  |\n| 小于或等于 | `{:{$lte:}}` | `db.col.find({\"likes\":{$lte:50}}).pretty()` | `where likes <= 50` |\n| 大于    | `{:{$gt:}}`  | `db.col.find({\"likes\":{$gt:50}}).pretty()` | `where likes > 50`  |\n| 大于或等于 | `{:{$gte:}}` | `db.col.find({\"likes\":{$gte:50}}).pretty()` | `where likes >= 50` |\n| 不等于   | `{:{$ne:}}`  | `db.col.find({\"likes\":{$ne:50}}).pretty()` | `where likes != 50` |\n\n## and查询\n\n当需要以多个键值对为条件查询时，默认使用and关系查询\n\n```json\n> db.user.find({uname:'gaofeng',age:15}).pretty()\n{\n        \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"),\n        \"uname\" : \"gaofeng\",\n        \"age\" : 15\n}\n\n//类似于SQL中的：where uname = 'gaofeng' and age = 15\n```\n\n## or查询\n\n使用$or关键字，后面跟条件数组\n\n```json\n> db.user.find({$or:[{uname:'zhangsan'},{age:15}]}).pretty()\n{\n        \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"),\n        \"uname\" : \"gaofeng\",\n        \"age\" : 15\n}\n{\n        \"_id\" : ObjectId(\"5c8f66974a5c57c4ada08aba\"),\n        \"uname\" : \"zhangsan\",\n        \"age\" : 25,\n        \"address\" : \"beijing\"\n}\n//类似于SQL中的： where uname = 'zhangsan' or age = 15\n```\n\n## and 和 or 联合查询\n\n```json\n> db.user.find({age:{$gt:15},$or:[{uname:'zhangsan'},{address:'beijing'}]}).pretty()\n{\n        \"_id\" : ObjectId(\"5c8f66974a5c57c4ada08aba\"),\n        \"uname\" : \"zhangsan\",\n        \"age\" : 25,\n        \"address\" : \"beijing\"\n}\n// where age > 15 and (uname = 'zhangsan' or address = 'beijing')\n```\n\n## $type 查询操作符\n\n在mongoDB的集合中，一个键可以对应多种类型的数据，例如：uname可以是代号12345，也可以是字符串`gaofeng`。那么我们想查询uname的值为字符串的文档，怎么查询呢，就使用到了$type\n\n```json\n> db.user.update({uname:'zhangsan'},{$set:{age:'25'}})   //先把名字为zhangsan的年龄改为字符串\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.user.find({age:{$type:'string'}}).pretty()  //查询年龄值为字符串类型的所有文档\n{\n        \"_id\" : ObjectId(\"5c8f66974a5c57c4ada08aba\"),\n        \"uname\" : \"zhangsan\",\n        \"age\" : \"25\",\n        \"address\" : \"beijing\"\n}\n```\n\n## limit() 和 skip()实现分页查询\n\ndb.col.find().limit(NUMBER)，其中NUMBER参数表示要查询多少条数据\n\ndb.col.find().limit(NUMBER).skip(COUNT)，skip()方法表示跳过多少条数据\n\n```json\n> db.user.find()   //查询所有\n{ \"_id\" : ObjectId(\"5c8b716e4a5c57c4ada08ab6\"), \"uname\" : \"gaofeng\", \"age\" : 28, \"address\" : \"shanghai\" }\n{ \"_id\" : ObjectId(\"5c8b72a74a5c57c4ada08ab7\") }\n{ \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"), \"uname\" : \"gaofeng\", \"age\" : 15 }\n{ \"_id\" : ObjectId(\"5c8effca4a5c57c4ada08ab9\"), \"user\" : \"xiaoming\" }\n{ \"_id\" : ObjectId(\"5c8f66974a5c57c4ada08aba\"), \"uname\" : \"zhangsan\", \"age\" : \"25\", \"address\" : \"beijing\" }\n> db.user.find().limit(2) //查询两条数据\n{ \"_id\" : ObjectId(\"5c8b716e4a5c57c4ada08ab6\"), \"uname\" : \"gaofeng\", \"age\" : 28, \"address\" : \"shanghai\" }\n{ \"_id\" : ObjectId(\"5c8b72a74a5c57c4ada08ab7\") }\n//假如每页2条数据，我想查询第二页的数据，也就是当前页-1*2，这是要跳过的条数\n> db.user.find().limit(2).skip(2)\n{ \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"), \"uname\" : \"gaofeng\", \"age\" : 15 }\n{ \"_id\" : ObjectId(\"5c8effca4a5c57c4ada08ab9\"), \"user\" : \"xiaoming\" }\n>\n\n```\n\n## sort()排序\n\n1 表示升序  ，-1 表示降序\n\n```json\n> db.user.update({age:{$type:'string'}},{$set:{age:25}})  //先把年龄改成数字\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.user.find().sort({age:1})  //按照年龄升序\n{ \"_id\" : ObjectId(\"5c8b72a74a5c57c4ada08ab7\") }\n{ \"_id\" : ObjectId(\"5c8effca4a5c57c4ada08ab9\"), \"user\" : \"xiaoming\" }\n{ \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"), \"uname\" : \"gaofeng\", \"age\" : 15 }\n{ \"_id\" : ObjectId(\"5c8f66974a5c57c4ada08aba\"), \"uname\" : \"zhangsan\", \"age\" : 25, \"address\" : \"beijing\" }\n{ \"_id\" : ObjectId(\"5c8b716e4a5c57c4ada08ab6\"), \"uname\" : \"gaofeng\", \"age\" : 28, \"address\" : \"shanghai\" }\n```\n\n","source":"_posts/mongodb.md","raw":"---\ntitle: 初识MongoDB\ndate: 2019-03-15 16:41:33\ntags: [mongoDB]\n---\n\n# MongoDB\n\n非关系型数据库；分布式文档存储数据库。内容大部分以json的格式存储\n\n在`MongoDB`中基本概念是 文档（document）、集合(collection)、数据库(database)、数据字段\\域（field）\n\n一个`MongoDB`中可以创建多个数据库\n\nadmin： 从权限的角度来看，这是\"root\"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。\nlocal: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合\nconfig: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。\n\nMongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。\n\n<!-- more -->\n\n# 下载\n\nwindows 下载地址：https://www.mongodb.com/download-center/community?jmp=docs\n\n选择对应的系统版本和安装方式，点击下载即可\n\n# 安装\n\n1.   点击安装文件，一路next\n2.   在安装过程中，可以设置db存储路径和日志输出路径\n3.   不要勾选`Install MongoDB Compass`，因为会联网安装，在国内的话，还是省省吧\n4.   最后点击`Install`等着就行了\n\n>    我当时安装完，去在安装页面设置的路径中查找我刚安装的MongoDB，结果一脸懵逼，这里只有看其他教程需要手动创建的db和log文件夹，bin文件目录呢？？？\n>\n>    试想，会不会给我装到C盘了，一看果然如此，在C盘的`Program Files`目录下。安装时没认真看选择路径，就先放这里吧\n\n>    后来看了官方文档，当前版本4.0 是可以选择以服务形式安装，就会默认创建好`mongod.cfg`配置文件。并默认安装到C盘。\n>\n>    并且会默认创建一个`MongoDB`的服务，等安装成功后会自动启动。\n\n# 运行\n\n因为前面我们选择了自动安装服务的模式，因此可以去bin目录下直接运行`mongo.exe`\n\n```shell\nMongoDB shell version v4.0.6\nconnecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb\nImplicit session: session { \"id\" : UUID(\"4b452b86-6bff-4780-9920-286b6f1114dc\") }\nMongoDB server version: 4.0.6\nWelcome to the MongoDB shell.\nFor interactive help, type \"help\".\nFor more comprehensive documentation, see\n        http://docs.mongodb.org/\nQuestions? Try the support group\n        http://groups.google.com/group/mongodb-user\nServer has startup warnings:\n2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten]\n2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.\n2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.\n2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten]\n---\nEnable MongoDB's free cloud-based monitoring service, which will then receive and display\nmetrics about your deployment (disk utilization, CPU, operation statistics, etc).\n\nThe monitoring data will be available on a MongoDB website with a unique URL accessible to you\nand anyone you share the URL with. MongoDB may use this information to make product\nimprovements and to suggest MongoDB products and deployment options to you.\n\nTo enable free monitoring, run the following command: db.enableFreeMonitoring()\nTo permanently disable this reminder, run the following command: db.disableFreeMonitoring()\n---\n```\n\n启动成功。\n\n或者在浏览器中输入`localhost:27017` 页面显示\n\n`It looks like you are trying to access MongoDB over HTTP on the native driver port.`\n\n也表示启动成功\n\n# 使用MongoDB\n\n## 常用命令\n\n1.   show dbs    显示数据库列表\n2.   user dbname 进入某个库\n3.   show collections   显示集合列表（关系型数据库中的表）\n4.   help 查看MongoDB支持哪些命令\n5.   db.help() 查看当前数据库支持哪些方法\n\n## 创建 & 新增\n\n数据库方面操作\n\n1.   use db_name  切换数据库，如果不存在则自动创建\n2.   db.getName() 查看当前数据库名字 可以简写：`db`\n3.   db.stats() 查看当前数据库状态，包括名字，有多少个集合等\n4.   db.dropDatabase() 删除当前数据库\n\n集合操作\n\n1.   db.createCollection('collection_name')  创建集合\n\n     | 字段          |  类型  | 描述                                       |\n     | ----------- | :--: | ---------------------------------------- |\n     | capped      |  布尔  | （可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。**当该值为 true 时，必须指定 size 参数。** |\n     | autoIndexId |  布尔  | （可选）如为 true，自动在 _id 字段创建索引。默认为 false。    |\n     | size        |  数值  | （可选）为固定集合指定一个最大值（以字节计）。**如果 capped 为 true，也需要指定该字段。** |\n     | max         |  数值  | （可选）指定固定集合中包含文档的最大数量。                    |\n\n     >相当于关系型数据库中创建表\n     >\n     >```json\n     >db.createCollection(\"mycol\",{capped:true,autoIndexId:true,size:6142800,max:1000})\n     >```\n     >\n\n2.   db.col.insert() 向集合中添加内容，如果集合不存在，会自动创建\n\n     ```json\n     db.user.insert({uname:\"gaofeng\"}) -- 添加一个名为user的集合，并添加一条数据\n     ```\n\n3.   db.col.drop()  可以删除集合\n\n插入一条数据\n\n1.    db.col.insert({username:\"gaofeng\",age:25,address:\"北京\"})  插入一条数据\n2.    也可以声明一个对象：\n\n>    ```json\n>    users = {uname:\"lisi\",age:25,address:\"beijing\"}\n>    users   -- 再次输入可以查看\n>    { \"uname\" : \"lisi\", \"age\" : 25, \"address\" : \"beijing\" }\n>    ```\n>\n>    db.col.insert(users) 进行插入\n>\n>    db.col.save(users) 也可以进行插入，当提供objectId的时候，就是更新操作了\n\n# 更新\n\nupdate() 和 save() 方法都可以完成更新操作\n\n1.   db.col.update(`<query>`,`<update>`,{upsert:`<boolean>`,multi:`<boolean>`,writeConcern:`<document>`})\n\n>    query : update的查询条件，例如要查询uname为gaofeng的，这里可以直接写{uname:\"gaofeng\"}\n>\n>    update : update的对象和一些更新的操作符，对应sql中set后面的内容\n>\n>    upsert : 可选，表示如果不存在更新的内容，是否插入新的文档，true为插入，false不插入，默认为false\n>\n>    multi : 可选，默认为false，只更新找到的第一条，如果设置为true，则更新所有符合条件的记录\n>\n>    writeConcern : 可选，抛出异常的级别\n>\n>    ```json\n>    > db.user.update({uname:\"gaofeng\"},{$set:{age:15}},{multi:true})\n>    WriteResult({ \"nMatched\" : 2, \"nUpserted\" : 0, \"nModified\" : 2 })\n>    ```\n>\n>    更新了两条记录\n\n2.   db.col.save(`<document>`,writeConcern:`<document>`)\n\n     前面介绍过，save一条数据时，如果带有objectId值，并且该值在集合中存在，就会自动执行更新操作。如果没有，则执行插入操作。\n\n# 删除\n\n删除使用`db.col.remove()`\n\n>    语法：db.col.remove(`<query>`,{justOne:`<boolean>`,writeConcern:`<document>`})\n>\n>    query: 可选，删除的赛选条件，相当于sql中where后面的内容\n>\n>    justOne：可选，如果为true或1，则只删除符合条件的第一条文档，反之删除所有，默认为false；\n\n实例：\n\n```json\ndb.col.remove({uname:'gaofeng'},{justOne:true})  //删除名字为gaofeng的第一条文档\n\ndb.col.remove({})   //删除所有数据\n```\n\n# 查询\n\n语法：\n\n>    db.col.find(query,projection)\n>\n>    query : 可选，查询条件\n>\n>    projection ： 使用投影操作符指定返回的键，如果要返回所有键值，忽略这个参数\n>\n>    db.col.find().pretty() 可以格式化显示查询结果\n>\n>    ```json\n>    > db.user.find({uname:'gaofeng'}).pretty()\n>    {\n>            \"_id\" : ObjectId(\"5c8b716e4a5c57c4ada08ab6\"),\n>            \"uname\" : \"gaofeng\",\n>            \"age\" : 15\n>    }\n>    {\n>            \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"),\n>            \"uname\" : \"gaofeng\",\n>            \"age\" : 15\n>    }\n>    ```\n>\n>    \n\nMongoDB 于 SQL中的语法比较\n\n| 操作    | 格式           | 范例                                       | RDBMS中的类似语句         |\n| ----- | ------------ | ---------------------------------------- | ------------------- |\n| 等于    | `{:`}        | `db.col.find({\"by\":\"菜鸟教程\"}).pretty()`    | `where by = '菜鸟教程'` |\n| 小于    | `{:{$lt:}}`  | `db.col.find({\"likes\":{$lt:50}}).pretty()` | `where likes < 50`  |\n| 小于或等于 | `{:{$lte:}}` | `db.col.find({\"likes\":{$lte:50}}).pretty()` | `where likes <= 50` |\n| 大于    | `{:{$gt:}}`  | `db.col.find({\"likes\":{$gt:50}}).pretty()` | `where likes > 50`  |\n| 大于或等于 | `{:{$gte:}}` | `db.col.find({\"likes\":{$gte:50}}).pretty()` | `where likes >= 50` |\n| 不等于   | `{:{$ne:}}`  | `db.col.find({\"likes\":{$ne:50}}).pretty()` | `where likes != 50` |\n\n## and查询\n\n当需要以多个键值对为条件查询时，默认使用and关系查询\n\n```json\n> db.user.find({uname:'gaofeng',age:15}).pretty()\n{\n        \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"),\n        \"uname\" : \"gaofeng\",\n        \"age\" : 15\n}\n\n//类似于SQL中的：where uname = 'gaofeng' and age = 15\n```\n\n## or查询\n\n使用$or关键字，后面跟条件数组\n\n```json\n> db.user.find({$or:[{uname:'zhangsan'},{age:15}]}).pretty()\n{\n        \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"),\n        \"uname\" : \"gaofeng\",\n        \"age\" : 15\n}\n{\n        \"_id\" : ObjectId(\"5c8f66974a5c57c4ada08aba\"),\n        \"uname\" : \"zhangsan\",\n        \"age\" : 25,\n        \"address\" : \"beijing\"\n}\n//类似于SQL中的： where uname = 'zhangsan' or age = 15\n```\n\n## and 和 or 联合查询\n\n```json\n> db.user.find({age:{$gt:15},$or:[{uname:'zhangsan'},{address:'beijing'}]}).pretty()\n{\n        \"_id\" : ObjectId(\"5c8f66974a5c57c4ada08aba\"),\n        \"uname\" : \"zhangsan\",\n        \"age\" : 25,\n        \"address\" : \"beijing\"\n}\n// where age > 15 and (uname = 'zhangsan' or address = 'beijing')\n```\n\n## $type 查询操作符\n\n在mongoDB的集合中，一个键可以对应多种类型的数据，例如：uname可以是代号12345，也可以是字符串`gaofeng`。那么我们想查询uname的值为字符串的文档，怎么查询呢，就使用到了$type\n\n```json\n> db.user.update({uname:'zhangsan'},{$set:{age:'25'}})   //先把名字为zhangsan的年龄改为字符串\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.user.find({age:{$type:'string'}}).pretty()  //查询年龄值为字符串类型的所有文档\n{\n        \"_id\" : ObjectId(\"5c8f66974a5c57c4ada08aba\"),\n        \"uname\" : \"zhangsan\",\n        \"age\" : \"25\",\n        \"address\" : \"beijing\"\n}\n```\n\n## limit() 和 skip()实现分页查询\n\ndb.col.find().limit(NUMBER)，其中NUMBER参数表示要查询多少条数据\n\ndb.col.find().limit(NUMBER).skip(COUNT)，skip()方法表示跳过多少条数据\n\n```json\n> db.user.find()   //查询所有\n{ \"_id\" : ObjectId(\"5c8b716e4a5c57c4ada08ab6\"), \"uname\" : \"gaofeng\", \"age\" : 28, \"address\" : \"shanghai\" }\n{ \"_id\" : ObjectId(\"5c8b72a74a5c57c4ada08ab7\") }\n{ \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"), \"uname\" : \"gaofeng\", \"age\" : 15 }\n{ \"_id\" : ObjectId(\"5c8effca4a5c57c4ada08ab9\"), \"user\" : \"xiaoming\" }\n{ \"_id\" : ObjectId(\"5c8f66974a5c57c4ada08aba\"), \"uname\" : \"zhangsan\", \"age\" : \"25\", \"address\" : \"beijing\" }\n> db.user.find().limit(2) //查询两条数据\n{ \"_id\" : ObjectId(\"5c8b716e4a5c57c4ada08ab6\"), \"uname\" : \"gaofeng\", \"age\" : 28, \"address\" : \"shanghai\" }\n{ \"_id\" : ObjectId(\"5c8b72a74a5c57c4ada08ab7\") }\n//假如每页2条数据，我想查询第二页的数据，也就是当前页-1*2，这是要跳过的条数\n> db.user.find().limit(2).skip(2)\n{ \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"), \"uname\" : \"gaofeng\", \"age\" : 15 }\n{ \"_id\" : ObjectId(\"5c8effca4a5c57c4ada08ab9\"), \"user\" : \"xiaoming\" }\n>\n\n```\n\n## sort()排序\n\n1 表示升序  ，-1 表示降序\n\n```json\n> db.user.update({age:{$type:'string'}},{$set:{age:25}})  //先把年龄改成数字\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n> db.user.find().sort({age:1})  //按照年龄升序\n{ \"_id\" : ObjectId(\"5c8b72a74a5c57c4ada08ab7\") }\n{ \"_id\" : ObjectId(\"5c8effca4a5c57c4ada08ab9\"), \"user\" : \"xiaoming\" }\n{ \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"), \"uname\" : \"gaofeng\", \"age\" : 15 }\n{ \"_id\" : ObjectId(\"5c8f66974a5c57c4ada08aba\"), \"uname\" : \"zhangsan\", \"age\" : 25, \"address\" : \"beijing\" }\n{ \"_id\" : ObjectId(\"5c8b716e4a5c57c4ada08ab6\"), \"uname\" : \"gaofeng\", \"age\" : 28, \"address\" : \"shanghai\" }\n```\n\n","slug":"mongodb","published":1,"updated":"2022-11-24T13:38:45.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1eq000v4ovkkixajbyq","content":"<h1 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h1><p>非关系型数据库；分布式文档存储数据库。内容大部分以json的格式存储</p>\n<p>在<code>MongoDB</code>中基本概念是 文档（document）、集合(collection)、数据库(database)、数据字段\\域（field）</p>\n<p>一个<code>MongoDB</code>中可以创建多个数据库</p>\n<p>admin： 从权限的角度来看，这是”root”数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。<br>local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合<br>config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</p>\n<p>MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p>\n<a id=\"more\"></a>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>windows 下载地址：<a href=\"https://www.mongodb.com/download-center/community?jmp=docs\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/download-center/community?jmp=docs</a></p>\n<p>选择对应的系统版本和安装方式，点击下载即可</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><ol>\n<li>点击安装文件，一路next</li>\n<li>在安装过程中，可以设置db存储路径和日志输出路径</li>\n<li>不要勾选<code>Install MongoDB Compass</code>，因为会联网安装，在国内的话，还是省省吧</li>\n<li>最后点击<code>Install</code>等着就行了</li>\n</ol>\n<blockquote>\n<p>   我当时安装完，去在安装页面设置的路径中查找我刚安装的MongoDB，结果一脸懵逼，这里只有看其他教程需要手动创建的db和log文件夹，bin文件目录呢？？？</p>\n<p>   试想，会不会给我装到C盘了，一看果然如此，在C盘的<code>Program Files</code>目录下。安装时没认真看选择路径，就先放这里吧</p>\n</blockquote>\n<blockquote>\n<p>   后来看了官方文档，当前版本4.0 是可以选择以服务形式安装，就会默认创建好<code>mongod.cfg</code>配置文件。并默认安装到C盘。</p>\n<p>   并且会默认创建一个<code>MongoDB</code>的服务，等安装成功后会自动启动。</p>\n</blockquote>\n<h1 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h1><p>因为前面我们选择了自动安装服务的模式，因此可以去bin目录下直接运行<code>mongo.exe</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoDB shell version v4.0.6</span><br><span class=\"line\">connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb</span><br><span class=\"line\">Implicit session: session &#123; \"id\" : UUID(\"4b452b86-6bff-4780-9920-286b6f1114dc\") &#125;</span><br><span class=\"line\">MongoDB server version: 4.0.6</span><br><span class=\"line\">Welcome to the MongoDB shell.</span><br><span class=\"line\">For interactive help, type \"help\".</span><br><span class=\"line\">For more comprehensive documentation, see</span><br><span class=\"line\">        http://docs.mongodb.org/</span><br><span class=\"line\">Questions? Try the support group</span><br><span class=\"line\">        http://groups.google.com/group/mongodb-user</span><br><span class=\"line\">Server has startup warnings:</span><br><span class=\"line\">2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten]</span><br><span class=\"line\">2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.</span><br><span class=\"line\">2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</span><br><span class=\"line\">2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten]</span><br><span class=\"line\">---</span><br><span class=\"line\">Enable MongoDB's free cloud-based monitoring service, which will then receive and display</span><br><span class=\"line\">metrics about your deployment (disk utilization, CPU, operation statistics, etc).</span><br><span class=\"line\"></span><br><span class=\"line\">The monitoring data will be available on a MongoDB website with a unique URL accessible to you</span><br><span class=\"line\">and anyone you share the URL with. MongoDB may use this information to make product</span><br><span class=\"line\">improvements and to suggest MongoDB products and deployment options to you.</span><br><span class=\"line\"></span><br><span class=\"line\">To enable free monitoring, run the following command: db.enableFreeMonitoring()</span><br><span class=\"line\">To permanently disable this reminder, run the following command: db.disableFreeMonitoring()</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>启动成功。</p>\n<p>或者在浏览器中输入<code>localhost:27017</code> 页面显示</p>\n<p><code>It looks like you are trying to access MongoDB over HTTP on the native driver port.</code></p>\n<p>也表示启动成功</p>\n<h1 id=\"使用MongoDB\"><a href=\"#使用MongoDB\" class=\"headerlink\" title=\"使用MongoDB\"></a>使用MongoDB</h1><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ol>\n<li>show dbs    显示数据库列表</li>\n<li>user dbname 进入某个库</li>\n<li>show collections   显示集合列表（关系型数据库中的表）</li>\n<li>help 查看MongoDB支持哪些命令</li>\n<li>db.help() 查看当前数据库支持哪些方法</li>\n</ol>\n<h2 id=\"创建-amp-新增\"><a href=\"#创建-amp-新增\" class=\"headerlink\" title=\"创建 &amp; 新增\"></a>创建 &amp; 新增</h2><p>数据库方面操作</p>\n<ol>\n<li>use db_name  切换数据库，如果不存在则自动创建</li>\n<li>db.getName() 查看当前数据库名字 可以简写：<code>db</code></li>\n<li>db.stats() 查看当前数据库状态，包括名字，有多少个集合等</li>\n<li>db.dropDatabase() 删除当前数据库</li>\n</ol>\n<p>集合操作</p>\n<ol>\n<li><p>db.createCollection(‘collection_name’)  创建集合</p>\n<p>| 字段          |  类型  | 描述                                       |<br>| ———– | :–: | —————————————- |<br>| capped      |  布尔  | （可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。<strong>当该值为 true 时，必须指定 size 参数。</strong> |<br>| autoIndexId |  布尔  | （可选）如为 true，自动在 _id 字段创建索引。默认为 false。    |<br>| size        |  数值  | （可选）为固定集合指定一个最大值（以字节计）。<strong>如果 capped 为 true，也需要指定该字段。</strong> |<br>| max         |  数值  | （可选）指定固定集合中包含文档的最大数量。                    |</p>\n<blockquote>\n<p>相当于关系型数据库中创建表</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.createCollection(\"mycol\",&#123;capped:true,autoIndexId:true,size:6142800,max:1000&#125;)</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n</li>\n<li><p>db.col.insert() 向集合中添加内容，如果集合不存在，会自动创建</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.insert(&#123;uname:\"gaofeng\"&#125;) -- 添加一个名为user的集合，并添加一条数据</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>db.col.drop()  可以删除集合</p>\n</li>\n</ol>\n<p>插入一条数据</p>\n<ol>\n<li>db.col.insert({username:”gaofeng”,age:25,address:”北京”})  插入一条数据</li>\n<li>也可以声明一个对象：</li>\n</ol>\n<blockquote>\n   <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;    users = &#123;uname:\"lisi\",age:25,address:\"beijing\"&#125;</span><br><span class=\"line\">&gt;    users   -- 再次输入可以查看</span><br><span class=\"line\">&gt;    &#123; \"uname\" : \"lisi\", \"age\" : 25, \"address\" : \"beijing\" &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>   db.col.insert(users) 进行插入</p>\n<p>   db.col.save(users) 也可以进行插入，当提供objectId的时候，就是更新操作了</p>\n</blockquote>\n<h1 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h1><p>update() 和 save() 方法都可以完成更新操作</p>\n<ol>\n<li>db.col.update(<code>&lt;query&gt;</code>,<code>&lt;update&gt;</code>,{upsert:<code>&lt;boolean&gt;</code>,multi:<code>&lt;boolean&gt;</code>,writeConcern:<code>&lt;document&gt;</code>})</li>\n</ol>\n<blockquote>\n<p>   query : update的查询条件，例如要查询uname为gaofeng的，这里可以直接写{uname:”gaofeng”}</p>\n<p>   update : update的对象和一些更新的操作符，对应sql中set后面的内容</p>\n<p>   upsert : 可选，表示如果不存在更新的内容，是否插入新的文档，true为插入，false不插入，默认为false</p>\n<p>   multi : 可选，默认为false，只更新找到的第一条，如果设置为true，则更新所有符合条件的记录</p>\n<p>   writeConcern : 可选，抛出异常的级别</p>\n   <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;    &gt; db.user.update(&#123;uname:\"gaofeng\"&#125;,&#123;$set:&#123;age:15&#125;&#125;,&#123;multi:true&#125;)</span><br><span class=\"line\">&gt;    WriteResult(&#123; \"nMatched\" : 2, \"nUpserted\" : 0, \"nModified\" : 2 &#125;)</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>   更新了两条记录</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>db.col.save(<code>&lt;document&gt;</code>,writeConcern:<code>&lt;document&gt;</code>)</p>\n<p>前面介绍过，save一条数据时，如果带有objectId值，并且该值在集合中存在，就会自动执行更新操作。如果没有，则执行插入操作。</p>\n</li>\n</ol>\n<h1 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h1><p>删除使用<code>db.col.remove()</code></p>\n<blockquote>\n<p>   语法：db.col.remove(<code>&lt;query&gt;</code>,{justOne:<code>&lt;boolean&gt;</code>,writeConcern:<code>&lt;document&gt;</code>})</p>\n<p>   query: 可选，删除的赛选条件，相当于sql中where后面的内容</p>\n<p>   justOne：可选，如果为true或1，则只删除符合条件的第一条文档，反之删除所有，默认为false；</p>\n</blockquote>\n<p>实例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.remove(&#123;uname:'gaofeng'&#125;,&#123;justOne:true&#125;)  //删除名字为gaofeng的第一条文档</span><br><span class=\"line\"></span><br><span class=\"line\">db.col.remove(&#123;&#125;)   //删除所有数据</span><br></pre></td></tr></table></figure>\n<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><p>语法：</p>\n<blockquote>\n<p>   db.col.find(query,projection)</p>\n<p>   query : 可选，查询条件</p>\n<p>   projection ： 使用投影操作符指定返回的键，如果要返回所有键值，忽略这个参数</p>\n<p>   db.col.find().pretty() 可以格式化显示查询结果</p>\n   <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;    &gt; db.user.find(&#123;uname:'gaofeng'&#125;).pretty()</span><br><span class=\"line\">&gt;    &#123;</span><br><span class=\"line\">&gt;            \"_id\" : ObjectId(\"5c8b716e4a5c57c4ada08ab6\"),</span><br><span class=\"line\">&gt;            \"uname\" : \"gaofeng\",</span><br><span class=\"line\">&gt;            \"age\" : 15</span><br><span class=\"line\">&gt;    &#125;</span><br><span class=\"line\">&gt;    &#123;</span><br><span class=\"line\">&gt;            \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"),</span><br><span class=\"line\">&gt;            \"uname\" : \"gaofeng\",</span><br><span class=\"line\">&gt;            \"age\" : 15</span><br><span class=\"line\">&gt;    &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n<p>MongoDB 于 SQL中的语法比较</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>格式</th>\n<th>范例</th>\n<th>RDBMS中的类似语句</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>等于</td>\n<td><code>{:</code>}</td>\n<td><code>db.col.find({&quot;by&quot;:&quot;菜鸟教程&quot;}).pretty()</code></td>\n<td><code>where by = &#39;菜鸟教程&#39;</code></td>\n</tr>\n<tr>\n<td>小于</td>\n<td><code>{:{$lt:}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$lt:50}}).pretty()</code></td>\n<td><code>where likes &lt; 50</code></td>\n</tr>\n<tr>\n<td>小于或等于</td>\n<td><code>{:{$lte:}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$lte:50}}).pretty()</code></td>\n<td><code>where likes &lt;= 50</code></td>\n</tr>\n<tr>\n<td>大于</td>\n<td><code>{:{$gt:}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$gt:50}}).pretty()</code></td>\n<td><code>where likes &gt; 50</code></td>\n</tr>\n<tr>\n<td>大于或等于</td>\n<td><code>{:{$gte:}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$gte:50}}).pretty()</code></td>\n<td><code>where likes &gt;= 50</code></td>\n</tr>\n<tr>\n<td>不等于</td>\n<td><code>{:{$ne:}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$ne:50}}).pretty()</code></td>\n<td><code>where likes != 50</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"and查询\"><a href=\"#and查询\" class=\"headerlink\" title=\"and查询\"></a>and查询</h2><p>当需要以多个键值对为条件查询时，默认使用and关系查询</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.user.find(&#123;uname:'gaofeng',age:15&#125;).pretty()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72bf4a5c57c4ada08ab8\"</span>),</span><br><span class=\"line\">        <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"age\"</span> : <span class=\"number\">15</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//类似于SQL中的：where uname = 'gaofeng' and age = 15</span><br></pre></td></tr></table></figure>\n<h2 id=\"or查询\"><a href=\"#or查询\" class=\"headerlink\" title=\"or查询\"></a>or查询</h2><p>使用$or关键字，后面跟条件数组</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.user.find(&#123;$or:[&#123;uname:'zhangsan'&#125;,&#123;age:15&#125;]&#125;).pretty()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72bf4a5c57c4ada08ab8\"</span>),</span><br><span class=\"line\">        <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"age\"</span> : <span class=\"number\">15</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8f66974a5c57c4ada08aba\"</span>),</span><br><span class=\"line\">        <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"zhangsan\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"age\"</span> : <span class=\"number\">25</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"beijing\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//类似于SQL中的： where uname = 'zhangsan' or age = 15</span><br></pre></td></tr></table></figure>\n<h2 id=\"and-和-or-联合查询\"><a href=\"#and-和-or-联合查询\" class=\"headerlink\" title=\"and 和 or 联合查询\"></a>and 和 or 联合查询</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.user.find(&#123;age:&#123;$gt:15&#125;,$or:[&#123;uname:'zhangsan'&#125;,&#123;address:'beijing'&#125;]&#125;).pretty()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8f66974a5c57c4ada08aba\"</span>),</span><br><span class=\"line\">        <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"zhangsan\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"age\"</span> : <span class=\"number\">25</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"beijing\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// where age &gt; 15 and (uname = 'zhangsan' or address = 'beijing')</span><br></pre></td></tr></table></figure>\n<h2 id=\"type-查询操作符\"><a href=\"#type-查询操作符\" class=\"headerlink\" title=\"$type 查询操作符\"></a>$type 查询操作符</h2><p>在mongoDB的集合中，一个键可以对应多种类型的数据，例如：uname可以是代号12345，也可以是字符串<code>gaofeng</code>。那么我们想查询uname的值为字符串的文档，怎么查询呢，就使用到了$type</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.user.update(&#123;uname:'zhangsan'&#125;,&#123;$set:&#123;age:'25'&#125;&#125;)   //先把名字为zhangsan的年龄改为字符串</span><br><span class=\"line\">WriteResult(&#123; \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 &#125;)</span><br><span class=\"line\">&gt; db.user.find(&#123;age:&#123;$type:'string'&#125;&#125;).pretty()  //查询年龄值为字符串类型的所有文档</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8f66974a5c57c4ada08aba\"</span>),</span><br><span class=\"line\">        <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"zhangsan\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"age\"</span> : <span class=\"string\">\"25\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"beijing\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"limit-和-skip-实现分页查询\"><a href=\"#limit-和-skip-实现分页查询\" class=\"headerlink\" title=\"limit() 和 skip()实现分页查询\"></a>limit() 和 skip()实现分页查询</h2><p>db.col.find().limit(NUMBER)，其中NUMBER参数表示要查询多少条数据</p>\n<p>db.col.find().limit(NUMBER).skip(COUNT)，skip()方法表示跳过多少条数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.user.find()   //查询所有</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b716e4a5c57c4ada08ab6\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">28</span>, <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"shanghai\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72a74a5c57c4ada08ab7\"</span>) &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72bf4a5c57c4ada08ab8\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">15</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8effca4a5c57c4ada08ab9\"</span>), <span class=\"attr\">\"user\"</span> : <span class=\"string\">\"xiaoming\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8f66974a5c57c4ada08aba\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"zhangsan\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"string\">\"25\"</span>, <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"beijing\"</span> &#125;</span><br><span class=\"line\">&gt; db.user.find().limit(2) //查询两条数据</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b716e4a5c57c4ada08ab6\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">28</span>, <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"shanghai\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72a74a5c57c4ada08ab7\"</span>) &#125;</span><br><span class=\"line\">//假如每页2条数据，我想查询第二页的数据，也就是当前页-1*2，这是要跳过的条数</span><br><span class=\"line\">&gt; db.user.find().limit(2).skip(2)</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72bf4a5c57c4ada08ab8\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">15</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8effca4a5c57c4ada08ab9\"</span>), <span class=\"attr\">\"user\"</span> : <span class=\"string\">\"xiaoming\"</span> &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"sort-排序\"><a href=\"#sort-排序\" class=\"headerlink\" title=\"sort()排序\"></a>sort()排序</h2><p>1 表示升序  ，-1 表示降序</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.user.update(&#123;age:&#123;$type:'string'&#125;&#125;,&#123;$set:&#123;age:25&#125;&#125;)  //先把年龄改成数字</span><br><span class=\"line\">WriteResult(&#123; \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 &#125;)</span><br><span class=\"line\">&gt; db.user.find().sort(&#123;age:1&#125;)  //按照年龄升序</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72a74a5c57c4ada08ab7\"</span>) &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8effca4a5c57c4ada08ab9\"</span>), <span class=\"attr\">\"user\"</span> : <span class=\"string\">\"xiaoming\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72bf4a5c57c4ada08ab8\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">15</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8f66974a5c57c4ada08aba\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"zhangsan\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">25</span>, <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"beijing\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b716e4a5c57c4ada08ab6\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">28</span>, <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"shanghai\"</span> &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"MongoDB\"><a href=\"#MongoDB\" class=\"headerlink\" title=\"MongoDB\"></a>MongoDB</h1><p>非关系型数据库；分布式文档存储数据库。内容大部分以json的格式存储</p>\n<p>在<code>MongoDB</code>中基本概念是 文档（document）、集合(collection)、数据库(database)、数据字段\\域（field）</p>\n<p>一个<code>MongoDB</code>中可以创建多个数据库</p>\n<p>admin： 从权限的角度来看，这是”root”数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。<br>local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合<br>config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</p>\n<p>MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p>","more":"<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>windows 下载地址：<a href=\"https://www.mongodb.com/download-center/community?jmp=docs\" target=\"_blank\" rel=\"noopener\">https://www.mongodb.com/download-center/community?jmp=docs</a></p>\n<p>选择对应的系统版本和安装方式，点击下载即可</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><ol>\n<li>点击安装文件，一路next</li>\n<li>在安装过程中，可以设置db存储路径和日志输出路径</li>\n<li>不要勾选<code>Install MongoDB Compass</code>，因为会联网安装，在国内的话，还是省省吧</li>\n<li>最后点击<code>Install</code>等着就行了</li>\n</ol>\n<blockquote>\n<p>   我当时安装完，去在安装页面设置的路径中查找我刚安装的MongoDB，结果一脸懵逼，这里只有看其他教程需要手动创建的db和log文件夹，bin文件目录呢？？？</p>\n<p>   试想，会不会给我装到C盘了，一看果然如此，在C盘的<code>Program Files</code>目录下。安装时没认真看选择路径，就先放这里吧</p>\n</blockquote>\n<blockquote>\n<p>   后来看了官方文档，当前版本4.0 是可以选择以服务形式安装，就会默认创建好<code>mongod.cfg</code>配置文件。并默认安装到C盘。</p>\n<p>   并且会默认创建一个<code>MongoDB</code>的服务，等安装成功后会自动启动。</p>\n</blockquote>\n<h1 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h1><p>因为前面我们选择了自动安装服务的模式，因此可以去bin目录下直接运行<code>mongo.exe</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MongoDB shell version v4.0.6</span><br><span class=\"line\">connecting to: mongodb://127.0.0.1:27017/?gssapiServiceName=mongodb</span><br><span class=\"line\">Implicit session: session &#123; \"id\" : UUID(\"4b452b86-6bff-4780-9920-286b6f1114dc\") &#125;</span><br><span class=\"line\">MongoDB server version: 4.0.6</span><br><span class=\"line\">Welcome to the MongoDB shell.</span><br><span class=\"line\">For interactive help, type \"help\".</span><br><span class=\"line\">For more comprehensive documentation, see</span><br><span class=\"line\">        http://docs.mongodb.org/</span><br><span class=\"line\">Questions? Try the support group</span><br><span class=\"line\">        http://groups.google.com/group/mongodb-user</span><br><span class=\"line\">Server has startup warnings:</span><br><span class=\"line\">2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten]</span><br><span class=\"line\">2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.</span><br><span class=\"line\">2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.</span><br><span class=\"line\">2019-03-15T16:51:40.440+0800 I CONTROL  [initandlisten]</span><br><span class=\"line\">---</span><br><span class=\"line\">Enable MongoDB's free cloud-based monitoring service, which will then receive and display</span><br><span class=\"line\">metrics about your deployment (disk utilization, CPU, operation statistics, etc).</span><br><span class=\"line\"></span><br><span class=\"line\">The monitoring data will be available on a MongoDB website with a unique URL accessible to you</span><br><span class=\"line\">and anyone you share the URL with. MongoDB may use this information to make product</span><br><span class=\"line\">improvements and to suggest MongoDB products and deployment options to you.</span><br><span class=\"line\"></span><br><span class=\"line\">To enable free monitoring, run the following command: db.enableFreeMonitoring()</span><br><span class=\"line\">To permanently disable this reminder, run the following command: db.disableFreeMonitoring()</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>启动成功。</p>\n<p>或者在浏览器中输入<code>localhost:27017</code> 页面显示</p>\n<p><code>It looks like you are trying to access MongoDB over HTTP on the native driver port.</code></p>\n<p>也表示启动成功</p>\n<h1 id=\"使用MongoDB\"><a href=\"#使用MongoDB\" class=\"headerlink\" title=\"使用MongoDB\"></a>使用MongoDB</h1><h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h2><ol>\n<li>show dbs    显示数据库列表</li>\n<li>user dbname 进入某个库</li>\n<li>show collections   显示集合列表（关系型数据库中的表）</li>\n<li>help 查看MongoDB支持哪些命令</li>\n<li>db.help() 查看当前数据库支持哪些方法</li>\n</ol>\n<h2 id=\"创建-amp-新增\"><a href=\"#创建-amp-新增\" class=\"headerlink\" title=\"创建 &amp; 新增\"></a>创建 &amp; 新增</h2><p>数据库方面操作</p>\n<ol>\n<li>use db_name  切换数据库，如果不存在则自动创建</li>\n<li>db.getName() 查看当前数据库名字 可以简写：<code>db</code></li>\n<li>db.stats() 查看当前数据库状态，包括名字，有多少个集合等</li>\n<li>db.dropDatabase() 删除当前数据库</li>\n</ol>\n<p>集合操作</p>\n<ol>\n<li><p>db.createCollection(‘collection_name’)  创建集合</p>\n<p>| 字段          |  类型  | 描述                                       |<br>| ———– | :–: | —————————————- |<br>| capped      |  布尔  | （可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。<strong>当该值为 true 时，必须指定 size 参数。</strong> |<br>| autoIndexId |  布尔  | （可选）如为 true，自动在 _id 字段创建索引。默认为 false。    |<br>| size        |  数值  | （可选）为固定集合指定一个最大值（以字节计）。<strong>如果 capped 为 true，也需要指定该字段。</strong> |<br>| max         |  数值  | （可选）指定固定集合中包含文档的最大数量。                    |</p>\n<blockquote>\n<p>相当于关系型数据库中创建表</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;db.createCollection(\"mycol\",&#123;capped:true,autoIndexId:true,size:6142800,max:1000&#125;)</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n</li>\n<li><p>db.col.insert() 向集合中添加内容，如果集合不存在，会自动创建</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.user.insert(&#123;uname:\"gaofeng\"&#125;) -- 添加一个名为user的集合，并添加一条数据</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>db.col.drop()  可以删除集合</p>\n</li>\n</ol>\n<p>插入一条数据</p>\n<ol>\n<li>db.col.insert({username:”gaofeng”,age:25,address:”北京”})  插入一条数据</li>\n<li>也可以声明一个对象：</li>\n</ol>\n<blockquote>\n   <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;    users = &#123;uname:\"lisi\",age:25,address:\"beijing\"&#125;</span><br><span class=\"line\">&gt;    users   -- 再次输入可以查看</span><br><span class=\"line\">&gt;    &#123; \"uname\" : \"lisi\", \"age\" : 25, \"address\" : \"beijing\" &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>   db.col.insert(users) 进行插入</p>\n<p>   db.col.save(users) 也可以进行插入，当提供objectId的时候，就是更新操作了</p>\n</blockquote>\n<h1 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h1><p>update() 和 save() 方法都可以完成更新操作</p>\n<ol>\n<li>db.col.update(<code>&lt;query&gt;</code>,<code>&lt;update&gt;</code>,{upsert:<code>&lt;boolean&gt;</code>,multi:<code>&lt;boolean&gt;</code>,writeConcern:<code>&lt;document&gt;</code>})</li>\n</ol>\n<blockquote>\n<p>   query : update的查询条件，例如要查询uname为gaofeng的，这里可以直接写{uname:”gaofeng”}</p>\n<p>   update : update的对象和一些更新的操作符，对应sql中set后面的内容</p>\n<p>   upsert : 可选，表示如果不存在更新的内容，是否插入新的文档，true为插入，false不插入，默认为false</p>\n<p>   multi : 可选，默认为false，只更新找到的第一条，如果设置为true，则更新所有符合条件的记录</p>\n<p>   writeConcern : 可选，抛出异常的级别</p>\n   <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;    &gt; db.user.update(&#123;uname:\"gaofeng\"&#125;,&#123;$set:&#123;age:15&#125;&#125;,&#123;multi:true&#125;)</span><br><span class=\"line\">&gt;    WriteResult(&#123; \"nMatched\" : 2, \"nUpserted\" : 0, \"nModified\" : 2 &#125;)</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n<p>   更新了两条记录</p>\n</blockquote>\n<ol start=\"2\">\n<li><p>db.col.save(<code>&lt;document&gt;</code>,writeConcern:<code>&lt;document&gt;</code>)</p>\n<p>前面介绍过，save一条数据时，如果带有objectId值，并且该值在集合中存在，就会自动执行更新操作。如果没有，则执行插入操作。</p>\n</li>\n</ol>\n<h1 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h1><p>删除使用<code>db.col.remove()</code></p>\n<blockquote>\n<p>   语法：db.col.remove(<code>&lt;query&gt;</code>,{justOne:<code>&lt;boolean&gt;</code>,writeConcern:<code>&lt;document&gt;</code>})</p>\n<p>   query: 可选，删除的赛选条件，相当于sql中where后面的内容</p>\n<p>   justOne：可选，如果为true或1，则只删除符合条件的第一条文档，反之删除所有，默认为false；</p>\n</blockquote>\n<p>实例：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.col.remove(&#123;uname:'gaofeng'&#125;,&#123;justOne:true&#125;)  //删除名字为gaofeng的第一条文档</span><br><span class=\"line\"></span><br><span class=\"line\">db.col.remove(&#123;&#125;)   //删除所有数据</span><br></pre></td></tr></table></figure>\n<h1 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h1><p>语法：</p>\n<blockquote>\n<p>   db.col.find(query,projection)</p>\n<p>   query : 可选，查询条件</p>\n<p>   projection ： 使用投影操作符指定返回的键，如果要返回所有键值，忽略这个参数</p>\n<p>   db.col.find().pretty() 可以格式化显示查询结果</p>\n   <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;    &gt; db.user.find(&#123;uname:'gaofeng'&#125;).pretty()</span><br><span class=\"line\">&gt;    &#123;</span><br><span class=\"line\">&gt;            \"_id\" : ObjectId(\"5c8b716e4a5c57c4ada08ab6\"),</span><br><span class=\"line\">&gt;            \"uname\" : \"gaofeng\",</span><br><span class=\"line\">&gt;            \"age\" : 15</span><br><span class=\"line\">&gt;    &#125;</span><br><span class=\"line\">&gt;    &#123;</span><br><span class=\"line\">&gt;            \"_id\" : ObjectId(\"5c8b72bf4a5c57c4ada08ab8\"),</span><br><span class=\"line\">&gt;            \"uname\" : \"gaofeng\",</span><br><span class=\"line\">&gt;            \"age\" : 15</span><br><span class=\"line\">&gt;    &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n<p>MongoDB 于 SQL中的语法比较</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>格式</th>\n<th>范例</th>\n<th>RDBMS中的类似语句</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>等于</td>\n<td><code>{:</code>}</td>\n<td><code>db.col.find({&quot;by&quot;:&quot;菜鸟教程&quot;}).pretty()</code></td>\n<td><code>where by = &#39;菜鸟教程&#39;</code></td>\n</tr>\n<tr>\n<td>小于</td>\n<td><code>{:{$lt:}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$lt:50}}).pretty()</code></td>\n<td><code>where likes &lt; 50</code></td>\n</tr>\n<tr>\n<td>小于或等于</td>\n<td><code>{:{$lte:}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$lte:50}}).pretty()</code></td>\n<td><code>where likes &lt;= 50</code></td>\n</tr>\n<tr>\n<td>大于</td>\n<td><code>{:{$gt:}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$gt:50}}).pretty()</code></td>\n<td><code>where likes &gt; 50</code></td>\n</tr>\n<tr>\n<td>大于或等于</td>\n<td><code>{:{$gte:}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$gte:50}}).pretty()</code></td>\n<td><code>where likes &gt;= 50</code></td>\n</tr>\n<tr>\n<td>不等于</td>\n<td><code>{:{$ne:}}</code></td>\n<td><code>db.col.find({&quot;likes&quot;:{$ne:50}}).pretty()</code></td>\n<td><code>where likes != 50</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"and查询\"><a href=\"#and查询\" class=\"headerlink\" title=\"and查询\"></a>and查询</h2><p>当需要以多个键值对为条件查询时，默认使用and关系查询</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.user.find(&#123;uname:'gaofeng',age:15&#125;).pretty()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72bf4a5c57c4ada08ab8\"</span>),</span><br><span class=\"line\">        <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"age\"</span> : <span class=\"number\">15</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//类似于SQL中的：where uname = 'gaofeng' and age = 15</span><br></pre></td></tr></table></figure>\n<h2 id=\"or查询\"><a href=\"#or查询\" class=\"headerlink\" title=\"or查询\"></a>or查询</h2><p>使用$or关键字，后面跟条件数组</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.user.find(&#123;$or:[&#123;uname:'zhangsan'&#125;,&#123;age:15&#125;]&#125;).pretty()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72bf4a5c57c4ada08ab8\"</span>),</span><br><span class=\"line\">        <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"age\"</span> : <span class=\"number\">15</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8f66974a5c57c4ada08aba\"</span>),</span><br><span class=\"line\">        <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"zhangsan\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"age\"</span> : <span class=\"number\">25</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"beijing\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//类似于SQL中的： where uname = 'zhangsan' or age = 15</span><br></pre></td></tr></table></figure>\n<h2 id=\"and-和-or-联合查询\"><a href=\"#and-和-or-联合查询\" class=\"headerlink\" title=\"and 和 or 联合查询\"></a>and 和 or 联合查询</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.user.find(&#123;age:&#123;$gt:15&#125;,$or:[&#123;uname:'zhangsan'&#125;,&#123;address:'beijing'&#125;]&#125;).pretty()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8f66974a5c57c4ada08aba\"</span>),</span><br><span class=\"line\">        <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"zhangsan\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"age\"</span> : <span class=\"number\">25</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"beijing\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// where age &gt; 15 and (uname = 'zhangsan' or address = 'beijing')</span><br></pre></td></tr></table></figure>\n<h2 id=\"type-查询操作符\"><a href=\"#type-查询操作符\" class=\"headerlink\" title=\"$type 查询操作符\"></a>$type 查询操作符</h2><p>在mongoDB的集合中，一个键可以对应多种类型的数据，例如：uname可以是代号12345，也可以是字符串<code>gaofeng</code>。那么我们想查询uname的值为字符串的文档，怎么查询呢，就使用到了$type</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.user.update(&#123;uname:'zhangsan'&#125;,&#123;$set:&#123;age:'25'&#125;&#125;)   //先把名字为zhangsan的年龄改为字符串</span><br><span class=\"line\">WriteResult(&#123; \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 &#125;)</span><br><span class=\"line\">&gt; db.user.find(&#123;age:&#123;$type:'string'&#125;&#125;).pretty()  //查询年龄值为字符串类型的所有文档</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8f66974a5c57c4ada08aba\"</span>),</span><br><span class=\"line\">        <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"zhangsan\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"age\"</span> : <span class=\"string\">\"25\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"beijing\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"limit-和-skip-实现分页查询\"><a href=\"#limit-和-skip-实现分页查询\" class=\"headerlink\" title=\"limit() 和 skip()实现分页查询\"></a>limit() 和 skip()实现分页查询</h2><p>db.col.find().limit(NUMBER)，其中NUMBER参数表示要查询多少条数据</p>\n<p>db.col.find().limit(NUMBER).skip(COUNT)，skip()方法表示跳过多少条数据</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.user.find()   //查询所有</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b716e4a5c57c4ada08ab6\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">28</span>, <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"shanghai\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72a74a5c57c4ada08ab7\"</span>) &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72bf4a5c57c4ada08ab8\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">15</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8effca4a5c57c4ada08ab9\"</span>), <span class=\"attr\">\"user\"</span> : <span class=\"string\">\"xiaoming\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8f66974a5c57c4ada08aba\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"zhangsan\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"string\">\"25\"</span>, <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"beijing\"</span> &#125;</span><br><span class=\"line\">&gt; db.user.find().limit(2) //查询两条数据</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b716e4a5c57c4ada08ab6\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">28</span>, <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"shanghai\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72a74a5c57c4ada08ab7\"</span>) &#125;</span><br><span class=\"line\">//假如每页2条数据，我想查询第二页的数据，也就是当前页-1*2，这是要跳过的条数</span><br><span class=\"line\">&gt; db.user.find().limit(2).skip(2)</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72bf4a5c57c4ada08ab8\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">15</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8effca4a5c57c4ada08ab9\"</span>), <span class=\"attr\">\"user\"</span> : <span class=\"string\">\"xiaoming\"</span> &#125;</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"sort-排序\"><a href=\"#sort-排序\" class=\"headerlink\" title=\"sort()排序\"></a>sort()排序</h2><p>1 表示升序  ，-1 表示降序</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; db.user.update(&#123;age:&#123;$type:'string'&#125;&#125;,&#123;$set:&#123;age:25&#125;&#125;)  //先把年龄改成数字</span><br><span class=\"line\">WriteResult(&#123; \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 &#125;)</span><br><span class=\"line\">&gt; db.user.find().sort(&#123;age:1&#125;)  //按照年龄升序</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72a74a5c57c4ada08ab7\"</span>) &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8effca4a5c57c4ada08ab9\"</span>), <span class=\"attr\">\"user\"</span> : <span class=\"string\">\"xiaoming\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b72bf4a5c57c4ada08ab8\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">15</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8f66974a5c57c4ada08aba\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"zhangsan\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">25</span>, <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"beijing\"</span> &#125;</span><br><span class=\"line\">&#123; <span class=\"attr\">\"_id\"</span> : ObjectId(<span class=\"string\">\"5c8b716e4a5c57c4ada08ab6\"</span>), <span class=\"attr\">\"uname\"</span> : <span class=\"string\">\"gaofeng\"</span>, <span class=\"attr\">\"age\"</span> : <span class=\"number\">28</span>, <span class=\"attr\">\"address\"</span> : <span class=\"string\">\"shanghai\"</span> &#125;</span><br></pre></td></tr></table></figure>"},{"title":"PageHelper+Layui分页","date":"2017-12-22T05:38:28.000Z","_content":"\n# 简述\n\n在做项目的时候，我们经常会用到分页的功能。分页又分为物理分页（每次查询固定条数并显示在页面上）和内存分页（全部查出，然后在前端页面做分页，不推荐使用）。\n\nmybitis分页的话还是比较方便的，可以自己编写sql。这里介绍的是一个分页插件`PageHelper`，可以和spring集成使用。\n\n其实分页的思路就是通过前端控制两个参数，一个起始值，然后是每页显示的大小数量。把这两个值传递到后端，编写对应的sql把固定条数的数据查询出来，在前端页面显示。支持首页、下一页、上一页、末页、每页显示数量变化、直接跳转到某一页；另外当我们对列表进行删除或者修改某一条信息的时候，希望仍然停留在当前页。\n\n当然自己写也可以，这里推荐使用LayUi的分页模块。\n\n<!-- more -->\n\n# 引入PageHelper包\n\n```xml\n<!-- 分页插件 -->\n<dependency>\n\t<groupId>com.github.pagehelper</groupId>\n\t<artifactId>pagehelper</artifactId>\n\t<version>5.1.2</version>\n</dependency>\n```\n\n# 创建mybitis-config.xml文件\n\n该插件目前支持Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库分页。\n\nPageHelper的原理是基于拦截器实现的。拦截器的配置有两种方法，一种是在mybatis的配置文件中配置，一种是直接在spring的配置文件中进行，这里只介绍mybitis-config.xml的形式\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n\t<plugins>\n\t\t<!-- com.github.pagehelper为PageHelper类所在包名 -->\n\t\t<plugin interceptor=\"com.github.pagehelper.PageInterceptor\">\n\t\t\t<!-- 和startPage中的pageNum效果一样 -->\n\t\t\t<property name=\"offsetAsPageNum\" value=\"true\" />\n\t\t\t<!-- 该参数默认为false -->\n\t\t\t<!-- 设置为true时，使用RowBounds分页会进行count查询 -->\n\t\t\t<property name=\"rowBoundsWithCount\" value=\"true\" />\n\t\t\t<!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->\n\t\t\t<!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型） -->\n\t\t\t<property name=\"pageSizeZero\" value=\"true\" />\n\t\t\t<!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->\n\t\t\t<!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->\n\t\t\t<property name=\"reasonable\" value=\"true\" />\n\t\t\t<!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 -->\n\t\t\t<!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 -->\n\t\t\t<!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值 -->\n\t\t\t<!-- 不理解该含义的前提下，不要随便复制该配置 -->\n\t\t\t<property name=\"params\" value=\"pageNum=start;pageSize=limit;\" />\n\t\t\t<!-- 支持通过Mapper接口参数来传递分页参数 -->\n\t\t\t<property name=\"supportMethodsArguments\" value=\"true\" />\n\t\t\t<!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->\n\t\t\t<property name=\"returnPageInfo\" value=\"check\" />\n\t\t</plugin>\n\t</plugins>\n</configuration>\n```\n\n# 引入mybitis配置文件\n\n```xml\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n\t<property name=\"dataSource\" ref=\"dataSource\" />\n    <!-- Mapper xml -->\n\t<property name=\"mapperLocations\" value=\"classpath:com/gaofeng/mapper/**/*.xml\" /> \n\t<property name=\"configLocation\" value=\"classpath:mybitis-config.xml\"></property>\n</bean>\n```\n\n[PageHelper更多用法](https://gitee.com/free/Mybatis_PageHelper)\n\n# 控制层\n\n使用PageHelper不会对sql造成影响，因此service、mapper都不用修改，可以直接在controller中使用\n\n```java\npackage com.gaofeng.controller;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport com.gaofeng.pojo.Company;\nimport com.gaofeng.pojo.Product;\nimport com.gaofeng.pojo.Result;\nimport com.gaofeng.pojo.Sysuser;\nimport com.gaofeng.service.ProductService;\nimport com.github.pagehelper.PageHelper;\nimport com.github.pagehelper.PageInfo;\n\n@Controller\n@RequestMapping(\"/home/product\")\npublic class ProductController {\n\n\t@Autowired\n\tprivate ProductService pservice;\n\n\t@GetMapping(\"/allList\")\n\tpublic String index(Model model) {\n\t\t\n\t\treturn \"product/productList\";\n\t}\n\t\n\t@ResponseBody\n\t@PostMapping(\"/findProductByPage\")\n\tpublic PageInfo findProductByPage(int startPage,int pageSize) {\n\t\tPageHelper.startPage(startPage, pageSize);\n\t\tList<Product> plist = pservice.findAllProduct();\n\t\tPageInfo pageInfo = new PageInfo(plist);\n\t\treturn pageInfo;\n\t}\n\t\n}\n\n```\n\n因为我前端使用ajax请求获取数据并动态生成表格的，所以这里要在方法上标记`@ResponstBody`注解。\n\n为了前端方便操作分页，直接把pageInfo传递给前端页面（因为我配置了json的处理，前端接收到数据可以直接操作）\n\n下面是教程中给出PageInfo的用法\n\n```java\n//获取第1页，10条内容，默认查询总数count\nPageHelper.startPage(1, 10);\nList`<Country>` list = countryMapper.selectAll();\n//用PageInfo对结果进行包装\nPageInfo page = new PageInfo(list);\n//测试PageInfo全部属性\n//PageInfo包含了非常全面的分页属性\nassertEquals(1, page.getPageNum());\nassertEquals(10, page.getPageSize());\nassertEquals(1, page.getStartRow());\nassertEquals(10, page.getEndRow());\nassertEquals(183, page.getTotal());\nassertEquals(19, page.getPages());\nassertEquals(1, page.getFirstPage());\nassertEquals(8, page.getLastPage());\nassertEquals(true, page.isFirstPage());\nassertEquals(false, page.isLastPage());\nassertEquals(false, page.isHasPreviousPage());\nassertEquals(true, page.isHasNextPage());\n```\n\n# 前端\n\nproductList.html\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta charset=\"utf-8\">\n<title>产品列表--后台管理模板</title>\n<meta name=\"renderer\" content=\"webkit\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n<meta name=\"viewport\"\n\tcontent=\"width=device-width, initial-scale=1, maximum-scale=1\">\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n<meta name=\"format-detection\" content=\"telephone=no\">\n<link rel=\"stylesheet\" th:href=\"@{/static/layui/css/layui.css}\"\n\thref=\"static/layui/css/layui.css\" media=\"all\" />\n<link rel=\"stylesheet\"\n\tth:href=\"@{/static/css/font_eolqem241z66flxr.css}\"\n\thref=\"static/css/font_eolqem241z66flxr.css\" media=\"all\" />\n<link rel=\"stylesheet\" th:href=\"@{/static/css/news.css}\"\n\thref=\"static/css/news.css\" media=\"all\" />\n</head>\n<body class=\"childrenBody\">\n\t<blockquote class=\"layui-elem-quote news_search\">\n\t\t<div class=\"layui-inline\">\n\t\t\t<div class=\"layui-input-inline\">\n\t\t\t\t<input type=\"text\" value=\"\" placeholder=\"请输入关键字\"\n\t\t\t\t\tclass=\"layui-input search_input\">\n\t\t\t</div>\n\t\t\t<a class=\"layui-btn search_btn\">查询</a>\n\t\t</div>\n\t\t<div class=\"layui-inline\">\n\t\t\t<a class=\"layui-btn linksAdd_btn\" style=\"background-color: #5FB878\">添加产品</a>\n\t\t</div>\n\t\t<div class=\"layui-inline\">\n\t\t\t<div class=\"layui-form-mid layui-word-aux\"></div>\n\t\t</div>\n\t</blockquote>\n\t<div class=\"layui-form links_list\">\n\t\t<table class=\"layui-table\">\n\t\t\t<colgroup>\n\t\t\t\t<col width=\"50\">\n\t\t\t\t<col width=\"30%\">\n\t\t\t\t<col>\n\t\t\t\t<col>\n\t\t\t\t<col>\n\t\t\t\t<col>\n\t\t\t\t<col>\n\t\t\t\t<col>\n\t\t\t\t<col width=\"10%\">\n\t\t\t</colgroup>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th><input type=\"checkbox\" name=\"\" lay-skin=\"primary\"\n\t\t\t\t\t\tlay-filter=\"allChoose\" id=\"allChoose\"></th>\n\t\t\t\t\t<th style=\"text-align: left;\">产品名称</th>\n\t\t\t\t\t<th>单价</th>\n\t\t\t\t\t<th>区域</th>\n\t\t\t\t\t<th>运营商</th>\n\t\t\t\t\t<th>产品类型</th>\n\t\t\t\t\t<th>状态</th>\n\t\t\t\t\t<th>操作</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody class=\"links_content\">\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\t<div id=\"demo7\" style=\"width: 100%\"></div>\n\t<div id=\"page\"></div>\n\t<script type=\"text/javascript\" th:src=\"@{/static/layui/layui.js}\"\n\t\tsrc=\"static/layui/layui.js\"></script>\n\t<script type=\"text/javascript\" th:src=\"@{/static/js/home/product.js}\"\n\t\tsrc=\"static/js/home/product.js\"></script>\n\n</body>\n</html>\n```\n\nproduct.js\n\n```js\nvar startPage = 0;// 起始页\nvar pageSize = 10;// 每页显示多少条\nvar total = 0;// 总数\nvar currPage = 1;// 当前页面\nvar firstLoad = 0;// 页面首次加载分页\n\n//为了修改后可以直接显示当前页面\nfunction hell(){\n\tlayer.closeAll(\"iframe\");\n\tgetProducts();\n\ttoPage();\n}\n\n// ajax 请求后台数据\nfunction getProducts() {\n\tlayui.config({base : \"js/\"}).use('jquery',function() {\n\t\tvar $ = layui.jquery;\n\t\t$.ajax({\n\t\t\turl : \"/gaofeng/home/product/findProductByPage\",\n\t\t\ttype : \"post\",\n\t\t\tdataType : \"json\",\n\t\t\tasync : false,\n\t\t\tdata : {\n\t\t\t\tstartPage : startPage,\n\t\t\t\tpageSize : pageSize\n\t\t\t},\n\t\t\tsuccess : function(data) {\n\t\t\t\t// 渲染页面\n\t\t\t\ttotal = data.total;\n\t\t\t\tstartPage = data.pageNum;\n\t\t\t\trenderDate(data.list);\n\n\t\t\t}\n\t\t})\n\t})\n\t\n}\n\nfunction renderDate(plist, curr) {\n\tlayui.config({base : \"js/\"}).use([ 'form', 'layer', 'jquery', 'laypage' ],function() {\n\t\tvar form = layui.form();\n\t\tvar $ = layui.jquery;\n\t\tvar dataHtml = '';\n\t\tif (plist.length != 0) {\n\t\t\tfor (var i = 0; i < plist.length; i++) {\n\t\t\t\tdataHtml += '<tr>'\n\t\t\t\t\t\t+ '<td><input type=\"checkbox\" name=\"checked\" lay-skin=\"primary\" lay-filter=\"choose\"></td>'\n\t\t\t\t\t\t+ '<td align=\"left\">'+ plist[i].title+ '</td>'\n\t\t\t\t\t\t+ '<td>'+ plist[i].price+ '</a></td>'\n\t\t\t\t\t\t+ '<td>'+ plist[i].area+ '</td>'\n\t\t\t\t\t\t+ '<td>'+ plist[i].operator+ '</td>'\n\t\t\t\t\t\t+ '<td>'+ plist[i].ptypeName+ '</td>'\n\t\t\t\t\t\t+ '<td>'+ plist[i].statusName+ '</td>'\n\t\t\t\t\t\t+ '<td>'\n\t\t\t\t\t\t+ '<a class=\"layui-btn layui-btn-mini links_edit\" data-id = \"'\n\t\t\t\t\t\t+ plist[i].id\n\t\t\t\t\t\t+ '\"><i class=\"iconfont icon-edit\"></i> 编辑</a>'\n\t\t\t\t\t\t+ '<a class=\"layui-btn layui-btn-danger layui-btn-mini links_del\" data-id=\"'\n\t\t\t\t\t\t+ plist[i].id\n\t\t\t\t\t\t+ '\"><i class=\"layui-icon\">&#xe640;</i> 删除</a>'\n\t\t\t\t\t\t+ '</td>'\n\t\t\t\t\t\t+ '</tr>';\n\t\t\t}\n\t\t} else {\n\t\t\tdataHtml = '<tr><td colspan=\"8\">暂无数据</td></tr>';\n\t\t}\n\t\t$(\".links_content\").html(dataHtml);\n\t\t form.render();//如果不执行这一句，前端的checkbox不显示\n\t})\n\t\n}\nfunction toPage() {\n\tlayui.config({\n\t\tbase : \"js/\"\n\t}).use(['layer','laypage' ], function() {\n\t\tvar laypage = layui.laypage;\n\t\tlaypage.render({\n\t\t\telem : 'demo7',\n\t\t\tcount : total,\n\t\t\tcurr : startPage,\n\t\t\tlayout : [ 'count', 'prev', 'page', 'next', 'limit', 'skip' ],\n\t\t\tjump : function(obj) {\n\t\t\t\tconsole.log(obj);\n\t\t\t\tconsole.log(total);\n\t\t\t\tstartPage = obj.curr;\n\t\t\t\tpageSize = obj.limit;\n\t\t\t\tif (firstLoad == 1) {//这里是为了防止重复访问（首次）\n\t\t\t\t\tgetProducts();\n\t\t\t\t}\n\t\t\t\tfirstLoad = 1;\n\n\t\t\t}\n\t\t});\n\t})\n}\n\nlayui.config({base : \"js/\"}).use([ 'form', 'layer', 'jquery', 'laypage' ],function() {\n\tvar form = layui.form(), \n\tlayer = layui.layer, \n\tlaypage = layui.laypage, \n\t$ = layui.jquery;\n\tgetProducts();\n\ttoPage();\n\t// \n\t$(\".linksAdd_btn\").click(\n\t\t\tfunction() {\n\t\t\t\tvar index = layer.open({\n\t\t\t\t\ttitle : \"添加产品\",\n\t\t\t\t\ttype : 2,\n\t\t\t\t\tscrollbar : true,\n\t\t\t\t\tarea : ['100%','100%'],\n\t\t\t\t\tcontent : \"productAdd\",\n\t\t\t\t\tsuccess : function(layero,index) {\n\t\t\t\t\t\tlayer.tips('点击此处返回产品列表','.layui-layer-setwin .layui-layer-close',\n\t\t\t\t\t\t\t\t{tips : 3});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t// 改变窗口大小时，重置弹窗的高度，防止超出可视区域（如F12调出debug的操作）\n\t\t\t\t$(window).resize(function() {\n\t\t\t\t\tlayer.full(index);\n\t\t\t\t})\n\t\t\t\tlayer.full(index);\n\t\t});\n\n\t// 全选\n\tform.on('checkbox(allChoose)',function(data) {\n\t\tvar child = $(data.elem).parents('table').find('tbody input[type=\"checkbox\"]:not([name=\"show\"])');\n\t\tchild.each(function(index, item) {\n\t\t\titem.checked = data.elem.checked;\n\t\t});\n\t\tform.render('checkbox');\n\t});\n\t\n\t// 通过判断产品是否全部选中来确定全选按钮是否选中\n\tform.on(\"checkbox(choose)\",function(data) {\n\t\tvar child = $(data.elem).parents('table').find('tbody input[type=\"checkbox\"]:not([name=\"show\"])');\n\t\tvar childChecked = $(data.elem).parents('table').find('tbody input[type=\"checkbox\"]:not([name=\"show\"]):checked')\n\t\tdata.elem.checked;\n\t\tif (childChecked.length == child.length) {\n\t\t\t$(data.elem).parents('table').find('thead input#allChoose').get(0).checked = true;\n\t\t} else {\n\t\t\t$(data.elem).parents('table').find('thead input#allChoose').get(0).checked = false;\n\t\t}\n\t\tform.render('checkbox');\n\t})\n\t\n\t// 操作\n\t$(\"body\").on(\"click\",\".links_edit\",function() { // 编辑\n\t\tvar _this = $(this);\n\t\tvar index = layer.open({\n\t\t\ttitle : \"修改产品\",\n\t\t\ttype : 2,\n\t\t\tcontent : \"productEdit/\"+ _this.attr(\"data-id\"),\n\t\t\tsuccess : function(layero,index) {\n\t\t\t\t\n\t\t\t\t//layer.tips('点击此处返回产品列表','.layui-layer-setwin .layui-layer-close',{tips : 3});\n\t\t\t}\n\t\t});\n\t\t\n\t\t// 改变窗口大小时，重置弹窗的高度，防止超出可视区域（如F12调出debug的操作）\n\t\t$(window).resize(function() {\n\t\t\tlayer.full(index);\n\t\t})\n\t\tlayer.full(index);\n\t})\n\t\n\t$(\"body\").on(\"click\",\".links_del\",function() { // 删除\n\t\tvar _this = $(this);\n\t\tlayer.confirm('确定删除此信息？',{icon : 3,title : '提示信息'},\n\t\t\t\tfunction(index) {\n\t\t\t$.ajax({\n\t\t\t\ttype : 'GET',\n\t\t\t\turl : '/gaofeng/home/product/deleteProduct/'+ _this.attr(\"data-id\"),\n\t\t\t\tdataType : 'json',\n\t\t\t\tcontentType : 'application/json',\n\t\t\t\tasync : true,\n\t\t\t\tsuccess : function(result) {\n\t\t\t\t\tconsole.log(result.code);\n\t\t\t\t\tif (result.code == 0) {\n\t\t\t\t\t\tlayer.msg('success:删除成功',{icon : 1,time : 1000});\n\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\tfirstLoad = 0;\n\t\t\t\t\t\t\tgetProducts();\n\t\t\t\t\t\t\ttoPage();\n\t\t\t\t\t\t}, 800);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlayer.msg('eles:删除失败！'+ result.message,{icon : 2,time : 1000});\n\t\t\t\t\t}\n\t\t\t\t},error : function(result,type) {\n\t\t\t\t\tlayer.msg('error:删除失败！',{icon : 2,time : 1000});\n\t\t\t\t}\n\t\t\t});\n\t\t\tlayer.close(index);\n\t\t});\n\t})\n})\n```\n\n# 总结\n\n当我们修改一条信息后，希望刷新数据，但是依然停留在当前页面。在修改信息的页面，当数据保存成功以后，可以调用父类的方法，进行页面刷新并关闭页面。**当然这是我想到的方法（因为使用layui框架，都是ajax请求的数据，没有做页面整体刷新），可能会有更好的方法。**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/pageList.md","raw":"---\ntitle: PageHelper+Layui分页\ndate: 2017-12-22 13:38:28\ntags: [javaweb,springmvc]\n---\n\n# 简述\n\n在做项目的时候，我们经常会用到分页的功能。分页又分为物理分页（每次查询固定条数并显示在页面上）和内存分页（全部查出，然后在前端页面做分页，不推荐使用）。\n\nmybitis分页的话还是比较方便的，可以自己编写sql。这里介绍的是一个分页插件`PageHelper`，可以和spring集成使用。\n\n其实分页的思路就是通过前端控制两个参数，一个起始值，然后是每页显示的大小数量。把这两个值传递到后端，编写对应的sql把固定条数的数据查询出来，在前端页面显示。支持首页、下一页、上一页、末页、每页显示数量变化、直接跳转到某一页；另外当我们对列表进行删除或者修改某一条信息的时候，希望仍然停留在当前页。\n\n当然自己写也可以，这里推荐使用LayUi的分页模块。\n\n<!-- more -->\n\n# 引入PageHelper包\n\n```xml\n<!-- 分页插件 -->\n<dependency>\n\t<groupId>com.github.pagehelper</groupId>\n\t<artifactId>pagehelper</artifactId>\n\t<version>5.1.2</version>\n</dependency>\n```\n\n# 创建mybitis-config.xml文件\n\n该插件目前支持Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库分页。\n\nPageHelper的原理是基于拦截器实现的。拦截器的配置有两种方法，一种是在mybatis的配置文件中配置，一种是直接在spring的配置文件中进行，这里只介绍mybitis-config.xml的形式\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n\t<plugins>\n\t\t<!-- com.github.pagehelper为PageHelper类所在包名 -->\n\t\t<plugin interceptor=\"com.github.pagehelper.PageInterceptor\">\n\t\t\t<!-- 和startPage中的pageNum效果一样 -->\n\t\t\t<property name=\"offsetAsPageNum\" value=\"true\" />\n\t\t\t<!-- 该参数默认为false -->\n\t\t\t<!-- 设置为true时，使用RowBounds分页会进行count查询 -->\n\t\t\t<property name=\"rowBoundsWithCount\" value=\"true\" />\n\t\t\t<!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->\n\t\t\t<!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型） -->\n\t\t\t<property name=\"pageSizeZero\" value=\"true\" />\n\t\t\t<!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->\n\t\t\t<!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->\n\t\t\t<property name=\"reasonable\" value=\"true\" />\n\t\t\t<!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 -->\n\t\t\t<!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 -->\n\t\t\t<!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值 -->\n\t\t\t<!-- 不理解该含义的前提下，不要随便复制该配置 -->\n\t\t\t<property name=\"params\" value=\"pageNum=start;pageSize=limit;\" />\n\t\t\t<!-- 支持通过Mapper接口参数来传递分页参数 -->\n\t\t\t<property name=\"supportMethodsArguments\" value=\"true\" />\n\t\t\t<!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->\n\t\t\t<property name=\"returnPageInfo\" value=\"check\" />\n\t\t</plugin>\n\t</plugins>\n</configuration>\n```\n\n# 引入mybitis配置文件\n\n```xml\n<bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\">\n\t<property name=\"dataSource\" ref=\"dataSource\" />\n    <!-- Mapper xml -->\n\t<property name=\"mapperLocations\" value=\"classpath:com/gaofeng/mapper/**/*.xml\" /> \n\t<property name=\"configLocation\" value=\"classpath:mybitis-config.xml\"></property>\n</bean>\n```\n\n[PageHelper更多用法](https://gitee.com/free/Mybatis_PageHelper)\n\n# 控制层\n\n使用PageHelper不会对sql造成影响，因此service、mapper都不用修改，可以直接在controller中使用\n\n```java\npackage com.gaofeng.controller;\n\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\nimport com.gaofeng.pojo.Company;\nimport com.gaofeng.pojo.Product;\nimport com.gaofeng.pojo.Result;\nimport com.gaofeng.pojo.Sysuser;\nimport com.gaofeng.service.ProductService;\nimport com.github.pagehelper.PageHelper;\nimport com.github.pagehelper.PageInfo;\n\n@Controller\n@RequestMapping(\"/home/product\")\npublic class ProductController {\n\n\t@Autowired\n\tprivate ProductService pservice;\n\n\t@GetMapping(\"/allList\")\n\tpublic String index(Model model) {\n\t\t\n\t\treturn \"product/productList\";\n\t}\n\t\n\t@ResponseBody\n\t@PostMapping(\"/findProductByPage\")\n\tpublic PageInfo findProductByPage(int startPage,int pageSize) {\n\t\tPageHelper.startPage(startPage, pageSize);\n\t\tList<Product> plist = pservice.findAllProduct();\n\t\tPageInfo pageInfo = new PageInfo(plist);\n\t\treturn pageInfo;\n\t}\n\t\n}\n\n```\n\n因为我前端使用ajax请求获取数据并动态生成表格的，所以这里要在方法上标记`@ResponstBody`注解。\n\n为了前端方便操作分页，直接把pageInfo传递给前端页面（因为我配置了json的处理，前端接收到数据可以直接操作）\n\n下面是教程中给出PageInfo的用法\n\n```java\n//获取第1页，10条内容，默认查询总数count\nPageHelper.startPage(1, 10);\nList`<Country>` list = countryMapper.selectAll();\n//用PageInfo对结果进行包装\nPageInfo page = new PageInfo(list);\n//测试PageInfo全部属性\n//PageInfo包含了非常全面的分页属性\nassertEquals(1, page.getPageNum());\nassertEquals(10, page.getPageSize());\nassertEquals(1, page.getStartRow());\nassertEquals(10, page.getEndRow());\nassertEquals(183, page.getTotal());\nassertEquals(19, page.getPages());\nassertEquals(1, page.getFirstPage());\nassertEquals(8, page.getLastPage());\nassertEquals(true, page.isFirstPage());\nassertEquals(false, page.isLastPage());\nassertEquals(false, page.isHasPreviousPage());\nassertEquals(true, page.isHasNextPage());\n```\n\n# 前端\n\nproductList.html\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta charset=\"utf-8\">\n<title>产品列表--后台管理模板</title>\n<meta name=\"renderer\" content=\"webkit\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n<meta name=\"viewport\"\n\tcontent=\"width=device-width, initial-scale=1, maximum-scale=1\">\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n<meta name=\"format-detection\" content=\"telephone=no\">\n<link rel=\"stylesheet\" th:href=\"@{/static/layui/css/layui.css}\"\n\thref=\"static/layui/css/layui.css\" media=\"all\" />\n<link rel=\"stylesheet\"\n\tth:href=\"@{/static/css/font_eolqem241z66flxr.css}\"\n\thref=\"static/css/font_eolqem241z66flxr.css\" media=\"all\" />\n<link rel=\"stylesheet\" th:href=\"@{/static/css/news.css}\"\n\thref=\"static/css/news.css\" media=\"all\" />\n</head>\n<body class=\"childrenBody\">\n\t<blockquote class=\"layui-elem-quote news_search\">\n\t\t<div class=\"layui-inline\">\n\t\t\t<div class=\"layui-input-inline\">\n\t\t\t\t<input type=\"text\" value=\"\" placeholder=\"请输入关键字\"\n\t\t\t\t\tclass=\"layui-input search_input\">\n\t\t\t</div>\n\t\t\t<a class=\"layui-btn search_btn\">查询</a>\n\t\t</div>\n\t\t<div class=\"layui-inline\">\n\t\t\t<a class=\"layui-btn linksAdd_btn\" style=\"background-color: #5FB878\">添加产品</a>\n\t\t</div>\n\t\t<div class=\"layui-inline\">\n\t\t\t<div class=\"layui-form-mid layui-word-aux\"></div>\n\t\t</div>\n\t</blockquote>\n\t<div class=\"layui-form links_list\">\n\t\t<table class=\"layui-table\">\n\t\t\t<colgroup>\n\t\t\t\t<col width=\"50\">\n\t\t\t\t<col width=\"30%\">\n\t\t\t\t<col>\n\t\t\t\t<col>\n\t\t\t\t<col>\n\t\t\t\t<col>\n\t\t\t\t<col>\n\t\t\t\t<col>\n\t\t\t\t<col width=\"10%\">\n\t\t\t</colgroup>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th><input type=\"checkbox\" name=\"\" lay-skin=\"primary\"\n\t\t\t\t\t\tlay-filter=\"allChoose\" id=\"allChoose\"></th>\n\t\t\t\t\t<th style=\"text-align: left;\">产品名称</th>\n\t\t\t\t\t<th>单价</th>\n\t\t\t\t\t<th>区域</th>\n\t\t\t\t\t<th>运营商</th>\n\t\t\t\t\t<th>产品类型</th>\n\t\t\t\t\t<th>状态</th>\n\t\t\t\t\t<th>操作</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody class=\"links_content\">\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\t<div id=\"demo7\" style=\"width: 100%\"></div>\n\t<div id=\"page\"></div>\n\t<script type=\"text/javascript\" th:src=\"@{/static/layui/layui.js}\"\n\t\tsrc=\"static/layui/layui.js\"></script>\n\t<script type=\"text/javascript\" th:src=\"@{/static/js/home/product.js}\"\n\t\tsrc=\"static/js/home/product.js\"></script>\n\n</body>\n</html>\n```\n\nproduct.js\n\n```js\nvar startPage = 0;// 起始页\nvar pageSize = 10;// 每页显示多少条\nvar total = 0;// 总数\nvar currPage = 1;// 当前页面\nvar firstLoad = 0;// 页面首次加载分页\n\n//为了修改后可以直接显示当前页面\nfunction hell(){\n\tlayer.closeAll(\"iframe\");\n\tgetProducts();\n\ttoPage();\n}\n\n// ajax 请求后台数据\nfunction getProducts() {\n\tlayui.config({base : \"js/\"}).use('jquery',function() {\n\t\tvar $ = layui.jquery;\n\t\t$.ajax({\n\t\t\turl : \"/gaofeng/home/product/findProductByPage\",\n\t\t\ttype : \"post\",\n\t\t\tdataType : \"json\",\n\t\t\tasync : false,\n\t\t\tdata : {\n\t\t\t\tstartPage : startPage,\n\t\t\t\tpageSize : pageSize\n\t\t\t},\n\t\t\tsuccess : function(data) {\n\t\t\t\t// 渲染页面\n\t\t\t\ttotal = data.total;\n\t\t\t\tstartPage = data.pageNum;\n\t\t\t\trenderDate(data.list);\n\n\t\t\t}\n\t\t})\n\t})\n\t\n}\n\nfunction renderDate(plist, curr) {\n\tlayui.config({base : \"js/\"}).use([ 'form', 'layer', 'jquery', 'laypage' ],function() {\n\t\tvar form = layui.form();\n\t\tvar $ = layui.jquery;\n\t\tvar dataHtml = '';\n\t\tif (plist.length != 0) {\n\t\t\tfor (var i = 0; i < plist.length; i++) {\n\t\t\t\tdataHtml += '<tr>'\n\t\t\t\t\t\t+ '<td><input type=\"checkbox\" name=\"checked\" lay-skin=\"primary\" lay-filter=\"choose\"></td>'\n\t\t\t\t\t\t+ '<td align=\"left\">'+ plist[i].title+ '</td>'\n\t\t\t\t\t\t+ '<td>'+ plist[i].price+ '</a></td>'\n\t\t\t\t\t\t+ '<td>'+ plist[i].area+ '</td>'\n\t\t\t\t\t\t+ '<td>'+ plist[i].operator+ '</td>'\n\t\t\t\t\t\t+ '<td>'+ plist[i].ptypeName+ '</td>'\n\t\t\t\t\t\t+ '<td>'+ plist[i].statusName+ '</td>'\n\t\t\t\t\t\t+ '<td>'\n\t\t\t\t\t\t+ '<a class=\"layui-btn layui-btn-mini links_edit\" data-id = \"'\n\t\t\t\t\t\t+ plist[i].id\n\t\t\t\t\t\t+ '\"><i class=\"iconfont icon-edit\"></i> 编辑</a>'\n\t\t\t\t\t\t+ '<a class=\"layui-btn layui-btn-danger layui-btn-mini links_del\" data-id=\"'\n\t\t\t\t\t\t+ plist[i].id\n\t\t\t\t\t\t+ '\"><i class=\"layui-icon\">&#xe640;</i> 删除</a>'\n\t\t\t\t\t\t+ '</td>'\n\t\t\t\t\t\t+ '</tr>';\n\t\t\t}\n\t\t} else {\n\t\t\tdataHtml = '<tr><td colspan=\"8\">暂无数据</td></tr>';\n\t\t}\n\t\t$(\".links_content\").html(dataHtml);\n\t\t form.render();//如果不执行这一句，前端的checkbox不显示\n\t})\n\t\n}\nfunction toPage() {\n\tlayui.config({\n\t\tbase : \"js/\"\n\t}).use(['layer','laypage' ], function() {\n\t\tvar laypage = layui.laypage;\n\t\tlaypage.render({\n\t\t\telem : 'demo7',\n\t\t\tcount : total,\n\t\t\tcurr : startPage,\n\t\t\tlayout : [ 'count', 'prev', 'page', 'next', 'limit', 'skip' ],\n\t\t\tjump : function(obj) {\n\t\t\t\tconsole.log(obj);\n\t\t\t\tconsole.log(total);\n\t\t\t\tstartPage = obj.curr;\n\t\t\t\tpageSize = obj.limit;\n\t\t\t\tif (firstLoad == 1) {//这里是为了防止重复访问（首次）\n\t\t\t\t\tgetProducts();\n\t\t\t\t}\n\t\t\t\tfirstLoad = 1;\n\n\t\t\t}\n\t\t});\n\t})\n}\n\nlayui.config({base : \"js/\"}).use([ 'form', 'layer', 'jquery', 'laypage' ],function() {\n\tvar form = layui.form(), \n\tlayer = layui.layer, \n\tlaypage = layui.laypage, \n\t$ = layui.jquery;\n\tgetProducts();\n\ttoPage();\n\t// \n\t$(\".linksAdd_btn\").click(\n\t\t\tfunction() {\n\t\t\t\tvar index = layer.open({\n\t\t\t\t\ttitle : \"添加产品\",\n\t\t\t\t\ttype : 2,\n\t\t\t\t\tscrollbar : true,\n\t\t\t\t\tarea : ['100%','100%'],\n\t\t\t\t\tcontent : \"productAdd\",\n\t\t\t\t\tsuccess : function(layero,index) {\n\t\t\t\t\t\tlayer.tips('点击此处返回产品列表','.layui-layer-setwin .layui-layer-close',\n\t\t\t\t\t\t\t\t{tips : 3});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t// 改变窗口大小时，重置弹窗的高度，防止超出可视区域（如F12调出debug的操作）\n\t\t\t\t$(window).resize(function() {\n\t\t\t\t\tlayer.full(index);\n\t\t\t\t})\n\t\t\t\tlayer.full(index);\n\t\t});\n\n\t// 全选\n\tform.on('checkbox(allChoose)',function(data) {\n\t\tvar child = $(data.elem).parents('table').find('tbody input[type=\"checkbox\"]:not([name=\"show\"])');\n\t\tchild.each(function(index, item) {\n\t\t\titem.checked = data.elem.checked;\n\t\t});\n\t\tform.render('checkbox');\n\t});\n\t\n\t// 通过判断产品是否全部选中来确定全选按钮是否选中\n\tform.on(\"checkbox(choose)\",function(data) {\n\t\tvar child = $(data.elem).parents('table').find('tbody input[type=\"checkbox\"]:not([name=\"show\"])');\n\t\tvar childChecked = $(data.elem).parents('table').find('tbody input[type=\"checkbox\"]:not([name=\"show\"]):checked')\n\t\tdata.elem.checked;\n\t\tif (childChecked.length == child.length) {\n\t\t\t$(data.elem).parents('table').find('thead input#allChoose').get(0).checked = true;\n\t\t} else {\n\t\t\t$(data.elem).parents('table').find('thead input#allChoose').get(0).checked = false;\n\t\t}\n\t\tform.render('checkbox');\n\t})\n\t\n\t// 操作\n\t$(\"body\").on(\"click\",\".links_edit\",function() { // 编辑\n\t\tvar _this = $(this);\n\t\tvar index = layer.open({\n\t\t\ttitle : \"修改产品\",\n\t\t\ttype : 2,\n\t\t\tcontent : \"productEdit/\"+ _this.attr(\"data-id\"),\n\t\t\tsuccess : function(layero,index) {\n\t\t\t\t\n\t\t\t\t//layer.tips('点击此处返回产品列表','.layui-layer-setwin .layui-layer-close',{tips : 3});\n\t\t\t}\n\t\t});\n\t\t\n\t\t// 改变窗口大小时，重置弹窗的高度，防止超出可视区域（如F12调出debug的操作）\n\t\t$(window).resize(function() {\n\t\t\tlayer.full(index);\n\t\t})\n\t\tlayer.full(index);\n\t})\n\t\n\t$(\"body\").on(\"click\",\".links_del\",function() { // 删除\n\t\tvar _this = $(this);\n\t\tlayer.confirm('确定删除此信息？',{icon : 3,title : '提示信息'},\n\t\t\t\tfunction(index) {\n\t\t\t$.ajax({\n\t\t\t\ttype : 'GET',\n\t\t\t\turl : '/gaofeng/home/product/deleteProduct/'+ _this.attr(\"data-id\"),\n\t\t\t\tdataType : 'json',\n\t\t\t\tcontentType : 'application/json',\n\t\t\t\tasync : true,\n\t\t\t\tsuccess : function(result) {\n\t\t\t\t\tconsole.log(result.code);\n\t\t\t\t\tif (result.code == 0) {\n\t\t\t\t\t\tlayer.msg('success:删除成功',{icon : 1,time : 1000});\n\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\tfirstLoad = 0;\n\t\t\t\t\t\t\tgetProducts();\n\t\t\t\t\t\t\ttoPage();\n\t\t\t\t\t\t}, 800);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlayer.msg('eles:删除失败！'+ result.message,{icon : 2,time : 1000});\n\t\t\t\t\t}\n\t\t\t\t},error : function(result,type) {\n\t\t\t\t\tlayer.msg('error:删除失败！',{icon : 2,time : 1000});\n\t\t\t\t}\n\t\t\t});\n\t\t\tlayer.close(index);\n\t\t});\n\t})\n})\n```\n\n# 总结\n\n当我们修改一条信息后，希望刷新数据，但是依然停留在当前页面。在修改信息的页面，当数据保存成功以后，可以调用父类的方法，进行页面刷新并关闭页面。**当然这是我想到的方法（因为使用layui框架，都是ajax请求的数据，没有做页面整体刷新），可能会有更好的方法。**\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"pageList","published":1,"updated":"2022-11-24T13:38:45.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1er000w4ovkamigxmms","content":"<h1 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h1><p>在做项目的时候，我们经常会用到分页的功能。分页又分为物理分页（每次查询固定条数并显示在页面上）和内存分页（全部查出，然后在前端页面做分页，不推荐使用）。</p>\n<p>mybitis分页的话还是比较方便的，可以自己编写sql。这里介绍的是一个分页插件<code>PageHelper</code>，可以和spring集成使用。</p>\n<p>其实分页的思路就是通过前端控制两个参数，一个起始值，然后是每页显示的大小数量。把这两个值传递到后端，编写对应的sql把固定条数的数据查询出来，在前端页面显示。支持首页、下一页、上一页、末页、每页显示数量变化、直接跳转到某一页；另外当我们对列表进行删除或者修改某一条信息的时候，希望仍然停留在当前页。</p>\n<p>当然自己写也可以，这里推荐使用LayUi的分页模块。</p>\n<a id=\"more\"></a>\n<h1 id=\"引入PageHelper包\"><a href=\"#引入PageHelper包\" class=\"headerlink\" title=\"引入PageHelper包\"></a>引入PageHelper包</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 分页插件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"创建mybitis-config-xml文件\"><a href=\"#创建mybitis-config-xml文件\" class=\"headerlink\" title=\"创建mybitis-config.xml文件\"></a>创建mybitis-config.xml文件</h1><p>该插件目前支持Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库分页。</p>\n<p>PageHelper的原理是基于拦截器实现的。拦截器的配置有两种方法，一种是在mybatis的配置文件中配置，一种是直接在spring的配置文件中进行，这里只介绍mybitis-config.xml的形式</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"com.github.pagehelper.PageInterceptor\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 和startPage中的pageNum效果一样 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"offsetAsPageNum\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 该参数默认为false --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 设置为true时，使用RowBounds分页会进行count查询 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"rowBoundsWithCount\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型） --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pageSizeZero\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 启用合理化时，如果pageNum&lt;1会查询第一页，如果pageNum&gt;pages会查询最后一页 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 禁用合理化时，如果pageNum&lt;1或pageNum&gt;pages会返回空数据 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"reasonable\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 不理解该含义的前提下，不要随便复制该配置 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"params\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"pageNum=start;pageSize=limit;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 支持通过Mapper接口参数来传递分页参数 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportMethodsArguments\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"returnPageInfo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"check\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"引入mybitis配置文件\"><a href=\"#引入mybitis配置文件\" class=\"headerlink\" title=\"引入mybitis配置文件\"></a>引入mybitis配置文件</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Mapper xml --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:com/gaofeng/mapper/**/*.xml\"</span> /&gt;</span> </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:mybitis-config.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://gitee.com/free/Mybatis_PageHelper\" target=\"_blank\" rel=\"noopener\">PageHelper更多用法</a></p>\n<h1 id=\"控制层\"><a href=\"#控制层\" class=\"headerlink\" title=\"控制层\"></a>控制层</h1><p>使用PageHelper不会对sql造成影响，因此service、mapper都不用修改，可以直接在controller中使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Company;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Product;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Result;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Sysuser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.service.ProductService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.pagehelper.PageHelper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.pagehelper.PageInfo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/home/product\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ProductService pservice;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/allList\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"product/productList\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/findProductByPage\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> PageInfo <span class=\"title\">findProductByPage</span><span class=\"params\">(<span class=\"keyword\">int</span> startPage,<span class=\"keyword\">int</span> pageSize)</span> </span>&#123;</span><br><span class=\"line\">\t\tPageHelper.startPage(startPage, pageSize);</span><br><span class=\"line\">\t\tList&lt;Product&gt; plist = pservice.findAllProduct();</span><br><span class=\"line\">\t\tPageInfo pageInfo = <span class=\"keyword\">new</span> PageInfo(plist);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pageInfo;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为我前端使用ajax请求获取数据并动态生成表格的，所以这里要在方法上标记<code>@ResponstBody</code>注解。</p>\n<p>为了前端方便操作分页，直接把pageInfo传递给前端页面（因为我配置了json的处理，前端接收到数据可以直接操作）</p>\n<p>下面是教程中给出PageInfo的用法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取第1页，10条内容，默认查询总数count</span></span><br><span class=\"line\">PageHelper.startPage(<span class=\"number\">1</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">List`&lt;Country&gt;` list = countryMapper.selectAll();</span><br><span class=\"line\"><span class=\"comment\">//用PageInfo对结果进行包装</span></span><br><span class=\"line\">PageInfo page = <span class=\"keyword\">new</span> PageInfo(list);</span><br><span class=\"line\"><span class=\"comment\">//测试PageInfo全部属性</span></span><br><span class=\"line\"><span class=\"comment\">//PageInfo包含了非常全面的分页属性</span></span><br><span class=\"line\">assertEquals(<span class=\"number\">1</span>, page.getPageNum());</span><br><span class=\"line\">assertEquals(<span class=\"number\">10</span>, page.getPageSize());</span><br><span class=\"line\">assertEquals(<span class=\"number\">1</span>, page.getStartRow());</span><br><span class=\"line\">assertEquals(<span class=\"number\">10</span>, page.getEndRow());</span><br><span class=\"line\">assertEquals(<span class=\"number\">183</span>, page.getTotal());</span><br><span class=\"line\">assertEquals(<span class=\"number\">19</span>, page.getPages());</span><br><span class=\"line\">assertEquals(<span class=\"number\">1</span>, page.getFirstPage());</span><br><span class=\"line\">assertEquals(<span class=\"number\">8</span>, page.getLastPage());</span><br><span class=\"line\">assertEquals(<span class=\"keyword\">true</span>, page.isFirstPage());</span><br><span class=\"line\">assertEquals(<span class=\"keyword\">false</span>, page.isLastPage());</span><br><span class=\"line\">assertEquals(<span class=\"keyword\">false</span>, page.isHasPreviousPage());</span><br><span class=\"line\">assertEquals(<span class=\"keyword\">true</span>, page.isHasNextPage());</span><br></pre></td></tr></table></figure>\n<h1 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h1><p>productList.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>产品列表--后台管理模板<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, maximum-scale=1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/static/layui/css/layui.css&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">\"static/layui/css/layui.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/static/css/font_eolqem241z66flxr.css&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">\"static/css/font_eolqem241z66flxr.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/static/css/news.css&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">\"static/css/news.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">\"childrenBody\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">blockquote</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-elem-quote news_search\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-inline\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-inline\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入关键字\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"layui-input search_input\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-btn search_btn\"</span>&gt;</span>查询<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-inline\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-btn linksAdd_btn\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: #5FB878\"</span>&gt;</span>添加产品<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-inline\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-mid layui-word-aux\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form links_list\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-table\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">width</span>=<span class=\"string\">\"50\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">width</span>=<span class=\"string\">\"30%\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">width</span>=<span class=\"string\">\"10%\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">lay-skin</span>=<span class=\"string\">\"primary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">lay-filter</span>=<span class=\"string\">\"allChoose\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"allChoose\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align: left;\"</span>&gt;</span>产品名称<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>单价<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>区域<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>运营商<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>产品类型<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>状态<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tbody</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links_content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo7\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/static/layui/layui.js&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">src</span>=<span class=\"string\">\"static/layui/layui.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/static/js/home/product.js&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">src</span>=<span class=\"string\">\"static/js/home/product.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>product.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> startPage = <span class=\"number\">0</span>;<span class=\"comment\">// 起始页</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pageSize = <span class=\"number\">10</span>;<span class=\"comment\">// 每页显示多少条</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> total = <span class=\"number\">0</span>;<span class=\"comment\">// 总数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currPage = <span class=\"number\">1</span>;<span class=\"comment\">// 当前页面</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstLoad = <span class=\"number\">0</span>;<span class=\"comment\">// 页面首次加载分页</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为了修改后可以直接显示当前页面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hell</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tlayer.closeAll(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\">\tgetProducts();</span><br><span class=\"line\">\ttoPage();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ajax 请求后台数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProducts</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tlayui.config(&#123;<span class=\"attr\">base</span> : <span class=\"string\">\"js/\"</span>&#125;).use(<span class=\"string\">'jquery'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> $ = layui.jquery;</span><br><span class=\"line\">\t\t$.ajax(&#123;</span><br><span class=\"line\">\t\t\turl : <span class=\"string\">\"/gaofeng/home/product/findProductByPage\"</span>,</span><br><span class=\"line\">\t\t\ttype : <span class=\"string\">\"post\"</span>,</span><br><span class=\"line\">\t\t\tdataType : <span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">async</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\tdata : &#123;</span><br><span class=\"line\">\t\t\t\tstartPage : startPage,</span><br><span class=\"line\">\t\t\t\tpageSize : pageSize</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tsuccess : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 渲染页面</span></span><br><span class=\"line\">\t\t\t\ttotal = data.total;</span><br><span class=\"line\">\t\t\t\tstartPage = data.pageNum;</span><br><span class=\"line\">\t\t\t\trenderDate(data.list);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderDate</span>(<span class=\"params\">plist, curr</span>) </span>&#123;</span><br><span class=\"line\">\tlayui.config(&#123;<span class=\"attr\">base</span> : <span class=\"string\">\"js/\"</span>&#125;).use([ <span class=\"string\">'form'</span>, <span class=\"string\">'layer'</span>, <span class=\"string\">'jquery'</span>, <span class=\"string\">'laypage'</span> ],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> form = layui.form();</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> $ = layui.jquery;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dataHtml = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (plist.length != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; plist.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tdataHtml += <span class=\"string\">'&lt;tr&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;&lt;input type=\"checkbox\" name=\"checked\" lay-skin=\"primary\" lay-filter=\"choose\"&gt;&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td align=\"left\"&gt;'</span>+ plist[i].title+ <span class=\"string\">'&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;'</span>+ plist[i].price+ <span class=\"string\">'&lt;/a&gt;&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;'</span>+ plist[i].area+ <span class=\"string\">'&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;'</span>+ plist[i].operator+ <span class=\"string\">'&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;'</span>+ plist[i].ptypeName+ <span class=\"string\">'&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;'</span>+ plist[i].statusName+ <span class=\"string\">'&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;a class=\"layui-btn layui-btn-mini links_edit\" data-id = \"'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ plist[i].id</span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'\"&gt;&lt;i class=\"iconfont icon-edit\"&gt;&lt;/i&gt; 编辑&lt;/a&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;a class=\"layui-btn layui-btn-danger layui-btn-mini links_del\" data-id=\"'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ plist[i].id</span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'\"&gt;&lt;i class=\"layui-icon\"&gt;&amp;#xe640;&lt;/i&gt; 删除&lt;/a&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;/tr&gt;'</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tdataHtml = <span class=\"string\">'&lt;tr&gt;&lt;td colspan=\"8\"&gt;暂无数据&lt;/td&gt;&lt;/tr&gt;'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$(<span class=\"string\">\".links_content\"</span>).html(dataHtml);</span><br><span class=\"line\">\t\t form.render();<span class=\"comment\">//如果不执行这一句，前端的checkbox不显示</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toPage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tlayui.config(&#123;</span><br><span class=\"line\">\t\tbase : <span class=\"string\">\"js/\"</span></span><br><span class=\"line\">\t&#125;).use([<span class=\"string\">'layer'</span>,<span class=\"string\">'laypage'</span> ], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> laypage = layui.laypage;</span><br><span class=\"line\">\t\tlaypage.render(&#123;</span><br><span class=\"line\">\t\t\telem : <span class=\"string\">'demo7'</span>,</span><br><span class=\"line\">\t\t\tcount : total,</span><br><span class=\"line\">\t\t\tcurr : startPage,</span><br><span class=\"line\">\t\t\tlayout : [ <span class=\"string\">'count'</span>, <span class=\"string\">'prev'</span>, <span class=\"string\">'page'</span>, <span class=\"string\">'next'</span>, <span class=\"string\">'limit'</span>, <span class=\"string\">'skip'</span> ],</span><br><span class=\"line\">\t\t\tjump : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(total);</span><br><span class=\"line\">\t\t\t\tstartPage = obj.curr;</span><br><span class=\"line\">\t\t\t\tpageSize = obj.limit;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (firstLoad == <span class=\"number\">1</span>) &#123;<span class=\"comment\">//这里是为了防止重复访问（首次）</span></span><br><span class=\"line\">\t\t\t\t\tgetProducts();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tfirstLoad = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">layui.config(&#123;<span class=\"attr\">base</span> : <span class=\"string\">\"js/\"</span>&#125;).use([ <span class=\"string\">'form'</span>, <span class=\"string\">'layer'</span>, <span class=\"string\">'jquery'</span>, <span class=\"string\">'laypage'</span> ],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = layui.form(), </span><br><span class=\"line\">\tlayer = layui.layer, </span><br><span class=\"line\">\tlaypage = layui.laypage, </span><br><span class=\"line\">\t$ = layui.jquery;</span><br><span class=\"line\">\tgetProducts();</span><br><span class=\"line\">\ttoPage();</span><br><span class=\"line\">\t<span class=\"comment\">// </span></span><br><span class=\"line\">\t$(<span class=\"string\">\".linksAdd_btn\"</span>).click(</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> index = layer.open(&#123;</span><br><span class=\"line\">\t\t\t\t\ttitle : <span class=\"string\">\"添加产品\"</span>,</span><br><span class=\"line\">\t\t\t\t\ttype : <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\t\tscrollbar : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\tarea : [<span class=\"string\">'100%'</span>,<span class=\"string\">'100%'</span>],</span><br><span class=\"line\">\t\t\t\t\tcontent : <span class=\"string\">\"productAdd\"</span>,</span><br><span class=\"line\">\t\t\t\t\tsuccess : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">layero,index</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlayer.tips(<span class=\"string\">'点击此处返回产品列表'</span>,<span class=\"string\">'.layui-layer-setwin .layui-layer-close'</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#123;<span class=\"attr\">tips</span> : <span class=\"number\">3</span>&#125;);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 改变窗口大小时，重置弹窗的高度，防止超出可视区域（如F12调出debug的操作）</span></span><br><span class=\"line\">\t\t\t\t$(<span class=\"built_in\">window</span>).resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\tlayer.full(index);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\tlayer.full(index);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 全选</span></span><br><span class=\"line\">\tform.on(<span class=\"string\">'checkbox(allChoose)'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> child = $(data.elem).parents(<span class=\"string\">'table'</span>).find(<span class=\"string\">'tbody input[type=\"checkbox\"]:not([name=\"show\"])'</span>);</span><br><span class=\"line\">\t\tchild.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, item</span>) </span>&#123;</span><br><span class=\"line\">\t\t\titem.checked = data.elem.checked;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tform.render(<span class=\"string\">'checkbox'</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 通过判断产品是否全部选中来确定全选按钮是否选中</span></span><br><span class=\"line\">\tform.on(<span class=\"string\">\"checkbox(choose)\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> child = $(data.elem).parents(<span class=\"string\">'table'</span>).find(<span class=\"string\">'tbody input[type=\"checkbox\"]:not([name=\"show\"])'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> childChecked = $(data.elem).parents(<span class=\"string\">'table'</span>).find(<span class=\"string\">'tbody input[type=\"checkbox\"]:not([name=\"show\"]):checked'</span>)</span><br><span class=\"line\">\t\tdata.elem.checked;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (childChecked.length == child.length) &#123;</span><br><span class=\"line\">\t\t\t$(data.elem).parents(<span class=\"string\">'table'</span>).find(<span class=\"string\">'thead input#allChoose'</span>).get(<span class=\"number\">0</span>).checked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t$(data.elem).parents(<span class=\"string\">'table'</span>).find(<span class=\"string\">'thead input#allChoose'</span>).get(<span class=\"number\">0</span>).checked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tform.render(<span class=\"string\">'checkbox'</span>);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 操作</span></span><br><span class=\"line\">\t$(<span class=\"string\">\"body\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"string\">\".links_edit\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 编辑</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> index = layer.open(&#123;</span><br><span class=\"line\">\t\t\ttitle : <span class=\"string\">\"修改产品\"</span>,</span><br><span class=\"line\">\t\t\ttype : <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\tcontent : <span class=\"string\">\"productEdit/\"</span>+ _this.attr(<span class=\"string\">\"data-id\"</span>),</span><br><span class=\"line\">\t\t\tsuccess : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">layero,index</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//layer.tips('点击此处返回产品列表','.layui-layer-setwin .layui-layer-close',&#123;tips : 3&#125;);</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 改变窗口大小时，重置弹窗的高度，防止超出可视区域（如F12调出debug的操作）</span></span><br><span class=\"line\">\t\t$(<span class=\"built_in\">window</span>).resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\tlayer.full(index);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\tlayer.full(index);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t$(<span class=\"string\">\"body\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"string\">\".links_del\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 删除</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\tlayer.confirm(<span class=\"string\">'确定删除此信息？'</span>,&#123;<span class=\"attr\">icon</span> : <span class=\"number\">3</span>,<span class=\"attr\">title</span> : <span class=\"string\">'提示信息'</span>&#125;,</span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t$.ajax(&#123;</span><br><span class=\"line\">\t\t\t\ttype : <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">\t\t\t\turl : <span class=\"string\">'/gaofeng/home/product/deleteProduct/'</span>+ _this.attr(<span class=\"string\">\"data-id\"</span>),</span><br><span class=\"line\">\t\t\t\tdataType : <span class=\"string\">'json'</span>,</span><br><span class=\"line\">\t\t\t\tcontentType : <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">async</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\tsuccess : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(result.code);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (result.code == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tlayer.msg(<span class=\"string\">'success:删除成功'</span>,&#123;<span class=\"attr\">icon</span> : <span class=\"number\">1</span>,<span class=\"attr\">time</span> : <span class=\"number\">1000</span>&#125;);</span><br><span class=\"line\">\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tfirstLoad = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\tgetProducts();</span><br><span class=\"line\">\t\t\t\t\t\t\ttoPage();</span><br><span class=\"line\">\t\t\t\t\t\t&#125;, <span class=\"number\">800</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tlayer.msg(<span class=\"string\">'eles:删除失败！'</span>+ result.message,&#123;<span class=\"attr\">icon</span> : <span class=\"number\">2</span>,<span class=\"attr\">time</span> : <span class=\"number\">1000</span>&#125;);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;,<span class=\"attr\">error</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result,type</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\tlayer.msg(<span class=\"string\">'error:删除失败！'</span>,&#123;<span class=\"attr\">icon</span> : <span class=\"number\">2</span>,<span class=\"attr\">time</span> : <span class=\"number\">1000</span>&#125;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\tlayer.close(index);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>当我们修改一条信息后，希望刷新数据，但是依然停留在当前页面。在修改信息的页面，当数据保存成功以后，可以调用父类的方法，进行页面刷新并关闭页面。<strong>当然这是我想到的方法（因为使用layui框架，都是ajax请求的数据，没有做页面整体刷新），可能会有更好的方法。</strong></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h1><p>在做项目的时候，我们经常会用到分页的功能。分页又分为物理分页（每次查询固定条数并显示在页面上）和内存分页（全部查出，然后在前端页面做分页，不推荐使用）。</p>\n<p>mybitis分页的话还是比较方便的，可以自己编写sql。这里介绍的是一个分页插件<code>PageHelper</code>，可以和spring集成使用。</p>\n<p>其实分页的思路就是通过前端控制两个参数，一个起始值，然后是每页显示的大小数量。把这两个值传递到后端，编写对应的sql把固定条数的数据查询出来，在前端页面显示。支持首页、下一页、上一页、末页、每页显示数量变化、直接跳转到某一页；另外当我们对列表进行删除或者修改某一条信息的时候，希望仍然停留在当前页。</p>\n<p>当然自己写也可以，这里推荐使用LayUi的分页模块。</p>","more":"<h1 id=\"引入PageHelper包\"><a href=\"#引入PageHelper包\" class=\"headerlink\" title=\"引入PageHelper包\"></a>引入PageHelper包</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 分页插件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.pagehelper<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>pagehelper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"创建mybitis-config-xml文件\"><a href=\"#创建mybitis-config-xml文件\" class=\"headerlink\" title=\"创建mybitis-config.xml文件\"></a>创建mybitis-config.xml文件</h1><p>该插件目前支持Oracle,Mysql,MariaDB,SQLite,Hsqldb,PostgreSQL六种数据库分页。</p>\n<p>PageHelper的原理是基于拦截器实现的。拦截器的配置有两种方法，一种是在mybatis的配置文件中配置，一种是直接在spring的配置文件中进行，这里只介绍mybitis-config.xml的形式</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span> <span class=\"attr\">interceptor</span>=<span class=\"string\">\"com.github.pagehelper.PageInterceptor\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 和startPage中的pageNum效果一样 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"offsetAsPageNum\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 该参数默认为false --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 设置为true时，使用RowBounds分页会进行count查询 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"rowBoundsWithCount\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型） --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pageSizeZero\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 启用合理化时，如果pageNum&lt;1会查询第一页，如果pageNum&gt;pages会查询最后一页 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 禁用合理化时，如果pageNum&lt;1或pageNum&gt;pages会返回空数据 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"reasonable\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 不理解该含义的前提下，不要随便复制该配置 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"params\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"pageNum=start;pageSize=limit;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 支持通过Mapper接口参数来传递分页参数 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportMethodsArguments\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"returnPageInfo\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"check\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"引入mybitis配置文件\"><a href=\"#引入mybitis配置文件\" class=\"headerlink\" title=\"引入mybitis配置文件\"></a>引入mybitis配置文件</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"sqlSessionFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.SqlSessionFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Mapper xml --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"mapperLocations\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:com/gaofeng/mapper/**/*.xml\"</span> /&gt;</span> </span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"configLocation\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"classpath:mybitis-config.xml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://gitee.com/free/Mybatis_PageHelper\" target=\"_blank\" rel=\"noopener\">PageHelper更多用法</a></p>\n<h1 id=\"控制层\"><a href=\"#控制层\" class=\"headerlink\" title=\"控制层\"></a>控制层</h1><p>使用PageHelper不会对sql造成影响，因此service、mapper都不用修改，可以直接在controller中使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.BigDecimal;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Company;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Product;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Result;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.pojo.Sysuser;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.gaofeng.service.ProductService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.pagehelper.PageHelper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.github.pagehelper.PageInfo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/home/product\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProductController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> ProductService pservice;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/allList\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"product/productList\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/findProductByPage\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> PageInfo <span class=\"title\">findProductByPage</span><span class=\"params\">(<span class=\"keyword\">int</span> startPage,<span class=\"keyword\">int</span> pageSize)</span> </span>&#123;</span><br><span class=\"line\">\t\tPageHelper.startPage(startPage, pageSize);</span><br><span class=\"line\">\t\tList&lt;Product&gt; plist = pservice.findAllProduct();</span><br><span class=\"line\">\t\tPageInfo pageInfo = <span class=\"keyword\">new</span> PageInfo(plist);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pageInfo;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为我前端使用ajax请求获取数据并动态生成表格的，所以这里要在方法上标记<code>@ResponstBody</code>注解。</p>\n<p>为了前端方便操作分页，直接把pageInfo传递给前端页面（因为我配置了json的处理，前端接收到数据可以直接操作）</p>\n<p>下面是教程中给出PageInfo的用法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取第1页，10条内容，默认查询总数count</span></span><br><span class=\"line\">PageHelper.startPage(<span class=\"number\">1</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">List`&lt;Country&gt;` list = countryMapper.selectAll();</span><br><span class=\"line\"><span class=\"comment\">//用PageInfo对结果进行包装</span></span><br><span class=\"line\">PageInfo page = <span class=\"keyword\">new</span> PageInfo(list);</span><br><span class=\"line\"><span class=\"comment\">//测试PageInfo全部属性</span></span><br><span class=\"line\"><span class=\"comment\">//PageInfo包含了非常全面的分页属性</span></span><br><span class=\"line\">assertEquals(<span class=\"number\">1</span>, page.getPageNum());</span><br><span class=\"line\">assertEquals(<span class=\"number\">10</span>, page.getPageSize());</span><br><span class=\"line\">assertEquals(<span class=\"number\">1</span>, page.getStartRow());</span><br><span class=\"line\">assertEquals(<span class=\"number\">10</span>, page.getEndRow());</span><br><span class=\"line\">assertEquals(<span class=\"number\">183</span>, page.getTotal());</span><br><span class=\"line\">assertEquals(<span class=\"number\">19</span>, page.getPages());</span><br><span class=\"line\">assertEquals(<span class=\"number\">1</span>, page.getFirstPage());</span><br><span class=\"line\">assertEquals(<span class=\"number\">8</span>, page.getLastPage());</span><br><span class=\"line\">assertEquals(<span class=\"keyword\">true</span>, page.isFirstPage());</span><br><span class=\"line\">assertEquals(<span class=\"keyword\">false</span>, page.isLastPage());</span><br><span class=\"line\">assertEquals(<span class=\"keyword\">false</span>, page.isHasPreviousPage());</span><br><span class=\"line\">assertEquals(<span class=\"keyword\">true</span>, page.isHasNextPage());</span><br></pre></td></tr></table></figure>\n<h1 id=\"前端\"><a href=\"#前端\" class=\"headerlink\" title=\"前端\"></a>前端</h1><p>productList.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>产品列表--后台管理模板<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, maximum-scale=1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/static/layui/css/layui.css&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">\"static/layui/css/layui.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/static/css/font_eolqem241z66flxr.css&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">\"static/css/font_eolqem241z66flxr.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/static/css/news.css&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">\"static/css/news.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">\"childrenBody\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">blockquote</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-elem-quote news_search\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-inline\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-inline\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入关键字\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"layui-input search_input\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-btn search_btn\"</span>&gt;</span>查询<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-inline\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-btn linksAdd_btn\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"background-color: #5FB878\"</span>&gt;</span>添加产品<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-inline\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-mid layui-word-aux\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">blockquote</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form links_list\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-table\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">width</span>=<span class=\"string\">\"50\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">width</span>=<span class=\"string\">\"30%\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">col</span> <span class=\"attr\">width</span>=<span class=\"string\">\"10%\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">colgroup</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"checkbox\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">lay-skin</span>=<span class=\"string\">\"primary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t\t<span class=\"attr\">lay-filter</span>=<span class=\"string\">\"allChoose\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"allChoose\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">style</span>=<span class=\"string\">\"text-align: left;\"</span>&gt;</span>产品名称<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>单价<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>区域<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>运营商<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>产品类型<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>状态<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tbody</span> <span class=\"attr\">class</span>=<span class=\"string\">\"links_content\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"demo7\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 100%\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"page\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/static/layui/layui.js&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">src</span>=<span class=\"string\">\"static/layui/layui.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/static/js/home/product.js&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">src</span>=<span class=\"string\">\"static/js/home/product.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>product.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> startPage = <span class=\"number\">0</span>;<span class=\"comment\">// 起始页</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pageSize = <span class=\"number\">10</span>;<span class=\"comment\">// 每页显示多少条</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> total = <span class=\"number\">0</span>;<span class=\"comment\">// 总数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> currPage = <span class=\"number\">1</span>;<span class=\"comment\">// 当前页面</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> firstLoad = <span class=\"number\">0</span>;<span class=\"comment\">// 页面首次加载分页</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//为了修改后可以直接显示当前页面</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hell</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tlayer.closeAll(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\">\tgetProducts();</span><br><span class=\"line\">\ttoPage();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ajax 请求后台数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProducts</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tlayui.config(&#123;<span class=\"attr\">base</span> : <span class=\"string\">\"js/\"</span>&#125;).use(<span class=\"string\">'jquery'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> $ = layui.jquery;</span><br><span class=\"line\">\t\t$.ajax(&#123;</span><br><span class=\"line\">\t\t\turl : <span class=\"string\">\"/gaofeng/home/product/findProductByPage\"</span>,</span><br><span class=\"line\">\t\t\ttype : <span class=\"string\">\"post\"</span>,</span><br><span class=\"line\">\t\t\tdataType : <span class=\"string\">\"json\"</span>,</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">async</span> : <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t\tdata : &#123;</span><br><span class=\"line\">\t\t\t\tstartPage : startPage,</span><br><span class=\"line\">\t\t\t\tpageSize : pageSize</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\tsuccess : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 渲染页面</span></span><br><span class=\"line\">\t\t\t\ttotal = data.total;</span><br><span class=\"line\">\t\t\t\tstartPage = data.pageNum;</span><br><span class=\"line\">\t\t\t\trenderDate(data.list);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderDate</span>(<span class=\"params\">plist, curr</span>) </span>&#123;</span><br><span class=\"line\">\tlayui.config(&#123;<span class=\"attr\">base</span> : <span class=\"string\">\"js/\"</span>&#125;).use([ <span class=\"string\">'form'</span>, <span class=\"string\">'layer'</span>, <span class=\"string\">'jquery'</span>, <span class=\"string\">'laypage'</span> ],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> form = layui.form();</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> $ = layui.jquery;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> dataHtml = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (plist.length != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; plist.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tdataHtml += <span class=\"string\">'&lt;tr&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;&lt;input type=\"checkbox\" name=\"checked\" lay-skin=\"primary\" lay-filter=\"choose\"&gt;&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td align=\"left\"&gt;'</span>+ plist[i].title+ <span class=\"string\">'&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;'</span>+ plist[i].price+ <span class=\"string\">'&lt;/a&gt;&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;'</span>+ plist[i].area+ <span class=\"string\">'&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;'</span>+ plist[i].operator+ <span class=\"string\">'&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;'</span>+ plist[i].ptypeName+ <span class=\"string\">'&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;'</span>+ plist[i].statusName+ <span class=\"string\">'&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;a class=\"layui-btn layui-btn-mini links_edit\" data-id = \"'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ plist[i].id</span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'\"&gt;&lt;i class=\"iconfont icon-edit\"&gt;&lt;/i&gt; 编辑&lt;/a&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;a class=\"layui-btn layui-btn-danger layui-btn-mini links_del\" data-id=\"'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ plist[i].id</span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'\"&gt;&lt;i class=\"layui-icon\"&gt;&amp;#xe640;&lt;/i&gt; 删除&lt;/a&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;/td&gt;'</span></span><br><span class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">'&lt;/tr&gt;'</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tdataHtml = <span class=\"string\">'&lt;tr&gt;&lt;td colspan=\"8\"&gt;暂无数据&lt;/td&gt;&lt;/tr&gt;'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$(<span class=\"string\">\".links_content\"</span>).html(dataHtml);</span><br><span class=\"line\">\t\t form.render();<span class=\"comment\">//如果不执行这一句，前端的checkbox不显示</span></span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toPage</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tlayui.config(&#123;</span><br><span class=\"line\">\t\tbase : <span class=\"string\">\"js/\"</span></span><br><span class=\"line\">\t&#125;).use([<span class=\"string\">'layer'</span>,<span class=\"string\">'laypage'</span> ], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> laypage = layui.laypage;</span><br><span class=\"line\">\t\tlaypage.render(&#123;</span><br><span class=\"line\">\t\t\telem : <span class=\"string\">'demo7'</span>,</span><br><span class=\"line\">\t\t\tcount : total,</span><br><span class=\"line\">\t\t\tcurr : startPage,</span><br><span class=\"line\">\t\t\tlayout : [ <span class=\"string\">'count'</span>, <span class=\"string\">'prev'</span>, <span class=\"string\">'page'</span>, <span class=\"string\">'next'</span>, <span class=\"string\">'limit'</span>, <span class=\"string\">'skip'</span> ],</span><br><span class=\"line\">\t\t\tjump : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(obj);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(total);</span><br><span class=\"line\">\t\t\t\tstartPage = obj.curr;</span><br><span class=\"line\">\t\t\t\tpageSize = obj.limit;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (firstLoad == <span class=\"number\">1</span>) &#123;<span class=\"comment\">//这里是为了防止重复访问（首次）</span></span><br><span class=\"line\">\t\t\t\t\tgetProducts();</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tfirstLoad = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">layui.config(&#123;<span class=\"attr\">base</span> : <span class=\"string\">\"js/\"</span>&#125;).use([ <span class=\"string\">'form'</span>, <span class=\"string\">'layer'</span>, <span class=\"string\">'jquery'</span>, <span class=\"string\">'laypage'</span> ],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form = layui.form(), </span><br><span class=\"line\">\tlayer = layui.layer, </span><br><span class=\"line\">\tlaypage = layui.laypage, </span><br><span class=\"line\">\t$ = layui.jquery;</span><br><span class=\"line\">\tgetProducts();</span><br><span class=\"line\">\ttoPage();</span><br><span class=\"line\">\t<span class=\"comment\">// </span></span><br><span class=\"line\">\t$(<span class=\"string\">\".linksAdd_btn\"</span>).click(</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> index = layer.open(&#123;</span><br><span class=\"line\">\t\t\t\t\ttitle : <span class=\"string\">\"添加产品\"</span>,</span><br><span class=\"line\">\t\t\t\t\ttype : <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\t\tscrollbar : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\tarea : [<span class=\"string\">'100%'</span>,<span class=\"string\">'100%'</span>],</span><br><span class=\"line\">\t\t\t\t\tcontent : <span class=\"string\">\"productAdd\"</span>,</span><br><span class=\"line\">\t\t\t\t\tsuccess : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">layero,index</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\tlayer.tips(<span class=\"string\">'点击此处返回产品列表'</span>,<span class=\"string\">'.layui-layer-setwin .layui-layer-close'</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#123;<span class=\"attr\">tips</span> : <span class=\"number\">3</span>&#125;);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 改变窗口大小时，重置弹窗的高度，防止超出可视区域（如F12调出debug的操作）</span></span><br><span class=\"line\">\t\t\t\t$(<span class=\"built_in\">window</span>).resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\tlayer.full(index);</span><br><span class=\"line\">\t\t\t\t&#125;)</span><br><span class=\"line\">\t\t\t\tlayer.full(index);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 全选</span></span><br><span class=\"line\">\tform.on(<span class=\"string\">'checkbox(allChoose)'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> child = $(data.elem).parents(<span class=\"string\">'table'</span>).find(<span class=\"string\">'tbody input[type=\"checkbox\"]:not([name=\"show\"])'</span>);</span><br><span class=\"line\">\t\tchild.each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, item</span>) </span>&#123;</span><br><span class=\"line\">\t\t\titem.checked = data.elem.checked;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\tform.render(<span class=\"string\">'checkbox'</span>);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 通过判断产品是否全部选中来确定全选按钮是否选中</span></span><br><span class=\"line\">\tform.on(<span class=\"string\">\"checkbox(choose)\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> child = $(data.elem).parents(<span class=\"string\">'table'</span>).find(<span class=\"string\">'tbody input[type=\"checkbox\"]:not([name=\"show\"])'</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> childChecked = $(data.elem).parents(<span class=\"string\">'table'</span>).find(<span class=\"string\">'tbody input[type=\"checkbox\"]:not([name=\"show\"]):checked'</span>)</span><br><span class=\"line\">\t\tdata.elem.checked;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (childChecked.length == child.length) &#123;</span><br><span class=\"line\">\t\t\t$(data.elem).parents(<span class=\"string\">'table'</span>).find(<span class=\"string\">'thead input#allChoose'</span>).get(<span class=\"number\">0</span>).checked = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t$(data.elem).parents(<span class=\"string\">'table'</span>).find(<span class=\"string\">'thead input#allChoose'</span>).get(<span class=\"number\">0</span>).checked = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tform.render(<span class=\"string\">'checkbox'</span>);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 操作</span></span><br><span class=\"line\">\t$(<span class=\"string\">\"body\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"string\">\".links_edit\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 编辑</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> index = layer.open(&#123;</span><br><span class=\"line\">\t\t\ttitle : <span class=\"string\">\"修改产品\"</span>,</span><br><span class=\"line\">\t\t\ttype : <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\tcontent : <span class=\"string\">\"productEdit/\"</span>+ _this.attr(<span class=\"string\">\"data-id\"</span>),</span><br><span class=\"line\">\t\t\tsuccess : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">layero,index</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//layer.tips('点击此处返回产品列表','.layui-layer-setwin .layui-layer-close',&#123;tips : 3&#125;);</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 改变窗口大小时，重置弹窗的高度，防止超出可视区域（如F12调出debug的操作）</span></span><br><span class=\"line\">\t\t$(<span class=\"built_in\">window</span>).resize(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\tlayer.full(index);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t\tlayer.full(index);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t$(<span class=\"string\">\"body\"</span>).on(<span class=\"string\">\"click\"</span>,<span class=\"string\">\".links_del\"</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 删除</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> _this = $(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\tlayer.confirm(<span class=\"string\">'确定删除此信息？'</span>,&#123;<span class=\"attr\">icon</span> : <span class=\"number\">3</span>,<span class=\"attr\">title</span> : <span class=\"string\">'提示信息'</span>&#125;,</span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t$.ajax(&#123;</span><br><span class=\"line\">\t\t\t\ttype : <span class=\"string\">'GET'</span>,</span><br><span class=\"line\">\t\t\t\turl : <span class=\"string\">'/gaofeng/home/product/deleteProduct/'</span>+ _this.attr(<span class=\"string\">\"data-id\"</span>),</span><br><span class=\"line\">\t\t\t\tdataType : <span class=\"string\">'json'</span>,</span><br><span class=\"line\">\t\t\t\tcontentType : <span class=\"string\">'application/json'</span>,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">async</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\tsuccess : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">console</span>.log(result.code);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (result.code == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tlayer.msg(<span class=\"string\">'success:删除成功'</span>,&#123;<span class=\"attr\">icon</span> : <span class=\"number\">1</span>,<span class=\"attr\">time</span> : <span class=\"number\">1000</span>&#125;);</span><br><span class=\"line\">\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tfirstLoad = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\tgetProducts();</span><br><span class=\"line\">\t\t\t\t\t\t\ttoPage();</span><br><span class=\"line\">\t\t\t\t\t\t&#125;, <span class=\"number\">800</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tlayer.msg(<span class=\"string\">'eles:删除失败！'</span>+ result.message,&#123;<span class=\"attr\">icon</span> : <span class=\"number\">2</span>,<span class=\"attr\">time</span> : <span class=\"number\">1000</span>&#125;);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;,<span class=\"attr\">error</span> : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result,type</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\tlayer.msg(<span class=\"string\">'error:删除失败！'</span>,&#123;<span class=\"attr\">icon</span> : <span class=\"number\">2</span>,<span class=\"attr\">time</span> : <span class=\"number\">1000</span>&#125;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\tlayer.close(index);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>当我们修改一条信息后，希望刷新数据，但是依然停留在当前页面。在修改信息的页面，当数据保存成功以后，可以调用父类的方法，进行页面刷新并关闭页面。<strong>当然这是我想到的方法（因为使用layui框架，都是ajax请求的数据，没有做页面整体刷新），可能会有更好的方法。</strong></p>"},{"title":"创建mybatis项目","date":"2017-04-27T03:50:51.000Z","_content":"\n# 搭建mybatis应用的步骤\n\n前面已经简单介绍过了mybatis，今天详细的整理一下创建mybatis项目的详细步骤。数据库的操作基本就是增·删·改·查，其中又已查询最为多。\n\n<!-- more -->\n\n## 搭建一个完整的mybatis应用\n\n1.使用maven创建一个java web项目，参考https://gaofeng0527.github.io/eclipse-create-Maven-Project/\n\n2.在pom.xml配置文件中添加mybatis 和 mysql驱动器依赖\n\n``` xml\n\t\t<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis</groupId>\n\t\t\t<artifactId>mybatis</artifactId>\n\t\t\t<version>3.4.4</version>\n\t\t</dependency>\n\t\t<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t\t<version>5.1.6</version>\n\t\t</dependency>\t\n```\n\n3.创建mybatis-config.xml，mybatis的主要配置文件。主要设置数据库信息，映射文件注册，还有更多的设置，我们后面慢慢研究\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n\t<properties resource=\"config.properties\">\n\t\t\n\t</properties>\n\t<environments default=\"development\">\n\t\t<environment id=\"development\">\n\t\t\t<transactionManager type=\"JDBC\" />\n\t\t\t<dataSource type=\"POOLED\">\n\t\t\t\t<property name=\"driver\" value=\"${driver}\" />\n\t\t\t\t<property name=\"url\" value=\"${url}\" />\n\t\t\t\t<property name=\"username\" value=\"${uname}\" />\n\t\t\t\t<property name=\"password\" value=\"\" />\n\t\t\t</dataSource>\n\t\t</environment>\n\t</environments>\n\t\n  \t<!-- 添加映射文件的注册 -->\n\t<mappers>\n\t\t<mapper resource=\"com/lms/cert/model/ClassUserMapper.xml\" />\n\t</mappers>\n\n</configuration>\n```\n\n4.假设我们已经在数据库中创建好了表，结构如下\n\n``` sql\nCREATE TABLE IF NOT EXISTS `t_class_user` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `class_id` bigint(20) NOT NULL,\n  `class_course_id` bigint(20) DEFAULT NULL,\n  `user_id` bigint(20) NOT NULL,\n  `card_id` bigint(20) DEFAULT NULL,\n  `register_time` date NOT NULL,\n  `register_end_time` date DEFAULT NULL,\n  `score` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `FKAC106ADD159C7722` (`class_id`),\n  KEY `FKAC106ADD4529535F` (`user_id`),\n  KEY `FKAC106ADD2969E25` (`class_course_id`)\n) ENGINE=InnoDB  DEFAULT CHARSET=gb2312 AUTO_INCREMENT=7428 ;\n```\n\n5.编写java类 ClassUser\n\n``` java\npackage com.lms.cert.model;\n\nimport java.util.Date;\n\npublic class ClassUser {\n\n\tprivate Long id;\n\tprivate Long class_id;\n\tprivate Long class_course_id;\n\tprivate Long user_id;\n\tprivate Long card_id;\n\tprivate Date register_time;\n\tprivate Date register_end_time;\n\tprivate Integer score;\n\n\tpublic Long getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(Long id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic Long getClass_id() {\n\t\treturn class_id;\n\t}\n\n\tpublic void setClass_id(Long class_id) {\n\t\tthis.class_id = class_id;\n\t}\n\n\tpublic Long getClass_course_id() {\n\t\treturn class_course_id;\n\t}\n\n\tpublic void setClass_course_id(Long class_course_id) {\n\t\tthis.class_course_id = class_course_id;\n\t}\n\n\tpublic Long getUser_id() {\n\t\treturn user_id;\n\t}\n\n\tpublic void setUser_id(Long user_id) {\n\t\tthis.user_id = user_id;\n\t}\n\n\tpublic Long getCard_id() {\n\t\treturn card_id;\n\t}\n\n\tpublic void setCard_id(Long card_id) {\n\t\tthis.card_id = card_id;\n\t}\n\n\tpublic Date getRegister_time() {\n\t\treturn register_time;\n\t}\n\n\tpublic void setRegister_time(Date register_time) {\n\t\tthis.register_time = register_time;\n\t}\n\n\tpublic Date getRegister_end_time() {\n\t\treturn register_end_time;\n\t}\n\n\tpublic void setRegister_end_time(Date register_end_time) {\n\t\tthis.register_end_time = register_end_time;\n\t}\n\n\tpublic Integer getScore() {\n\t\treturn score;\n\t}\n\n\tpublic void setScore(Integer score) {\n\t\tthis.score = score;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"ClassUser [id=\" + id + \", class_id=\" + class_id + \", class_course_id=\" + class_course_id + \", user_id=\"\n\t\t\t\t+ user_id + \", card_id=\" + card_id + \", register_time=\" + register_time + \", register_end_time=\"\n\t\t\t\t+ register_end_time + \", score=\" + score + \"]\";\n\t}\n\t\n}\n\n```\n\n6.创建ClassUserMapper.xml映射文件，要执行的数据库操作的sql都在该配置文件中编写。\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.lms.cert.inter.ClassUserMapper\">\n\t<!-- 下面的sql是不是看着很眼熟 -->\n\t<select id=\"selectClassUser\" resultType=\"com.lms.cert.model.ClassUser\">\n\t\tselect * from t_class_user where id = #{id}\n\t</select>\n\t\n</mapper>\n```\n\n7.编写测试类\n\n``` java\npackage com.lms.cert.test;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport com.lms.cert.inter.ClassUserMapper;\nimport com.lms.cert.model.ClassUser;\n\npublic class Test {\n\n\tpublic static void main(String[] args) {\n\n\t\tString resource = \"mybatis-config.xml\";\n\t\tSqlSessionFactory sessionFactory = null;\n\t\tSqlSession session = null;\n\t\ttry {\n          \t//获取SqlSessionFactory对象\n\t\t\tInputStream in = Resources.getResourceAsStream(resource);\n\t\t\tsessionFactory = new SqlSessionFactoryBuilder().build(in);\n\t\t\tSystem.out.println(sessionFactory);\n          \t// 获取session\n\t\t\tsession = sessionFactory.openSession();\n          \t// 根据映射文件中select标签下的id调用对应的sql\n\t\t\tClassUser cu = session.selectOne(\"com.lms.cert.inter.ClassUserMapper.selectClassUser\", 7401);\n\t\t\tif (null != cu) {\n\t\t\t\tSystem.out.println(cu);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif(null != session){\n\t\t\t\tsession.close();\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t}\n\n}\n\n```\n\n8.输出结果\n\n>    org.apache.ibatis.session.defaults.DefaultSqlSessionFactory@33a10788\n>    ClassUser [id=7401, class_id=81, class_course_id=237, user_id=2, card_id=null, register_time=Sat Oct 08 00:00:00 CST 2016, register_end_time=null, score=0]\n\n大功告成，是不是很好学！","source":"_posts/mybatis-oneday.md","raw":"---\ntitle: 创建mybatis项目\ndate: 2017-04-27 11:50:51\ntags: mybatis\n---\n\n# 搭建mybatis应用的步骤\n\n前面已经简单介绍过了mybatis，今天详细的整理一下创建mybatis项目的详细步骤。数据库的操作基本就是增·删·改·查，其中又已查询最为多。\n\n<!-- more -->\n\n## 搭建一个完整的mybatis应用\n\n1.使用maven创建一个java web项目，参考https://gaofeng0527.github.io/eclipse-create-Maven-Project/\n\n2.在pom.xml配置文件中添加mybatis 和 mysql驱动器依赖\n\n``` xml\n\t\t<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->\n\t\t<dependency>\n\t\t\t<groupId>org.mybatis</groupId>\n\t\t\t<artifactId>mybatis</artifactId>\n\t\t\t<version>3.4.4</version>\n\t\t</dependency>\n\t\t<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n\t\t<dependency>\n\t\t\t<groupId>mysql</groupId>\n\t\t\t<artifactId>mysql-connector-java</artifactId>\n\t\t\t<version>5.1.6</version>\n\t\t</dependency>\t\n```\n\n3.创建mybatis-config.xml，mybatis的主要配置文件。主要设置数据库信息，映射文件注册，还有更多的设置，我们后面慢慢研究\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE configuration\n  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-config.dtd\">\n<configuration>\n\t<properties resource=\"config.properties\">\n\t\t\n\t</properties>\n\t<environments default=\"development\">\n\t\t<environment id=\"development\">\n\t\t\t<transactionManager type=\"JDBC\" />\n\t\t\t<dataSource type=\"POOLED\">\n\t\t\t\t<property name=\"driver\" value=\"${driver}\" />\n\t\t\t\t<property name=\"url\" value=\"${url}\" />\n\t\t\t\t<property name=\"username\" value=\"${uname}\" />\n\t\t\t\t<property name=\"password\" value=\"\" />\n\t\t\t</dataSource>\n\t\t</environment>\n\t</environments>\n\t\n  \t<!-- 添加映射文件的注册 -->\n\t<mappers>\n\t\t<mapper resource=\"com/lms/cert/model/ClassUserMapper.xml\" />\n\t</mappers>\n\n</configuration>\n```\n\n4.假设我们已经在数据库中创建好了表，结构如下\n\n``` sql\nCREATE TABLE IF NOT EXISTS `t_class_user` (\n  `id` bigint(20) NOT NULL AUTO_INCREMENT,\n  `class_id` bigint(20) NOT NULL,\n  `class_course_id` bigint(20) DEFAULT NULL,\n  `user_id` bigint(20) NOT NULL,\n  `card_id` bigint(20) DEFAULT NULL,\n  `register_time` date NOT NULL,\n  `register_end_time` date DEFAULT NULL,\n  `score` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `FKAC106ADD159C7722` (`class_id`),\n  KEY `FKAC106ADD4529535F` (`user_id`),\n  KEY `FKAC106ADD2969E25` (`class_course_id`)\n) ENGINE=InnoDB  DEFAULT CHARSET=gb2312 AUTO_INCREMENT=7428 ;\n```\n\n5.编写java类 ClassUser\n\n``` java\npackage com.lms.cert.model;\n\nimport java.util.Date;\n\npublic class ClassUser {\n\n\tprivate Long id;\n\tprivate Long class_id;\n\tprivate Long class_course_id;\n\tprivate Long user_id;\n\tprivate Long card_id;\n\tprivate Date register_time;\n\tprivate Date register_end_time;\n\tprivate Integer score;\n\n\tpublic Long getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(Long id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic Long getClass_id() {\n\t\treturn class_id;\n\t}\n\n\tpublic void setClass_id(Long class_id) {\n\t\tthis.class_id = class_id;\n\t}\n\n\tpublic Long getClass_course_id() {\n\t\treturn class_course_id;\n\t}\n\n\tpublic void setClass_course_id(Long class_course_id) {\n\t\tthis.class_course_id = class_course_id;\n\t}\n\n\tpublic Long getUser_id() {\n\t\treturn user_id;\n\t}\n\n\tpublic void setUser_id(Long user_id) {\n\t\tthis.user_id = user_id;\n\t}\n\n\tpublic Long getCard_id() {\n\t\treturn card_id;\n\t}\n\n\tpublic void setCard_id(Long card_id) {\n\t\tthis.card_id = card_id;\n\t}\n\n\tpublic Date getRegister_time() {\n\t\treturn register_time;\n\t}\n\n\tpublic void setRegister_time(Date register_time) {\n\t\tthis.register_time = register_time;\n\t}\n\n\tpublic Date getRegister_end_time() {\n\t\treturn register_end_time;\n\t}\n\n\tpublic void setRegister_end_time(Date register_end_time) {\n\t\tthis.register_end_time = register_end_time;\n\t}\n\n\tpublic Integer getScore() {\n\t\treturn score;\n\t}\n\n\tpublic void setScore(Integer score) {\n\t\tthis.score = score;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn \"ClassUser [id=\" + id + \", class_id=\" + class_id + \", class_course_id=\" + class_course_id + \", user_id=\"\n\t\t\t\t+ user_id + \", card_id=\" + card_id + \", register_time=\" + register_time + \", register_end_time=\"\n\t\t\t\t+ register_end_time + \", score=\" + score + \"]\";\n\t}\n\t\n}\n\n```\n\n6.创建ClassUserMapper.xml映射文件，要执行的数据库操作的sql都在该配置文件中编写。\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper\n  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"com.lms.cert.inter.ClassUserMapper\">\n\t<!-- 下面的sql是不是看着很眼熟 -->\n\t<select id=\"selectClassUser\" resultType=\"com.lms.cert.model.ClassUser\">\n\t\tselect * from t_class_user where id = #{id}\n\t</select>\n\t\n</mapper>\n```\n\n7.编写测试类\n\n``` java\npackage com.lms.cert.test;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\n\nimport com.lms.cert.inter.ClassUserMapper;\nimport com.lms.cert.model.ClassUser;\n\npublic class Test {\n\n\tpublic static void main(String[] args) {\n\n\t\tString resource = \"mybatis-config.xml\";\n\t\tSqlSessionFactory sessionFactory = null;\n\t\tSqlSession session = null;\n\t\ttry {\n          \t//获取SqlSessionFactory对象\n\t\t\tInputStream in = Resources.getResourceAsStream(resource);\n\t\t\tsessionFactory = new SqlSessionFactoryBuilder().build(in);\n\t\t\tSystem.out.println(sessionFactory);\n          \t// 获取session\n\t\t\tsession = sessionFactory.openSession();\n          \t// 根据映射文件中select标签下的id调用对应的sql\n\t\t\tClassUser cu = session.selectOne(\"com.lms.cert.inter.ClassUserMapper.selectClassUser\", 7401);\n\t\t\tif (null != cu) {\n\t\t\t\tSystem.out.println(cu);\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t} catch (IOException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif(null != session){\n\t\t\t\tsession.close();\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t}\n\n}\n\n```\n\n8.输出结果\n\n>    org.apache.ibatis.session.defaults.DefaultSqlSessionFactory@33a10788\n>    ClassUser [id=7401, class_id=81, class_course_id=237, user_id=2, card_id=null, register_time=Sat Oct 08 00:00:00 CST 2016, register_end_time=null, score=0]\n\n大功告成，是不是很好学！","slug":"mybatis-oneday","published":1,"updated":"2022-11-24T13:38:45.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1eu000z4ovk3oidxrci","content":"<h1 id=\"搭建mybatis应用的步骤\"><a href=\"#搭建mybatis应用的步骤\" class=\"headerlink\" title=\"搭建mybatis应用的步骤\"></a>搭建mybatis应用的步骤</h1><p>前面已经简单介绍过了mybatis，今天详细的整理一下创建mybatis项目的详细步骤。数据库的操作基本就是增·删·改·查，其中又已查询最为多。</p>\n<a id=\"more\"></a>\n<h2 id=\"搭建一个完整的mybatis应用\"><a href=\"#搭建一个完整的mybatis应用\" class=\"headerlink\" title=\"搭建一个完整的mybatis应用\"></a>搭建一个完整的mybatis应用</h2><p>1.使用maven创建一个java web项目，参考<a href=\"https://gaofeng0527.github.io/eclipse-create-Maven-Project/\" target=\"_blank\" rel=\"noopener\">https://gaofeng0527.github.io/eclipse-create-Maven-Project/</a></p>\n<p>2.在pom.xml配置文件中添加mybatis 和 mysql驱动器依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>3.创建mybatis-config.xml，mybatis的主要配置文件。主要设置数据库信息，映射文件注册，还有更多的设置，我们后面慢慢研究</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"config.properties\"</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;driver&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;url&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  \t<span class=\"comment\">&lt;!-- 添加映射文件的注册 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"com/lms/cert/model/ClassUserMapper.xml\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>4.假设我们已经在数据库中创建好了表，结构如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`t_class_user`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">`class_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`class_course_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`user_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`card_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`register_time`</span> <span class=\"built_in\">date</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`register_end_time`</span> <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`score`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`FKAC106ADD159C7722`</span> (<span class=\"string\">`class_id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`FKAC106ADD4529535F`</span> (<span class=\"string\">`user_id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`FKAC106ADD2969E25`</span> (<span class=\"string\">`class_course_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span>  <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=gb2312 AUTO_INCREMENT=<span class=\"number\">7428</span> ;</span><br></pre></td></tr></table></figure>\n<p>5.编写java类 ClassUser</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lms.cert.model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassUser</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long class_id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long class_course_id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long user_id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long card_id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Date register_time;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Date register_end_time;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Long id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getClass_id</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> class_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setClass_id</span><span class=\"params\">(Long class_id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.class_id = class_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getClass_course_id</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> class_course_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setClass_course_id</span><span class=\"params\">(Long class_course_id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.class_course_id = class_course_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getUser_id</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> user_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser_id</span><span class=\"params\">(Long user_id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.user_id = user_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getCard_id</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> card_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCard_id</span><span class=\"params\">(Long card_id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.card_id = card_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">getRegister_time</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> register_time;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRegister_time</span><span class=\"params\">(Date register_time)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.register_time = register_time;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">getRegister_end_time</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> register_end_time;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRegister_end_time</span><span class=\"params\">(Date register_end_time)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.register_end_time = register_end_time;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getScore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setScore</span><span class=\"params\">(Integer score)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.score = score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"ClassUser [id=\"</span> + id + <span class=\"string\">\", class_id=\"</span> + class_id + <span class=\"string\">\", class_course_id=\"</span> + class_course_id + <span class=\"string\">\", user_id=\"</span></span><br><span class=\"line\">\t\t\t\t+ user_id + <span class=\"string\">\", card_id=\"</span> + card_id + <span class=\"string\">\", register_time=\"</span> + register_time + <span class=\"string\">\", register_end_time=\"</span></span><br><span class=\"line\">\t\t\t\t+ register_end_time + <span class=\"string\">\", score=\"</span> + score + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6.创建ClassUserMapper.xml映射文件，要执行的数据库操作的sql都在该配置文件中编写。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.lms.cert.inter.ClassUserMapper\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 下面的sql是不是看着很眼熟 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"selectClassUser\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.lms.cert.model.ClassUser\"</span>&gt;</span></span><br><span class=\"line\">\t\tselect * from t_class_user where id = #&#123;id&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>7.编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lms.cert.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.io.Resources;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lms.cert.inter.ClassUserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lms.cert.model.ClassUser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString resource = <span class=\"string\">\"mybatis-config.xml\"</span>;</span><br><span class=\"line\">\t\tSqlSessionFactory sessionFactory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tSqlSession session = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          \t<span class=\"comment\">//获取SqlSessionFactory对象</span></span><br><span class=\"line\">\t\t\tInputStream in = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">\t\t\tsessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class=\"line\">\t\t\tSystem.out.println(sessionFactory);</span><br><span class=\"line\">          \t<span class=\"comment\">// 获取session</span></span><br><span class=\"line\">\t\t\tsession = sessionFactory.openSession();</span><br><span class=\"line\">          \t<span class=\"comment\">// 根据映射文件中select标签下的id调用对应的sql</span></span><br><span class=\"line\">\t\t\tClassUser cu = session.selectOne(<span class=\"string\">\"com.lms.cert.inter.ClassUserMapper.selectClassUser\"</span>, <span class=\"number\">7401</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != cu) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(cu);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != session)&#123;</span><br><span class=\"line\">\t\t\t\tsession.close();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>8.输出结果</p>\n<blockquote>\n<p>   org.apache.ibatis.session.defaults.DefaultSqlSessionFactory@33a10788<br>   ClassUser [id=7401, class_id=81, class_course_id=237, user_id=2, card_id=null, register_time=Sat Oct 08 00:00:00 CST 2016, register_end_time=null, score=0]</p>\n</blockquote>\n<p>大功告成，是不是很好学！</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"搭建mybatis应用的步骤\"><a href=\"#搭建mybatis应用的步骤\" class=\"headerlink\" title=\"搭建mybatis应用的步骤\"></a>搭建mybatis应用的步骤</h1><p>前面已经简单介绍过了mybatis，今天详细的整理一下创建mybatis项目的详细步骤。数据库的操作基本就是增·删·改·查，其中又已查询最为多。</p>","more":"<h2 id=\"搭建一个完整的mybatis应用\"><a href=\"#搭建一个完整的mybatis应用\" class=\"headerlink\" title=\"搭建一个完整的mybatis应用\"></a>搭建一个完整的mybatis应用</h2><p>1.使用maven创建一个java web项目，参考<a href=\"https://gaofeng0527.github.io/eclipse-create-Maven-Project/\" target=\"_blank\" rel=\"noopener\">https://gaofeng0527.github.io/eclipse-create-Maven-Project/</a></p>\n<p>2.在pom.xml配置文件中添加mybatis 和 mysql驱动器依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.4.4<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>3.创建mybatis-config.xml，mybatis的主要配置文件。主要设置数据库信息，映射文件注册，还有更多的设置，我们后面慢慢研究</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE configuration</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"config.properties\"</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">environments</span> <span class=\"attr\">default</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">environment</span> <span class=\"attr\">id</span>=<span class=\"string\">\"development\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">transactionManager</span> <span class=\"attr\">type</span>=<span class=\"string\">\"JDBC\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">dataSource</span> <span class=\"attr\">type</span>=<span class=\"string\">\"POOLED\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driver\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;driver&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;url&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">dataSource</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">environment</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">environments</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">  \t<span class=\"comment\">&lt;!-- 添加映射文件的注册 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">resource</span>=<span class=\"string\">\"com/lms/cert/model/ClassUserMapper.xml\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mappers</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>4.假设我们已经在数据库中创建好了表，结构如下</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> <span class=\"string\">`t_class_user`</span> (</span><br><span class=\"line\">  <span class=\"string\">`id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span> AUTO_INCREMENT,</span><br><span class=\"line\">  <span class=\"string\">`class_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`class_course_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`user_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`card_id`</span> <span class=\"built_in\">bigint</span>(<span class=\"number\">20</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`register_time`</span> <span class=\"built_in\">date</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`register_end_time`</span> <span class=\"built_in\">date</span> <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  <span class=\"string\">`score`</span> <span class=\"built_in\">int</span>(<span class=\"number\">11</span>) <span class=\"keyword\">DEFAULT</span> <span class=\"literal\">NULL</span>,</span><br><span class=\"line\">  PRIMARY <span class=\"keyword\">KEY</span> (<span class=\"string\">`id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`FKAC106ADD159C7722`</span> (<span class=\"string\">`class_id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`FKAC106ADD4529535F`</span> (<span class=\"string\">`user_id`</span>),</span><br><span class=\"line\">  <span class=\"keyword\">KEY</span> <span class=\"string\">`FKAC106ADD2969E25`</span> (<span class=\"string\">`class_course_id`</span>)</span><br><span class=\"line\">) <span class=\"keyword\">ENGINE</span>=<span class=\"keyword\">InnoDB</span>  <span class=\"keyword\">DEFAULT</span> <span class=\"keyword\">CHARSET</span>=gb2312 AUTO_INCREMENT=<span class=\"number\">7428</span> ;</span><br></pre></td></tr></table></figure>\n<p>5.编写java类 ClassUser</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lms.cert.model;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassUser</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long class_id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long class_course_id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long user_id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long card_id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Date register_time;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Date register_end_time;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer score;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(Long id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getClass_id</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> class_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setClass_id</span><span class=\"params\">(Long class_id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.class_id = class_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getClass_course_id</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> class_course_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setClass_course_id</span><span class=\"params\">(Long class_course_id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.class_course_id = class_course_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getUser_id</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> user_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setUser_id</span><span class=\"params\">(Long user_id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.user_id = user_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Long <span class=\"title\">getCard_id</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> card_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCard_id</span><span class=\"params\">(Long card_id)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.card_id = card_id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">getRegister_time</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> register_time;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRegister_time</span><span class=\"params\">(Date register_time)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.register_time = register_time;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Date <span class=\"title\">getRegister_end_time</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> register_end_time;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setRegister_end_time</span><span class=\"params\">(Date register_end_time)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.register_end_time = register_end_time;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getScore</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setScore</span><span class=\"params\">(Integer score)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.score = score;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"ClassUser [id=\"</span> + id + <span class=\"string\">\", class_id=\"</span> + class_id + <span class=\"string\">\", class_course_id=\"</span> + class_course_id + <span class=\"string\">\", user_id=\"</span></span><br><span class=\"line\">\t\t\t\t+ user_id + <span class=\"string\">\", card_id=\"</span> + card_id + <span class=\"string\">\", register_time=\"</span> + register_time + <span class=\"string\">\", register_end_time=\"</span></span><br><span class=\"line\">\t\t\t\t+ register_end_time + <span class=\"string\">\", score=\"</span> + score + <span class=\"string\">\"]\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>6.创建ClassUserMapper.xml映射文件，要执行的数据库操作的sql都在该配置文件中编写。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE mapper</span></span><br><span class=\"line\"><span class=\"meta\">  PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"</span></span><br><span class=\"line\"><span class=\"meta\">  \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"com.lms.cert.inter.ClassUserMapper\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 下面的sql是不是看着很眼熟 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">\"selectClassUser\"</span> <span class=\"attr\">resultType</span>=<span class=\"string\">\"com.lms.cert.model.ClassUser\"</span>&gt;</span></span><br><span class=\"line\">\t\tselect * from t_class_user where id = #&#123;id&#125;</span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>7.编写测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.lms.cert.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.io.Resources;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lms.cert.inter.ClassUserMapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lms.cert.model.ClassUser;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString resource = <span class=\"string\">\"mybatis-config.xml\"</span>;</span><br><span class=\"line\">\t\tSqlSessionFactory sessionFactory = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\tSqlSession session = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          \t<span class=\"comment\">//获取SqlSessionFactory对象</span></span><br><span class=\"line\">\t\t\tInputStream in = Resources.getResourceAsStream(resource);</span><br><span class=\"line\">\t\t\tsessionFactory = <span class=\"keyword\">new</span> SqlSessionFactoryBuilder().build(in);</span><br><span class=\"line\">\t\t\tSystem.out.println(sessionFactory);</span><br><span class=\"line\">          \t<span class=\"comment\">// 获取session</span></span><br><span class=\"line\">\t\t\tsession = sessionFactory.openSession();</span><br><span class=\"line\">          \t<span class=\"comment\">// 根据映射文件中select标签下的id调用对应的sql</span></span><br><span class=\"line\">\t\t\tClassUser cu = session.selectOne(<span class=\"string\">\"com.lms.cert.inter.ClassUserMapper.selectClassUser\"</span>, <span class=\"number\">7401</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != cu) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(cu);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">\t\t\te.printStackTrace();</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> != session)&#123;</span><br><span class=\"line\">\t\t\t\tsession.close();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>8.输出结果</p>\n<blockquote>\n<p>   org.apache.ibatis.session.defaults.DefaultSqlSessionFactory@33a10788<br>   ClassUser [id=7401, class_id=81, class_course_id=237, user_id=2, card_id=null, register_time=Sat Oct 08 00:00:00 CST 2016, register_end_time=null, score=0]</p>\n</blockquote>\n<p>大功告成，是不是很好学！</p>"},{"title":"防止XSS攻击","date":"2019-05-31T08:10:09.000Z","_content":"\n# XSS攻击\n\nXSS攻击全称跨站脚本攻击，是一种在`web`应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其他用户使用的页面中。例如：不法用户在评论某条博客时，植入类似`<script>alert('一个大傻瓜')</script>`可执行的js脚本保存到服务器，当在显示的时候，就会出现弹出框，这是最简单的XSS攻击。\n\n>    服务器处理富文本编辑器提交的内容时, 因排版的需求不能对 HTML 标签进行转义, 但为了防止 XSS 攻击, 又必须过滤掉其中的 JS 代码, 在 Java 中使用 Jsoup 正好可以满足此要求\n>\n>    \n\n[参考](https://www.jianshu.com/p/32abc12a175a)\n\n# 解决思路\n\n1.在前端页面，可以通过js过滤一下特殊字符。\n\n2.在服务器端通过过滤器，拦截请求，过滤参数，清除危险字符\n\n<!-- more -->\n\n# 实例\n\n## 导入所需jar\n\n前面提到，使用`jsoup`比较合适，因此要引入`jsoup`的jar\n\n```gradle\n\tcompile(\n            \"org.springframework:spring-webmvc:$spring\",\n            \"org.springframework:spring-context-support:$spring\",\n            \"org.thymeleaf:thymeleaf-spring5:${versions.thymeleaf}\",\n            \"com.alibaba:fastjson:${versions.fastjson}\",\n            \"commons-codec:commons-codec:1.10\",\n            \"commons-io:commons-io:2.5\",\n            \"org.apache.commons:commons-lang3:3.8.1\",\n            \"commons-fileupload:commons-fileupload:1.3.1\",\n            \"org.projectlombok:lombok:1.18.4\",\n            \"org.jsoup:jsoup:1.7.1\" //jsoup\n    )\n```\n\n## 编写JsoupUtils\n\n一开始使用`jsoup`时，遇到一个问题。在富文本框中，把图片转换成`base64`时，传到后台会把`src`给过滤掉，成`<img alt=\"\" width=\"200\"/>`。原因是，在`jsoup`中提供了一个白名单类`org.jsoup.safety.Whitelist`[Whitelist类学习](https://blog.csdn.net/xyw_blog/article/details/9145523)。类中有个方法`addProtocols(java.lang.String,java.lang.String, java.lang.String...)`，可以设置某个标签中的某个特性支持什么协议。看一下白名单，注意`img`\n\n```java\npublic static Whitelist relaxed() {\n    return new Whitelist()\n        .addTags(\n            \"a\", \"b\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"col\",\n            \"colgroup\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n            \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"span\", \"strike\", \"strong\",\n            \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"u\", \"ul\"\n        )\n\n        .addAttributes(\"a\", \"href\", \"title\") // a 标签的合法属性为 href 和 title\n        .addAttributes(\"blockquote\", \"cite\")\n        .addAttributes(\"col\", \"span\", \"width\")\n        .addAttributes(\"colgroup\", \"span\", \"width\")\n        .addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n        .addAttributes(\"ol\", \"start\", \"type\")\n        .addAttributes(\"q\", \"cite\")\n        .addAttributes(\"table\", \"summary\", \"width\")\n        .addAttributes(\"td\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"width\")\n        .addAttributes(\"th\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"scope\", \"width\")\n        .addAttributes(\"ul\", \"type\")\n\n        .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n        .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n        .addProtocols(\"cite\", \"cite\", \"http\", \"https\")\n        .addProtocols(\"img\", \"src\", \"http\", \"https\") //这里img src属性只支持http，和https协议。\n        .addProtocols(\"q\", \"cite\", \"http\", \"https\");\n}\n```\n\n而`base64`是以`data:`开头。所以每次都把`src`给过滤掉了。在白名单中添加：`WHITELIST.addProtocols(\"img\",\"src\",\"data\");//支持img 为base64`就解决了。\n\n\n\n```java\npackage com.peak.utils;\n\nimport com.alibaba.fastjson.JSON;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.safety.Whitelist;\n\n/**\n * 1.使用Jsoup过滤XSS攻击。\n * 2.在Jsoup的Whitelist中内置了很多白名单，这些名单将不会过滤\n */\npublic class JsoupUtils {\n\n    private static final Whitelist WHITELIST = Whitelist.relaxed();\n\n    static {\n        // 富文本编辑时一些样式是使用 style 来进行实现的\n        // 比如红色字体 style=\"color:red;\"\n        // 所以需要给所有标签添加 style 属性\n        WHITELIST.addAttributes(\":all\", \"style\");\n        WHITELIST.addAttributes(\":all\", \"class\");\n        WHITELIST.addAttributes(\":all\", \"target\");\n        WHITELIST.addAttributes(\":all\", \"spellcheck\");\n        WHITELIST.addProtocols(\"img\",\"src\",\"data\");//支持img 为base64\n        System.out.println(JSON.toJSONString(WHITELIST));\n    }\n\n    private JsoupUtils() {\n    }\n\n    private static final Document.OutputSettings OUTPUT_SETTINGS = new Document.OutputSettings().prettyPrint(false);\n\n    public static String clean(String content) {\n        if (StringUtils.isBlank(content)) {\n            return \"\";\n        }\n        return Jsoup.clean(content, \"\", WHITELIST, OUTPUT_SETTINGS);\n    }\n\n    public static void main(String[] args) {\n        String str = \"<a href='ss' src='ss'></a><img src='http://www.baidu.com' alt='d' /><script>alert('ss')</script>sss<p style='s' onclick='s'>p标签</p>\";\n        System.out.println(JsoupUtils.clean(str));\n    }\n}\n\n```\n\n\n\n## 集成HttpServletRequestWrapper\n\n```java\npackage com.peak.filter;\n\nimport com.peak.utils.JsoupUtils;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\n\npublic class XSSHttpServletRequestWrapper extends HttpServletRequestWrapper {\n\n    public XSSHttpServletRequestWrapper(HttpServletRequest request) {\n        super(request);\n    }\n\n    /**\n     * 过滤数组参数\n     *\n     * @param name\n     * @return\n     */\n    @Override\n    public String[] getParameterValues(String name) {\n        String[] values = super.getParameterValues(name);\n        if (null == values)\n            return null;\n        int count = values.length;\n        String[] encodeValues = new String[count];\n        for (int i = 0; i < count; i++) {\n            encodeValues[i] = JsoupUtils.clean(values[i]);\n        }\n        return encodeValues;\n    }\n\n    /**\n     * 过滤参数中的特殊字符\n     *\n     * @param name\n     * @return\n     */\n    @Override\n    public String getParameter(String name) {\n        String value = super.getParameter(name);\n        if (null == value)\n            return null;\n        return JsoupUtils.clean(value);\n    }\n\n    /**\n     * 过滤attribute中的参数\n     *\n     * @param name\n     * @return\n     */\n    @Override\n    public Object getAttribute(String name) {\n        Object value = super.getAttribute(name);\n        if (null != value && value instanceof String) {\n            return JsoupUtils.clean((String) value);\n        }\n        return value;\n    }\n\n    /**\n     * 过滤header头部信息\n     *\n     * @param name\n     * @return\n     */\n    @Override\n    public String getHeader(String name) {\n        String value = super.getHeader(name);\n        if (null == value)\n            return value;\n        return JsoupUtils.clean(value);\n    }\n}\n\n```\n\n## 编写Filter\n\n```java\npackage com.peak.filter;\n\nimport jdk.nashorn.internal.objects.annotations.Setter;\nimport org.apache.commons.lang3.StringUtils;\n\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class XssFilter implements Filter {\n    private Set<String> exUrls;\n\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        if (StringUtils.isNotBlank(filterConfig.getInitParameter(\"exUrl\"))) {\n            this.exUrls = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(filterConfig.getInitParameter(\"exUrl\").split(\",\"))));\n        } else {\n            this.exUrls = new HashSet<>();\n        }\n\n    }\n\n    @Override\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest) req;\n        HttpServletResponse response = (HttpServletResponse) res;\n        //获取当前请求路径\n        String path = request.getRequestURI().substring(request.getContextPath().length()).replaceAll(\"[/]+$\", \"\");\n        //判断是否在不再过滤范围内 规范:保存或者修改内容时，规范访问地址中包含save或者update\n        //这样，只需要添加，或者保存的操作才进行过滤\n        if (path.indexOf(\"save\") >= 0 || path.indexOf(\"update\") >= 0) {\n            chain.doFilter(new XSSHttpServletRequestWrapper(request), response);\n            //chain.doFilter(request, response);\n        } else {\n            chain.doFilter(request, response);\n        }\n\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n\n```\n\n## 配置Filter\n\n```xml\n\t<!-- 防止xss攻击 -->\n    <filter>\n        <filter-name>xssFilter</filter-name>\n        <filter-class>com.peak.filter.XssFilter</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>xssFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n```\n\n","source":"_posts/prevent-xss.md","raw":"---\ntitle: 防止XSS攻击\ndate: 2019-05-31 16:10:09\ntags: [javaweb]\n---\n\n# XSS攻击\n\nXSS攻击全称跨站脚本攻击，是一种在`web`应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其他用户使用的页面中。例如：不法用户在评论某条博客时，植入类似`<script>alert('一个大傻瓜')</script>`可执行的js脚本保存到服务器，当在显示的时候，就会出现弹出框，这是最简单的XSS攻击。\n\n>    服务器处理富文本编辑器提交的内容时, 因排版的需求不能对 HTML 标签进行转义, 但为了防止 XSS 攻击, 又必须过滤掉其中的 JS 代码, 在 Java 中使用 Jsoup 正好可以满足此要求\n>\n>    \n\n[参考](https://www.jianshu.com/p/32abc12a175a)\n\n# 解决思路\n\n1.在前端页面，可以通过js过滤一下特殊字符。\n\n2.在服务器端通过过滤器，拦截请求，过滤参数，清除危险字符\n\n<!-- more -->\n\n# 实例\n\n## 导入所需jar\n\n前面提到，使用`jsoup`比较合适，因此要引入`jsoup`的jar\n\n```gradle\n\tcompile(\n            \"org.springframework:spring-webmvc:$spring\",\n            \"org.springframework:spring-context-support:$spring\",\n            \"org.thymeleaf:thymeleaf-spring5:${versions.thymeleaf}\",\n            \"com.alibaba:fastjson:${versions.fastjson}\",\n            \"commons-codec:commons-codec:1.10\",\n            \"commons-io:commons-io:2.5\",\n            \"org.apache.commons:commons-lang3:3.8.1\",\n            \"commons-fileupload:commons-fileupload:1.3.1\",\n            \"org.projectlombok:lombok:1.18.4\",\n            \"org.jsoup:jsoup:1.7.1\" //jsoup\n    )\n```\n\n## 编写JsoupUtils\n\n一开始使用`jsoup`时，遇到一个问题。在富文本框中，把图片转换成`base64`时，传到后台会把`src`给过滤掉，成`<img alt=\"\" width=\"200\"/>`。原因是，在`jsoup`中提供了一个白名单类`org.jsoup.safety.Whitelist`[Whitelist类学习](https://blog.csdn.net/xyw_blog/article/details/9145523)。类中有个方法`addProtocols(java.lang.String,java.lang.String, java.lang.String...)`，可以设置某个标签中的某个特性支持什么协议。看一下白名单，注意`img`\n\n```java\npublic static Whitelist relaxed() {\n    return new Whitelist()\n        .addTags(\n            \"a\", \"b\", \"blockquote\", \"br\", \"caption\", \"cite\", \"code\", \"col\",\n            \"colgroup\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\",\n            \"i\", \"img\", \"li\", \"ol\", \"p\", \"pre\", \"q\", \"small\", \"span\", \"strike\", \"strong\",\n            \"sub\", \"sup\", \"table\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\", \"u\", \"ul\"\n        )\n\n        .addAttributes(\"a\", \"href\", \"title\") // a 标签的合法属性为 href 和 title\n        .addAttributes(\"blockquote\", \"cite\")\n        .addAttributes(\"col\", \"span\", \"width\")\n        .addAttributes(\"colgroup\", \"span\", \"width\")\n        .addAttributes(\"img\", \"align\", \"alt\", \"height\", \"src\", \"title\", \"width\")\n        .addAttributes(\"ol\", \"start\", \"type\")\n        .addAttributes(\"q\", \"cite\")\n        .addAttributes(\"table\", \"summary\", \"width\")\n        .addAttributes(\"td\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"width\")\n        .addAttributes(\"th\", \"abbr\", \"axis\", \"colspan\", \"rowspan\", \"scope\", \"width\")\n        .addAttributes(\"ul\", \"type\")\n\n        .addProtocols(\"a\", \"href\", \"ftp\", \"http\", \"https\", \"mailto\")\n        .addProtocols(\"blockquote\", \"cite\", \"http\", \"https\")\n        .addProtocols(\"cite\", \"cite\", \"http\", \"https\")\n        .addProtocols(\"img\", \"src\", \"http\", \"https\") //这里img src属性只支持http，和https协议。\n        .addProtocols(\"q\", \"cite\", \"http\", \"https\");\n}\n```\n\n而`base64`是以`data:`开头。所以每次都把`src`给过滤掉了。在白名单中添加：`WHITELIST.addProtocols(\"img\",\"src\",\"data\");//支持img 为base64`就解决了。\n\n\n\n```java\npackage com.peak.utils;\n\nimport com.alibaba.fastjson.JSON;\nimport org.apache.commons.lang3.StringUtils;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.safety.Whitelist;\n\n/**\n * 1.使用Jsoup过滤XSS攻击。\n * 2.在Jsoup的Whitelist中内置了很多白名单，这些名单将不会过滤\n */\npublic class JsoupUtils {\n\n    private static final Whitelist WHITELIST = Whitelist.relaxed();\n\n    static {\n        // 富文本编辑时一些样式是使用 style 来进行实现的\n        // 比如红色字体 style=\"color:red;\"\n        // 所以需要给所有标签添加 style 属性\n        WHITELIST.addAttributes(\":all\", \"style\");\n        WHITELIST.addAttributes(\":all\", \"class\");\n        WHITELIST.addAttributes(\":all\", \"target\");\n        WHITELIST.addAttributes(\":all\", \"spellcheck\");\n        WHITELIST.addProtocols(\"img\",\"src\",\"data\");//支持img 为base64\n        System.out.println(JSON.toJSONString(WHITELIST));\n    }\n\n    private JsoupUtils() {\n    }\n\n    private static final Document.OutputSettings OUTPUT_SETTINGS = new Document.OutputSettings().prettyPrint(false);\n\n    public static String clean(String content) {\n        if (StringUtils.isBlank(content)) {\n            return \"\";\n        }\n        return Jsoup.clean(content, \"\", WHITELIST, OUTPUT_SETTINGS);\n    }\n\n    public static void main(String[] args) {\n        String str = \"<a href='ss' src='ss'></a><img src='http://www.baidu.com' alt='d' /><script>alert('ss')</script>sss<p style='s' onclick='s'>p标签</p>\";\n        System.out.println(JsoupUtils.clean(str));\n    }\n}\n\n```\n\n\n\n## 集成HttpServletRequestWrapper\n\n```java\npackage com.peak.filter;\n\nimport com.peak.utils.JsoupUtils;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletRequestWrapper;\n\npublic class XSSHttpServletRequestWrapper extends HttpServletRequestWrapper {\n\n    public XSSHttpServletRequestWrapper(HttpServletRequest request) {\n        super(request);\n    }\n\n    /**\n     * 过滤数组参数\n     *\n     * @param name\n     * @return\n     */\n    @Override\n    public String[] getParameterValues(String name) {\n        String[] values = super.getParameterValues(name);\n        if (null == values)\n            return null;\n        int count = values.length;\n        String[] encodeValues = new String[count];\n        for (int i = 0; i < count; i++) {\n            encodeValues[i] = JsoupUtils.clean(values[i]);\n        }\n        return encodeValues;\n    }\n\n    /**\n     * 过滤参数中的特殊字符\n     *\n     * @param name\n     * @return\n     */\n    @Override\n    public String getParameter(String name) {\n        String value = super.getParameter(name);\n        if (null == value)\n            return null;\n        return JsoupUtils.clean(value);\n    }\n\n    /**\n     * 过滤attribute中的参数\n     *\n     * @param name\n     * @return\n     */\n    @Override\n    public Object getAttribute(String name) {\n        Object value = super.getAttribute(name);\n        if (null != value && value instanceof String) {\n            return JsoupUtils.clean((String) value);\n        }\n        return value;\n    }\n\n    /**\n     * 过滤header头部信息\n     *\n     * @param name\n     * @return\n     */\n    @Override\n    public String getHeader(String name) {\n        String value = super.getHeader(name);\n        if (null == value)\n            return value;\n        return JsoupUtils.clean(value);\n    }\n}\n\n```\n\n## 编写Filter\n\n```java\npackage com.peak.filter;\n\nimport jdk.nashorn.internal.objects.annotations.Setter;\nimport org.apache.commons.lang3.StringUtils;\n\nimport javax.servlet.*;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class XssFilter implements Filter {\n    private Set<String> exUrls;\n\n    @Override\n    public void init(FilterConfig filterConfig) throws ServletException {\n        if (StringUtils.isNotBlank(filterConfig.getInitParameter(\"exUrl\"))) {\n            this.exUrls = Collections.unmodifiableSet(new HashSet<>(Arrays.asList(filterConfig.getInitParameter(\"exUrl\").split(\",\"))));\n        } else {\n            this.exUrls = new HashSet<>();\n        }\n\n    }\n\n    @Override\n    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest) req;\n        HttpServletResponse response = (HttpServletResponse) res;\n        //获取当前请求路径\n        String path = request.getRequestURI().substring(request.getContextPath().length()).replaceAll(\"[/]+$\", \"\");\n        //判断是否在不再过滤范围内 规范:保存或者修改内容时，规范访问地址中包含save或者update\n        //这样，只需要添加，或者保存的操作才进行过滤\n        if (path.indexOf(\"save\") >= 0 || path.indexOf(\"update\") >= 0) {\n            chain.doFilter(new XSSHttpServletRequestWrapper(request), response);\n            //chain.doFilter(request, response);\n        } else {\n            chain.doFilter(request, response);\n        }\n\n    }\n\n    @Override\n    public void destroy() {\n\n    }\n}\n\n```\n\n## 配置Filter\n\n```xml\n\t<!-- 防止xss攻击 -->\n    <filter>\n        <filter-name>xssFilter</filter-name>\n        <filter-class>com.peak.filter.XssFilter</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>xssFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n    </filter-mapping>\n```\n\n","slug":"prevent-xss","published":1,"updated":"2022-11-24T13:38:45.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1ew00104ovk3mz5zdbt","content":"<h1 id=\"XSS攻击\"><a href=\"#XSS攻击\" class=\"headerlink\" title=\"XSS攻击\"></a>XSS攻击</h1><p>XSS攻击全称跨站脚本攻击，是一种在<code>web</code>应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其他用户使用的页面中。例如：不法用户在评论某条博客时，植入类似<code>&lt;script&gt;alert(&#39;一个大傻瓜&#39;)&lt;/script&gt;</code>可执行的js脚本保存到服务器，当在显示的时候，就会出现弹出框，这是最简单的XSS攻击。</p>\n<blockquote>\n<p>   服务器处理富文本编辑器提交的内容时, 因排版的需求不能对 HTML 标签进行转义, 但为了防止 XSS 攻击, 又必须过滤掉其中的 JS 代码, 在 Java 中使用 Jsoup 正好可以满足此要求</p>\n</blockquote>\n<p><a href=\"https://www.jianshu.com/p/32abc12a175a\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h1 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h1><p>1.在前端页面，可以通过js过滤一下特殊字符。</p>\n<p>2.在服务器端通过过滤器，拦截请求，过滤参数，清除危险字符</p>\n<a id=\"more\"></a>\n<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><h2 id=\"导入所需jar\"><a href=\"#导入所需jar\" class=\"headerlink\" title=\"导入所需jar\"></a>导入所需jar</h2><p>前面提到，使用<code>jsoup</code>比较合适，因此要引入<code>jsoup</code>的jar</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">compile</span>(</span><br><span class=\"line\">           <span class=\"string\">\"org.springframework:spring-webmvc:$spring\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"org.springframework:spring-context-support:$spring\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"org.thymeleaf:thymeleaf-spring5:$&#123;versions.thymeleaf&#125;\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"com.alibaba:fastjson:$&#123;versions.fastjson&#125;\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"commons-codec:commons-codec:1.10\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"commons-io:commons-io:2.5\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"org.apache.commons:commons-lang3:3.8.1\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"commons-fileupload:commons-fileupload:1.3.1\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"org.projectlombok:lombok:1.18.4\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"org.jsoup:jsoup:1.7.1\"</span> <span class=\"comment\">//jsoup</span></span><br><span class=\"line\">   )</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写JsoupUtils\"><a href=\"#编写JsoupUtils\" class=\"headerlink\" title=\"编写JsoupUtils\"></a>编写JsoupUtils</h2><p>一开始使用<code>jsoup</code>时，遇到一个问题。在富文本框中，把图片转换成<code>base64</code>时，传到后台会把<code>src</code>给过滤掉，成<code>&lt;img alt=&quot;&quot; width=&quot;200&quot;/&gt;</code>。原因是，在<code>jsoup</code>中提供了一个白名单类<code>org.jsoup.safety.Whitelist</code><a href=\"https://blog.csdn.net/xyw_blog/article/details/9145523\" target=\"_blank\" rel=\"noopener\">Whitelist类学习</a>。类中有个方法<code>addProtocols(java.lang.String,java.lang.String, java.lang.String...)</code>，可以设置某个标签中的某个特性支持什么协议。看一下白名单，注意<code>img</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Whitelist <span class=\"title\">relaxed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Whitelist()</span><br><span class=\"line\">        .addTags(</span><br><span class=\"line\">            <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"blockquote\"</span>, <span class=\"string\">\"br\"</span>, <span class=\"string\">\"caption\"</span>, <span class=\"string\">\"cite\"</span>, <span class=\"string\">\"code\"</span>, <span class=\"string\">\"col\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"colgroup\"</span>, <span class=\"string\">\"dd\"</span>, <span class=\"string\">\"div\"</span>, <span class=\"string\">\"dl\"</span>, <span class=\"string\">\"dt\"</span>, <span class=\"string\">\"em\"</span>, <span class=\"string\">\"h1\"</span>, <span class=\"string\">\"h2\"</span>, <span class=\"string\">\"h3\"</span>, <span class=\"string\">\"h4\"</span>, <span class=\"string\">\"h5\"</span>, <span class=\"string\">\"h6\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"i\"</span>, <span class=\"string\">\"img\"</span>, <span class=\"string\">\"li\"</span>, <span class=\"string\">\"ol\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"pre\"</span>, <span class=\"string\">\"q\"</span>, <span class=\"string\">\"small\"</span>, <span class=\"string\">\"span\"</span>, <span class=\"string\">\"strike\"</span>, <span class=\"string\">\"strong\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"sub\"</span>, <span class=\"string\">\"sup\"</span>, <span class=\"string\">\"table\"</span>, <span class=\"string\">\"tbody\"</span>, <span class=\"string\">\"td\"</span>, <span class=\"string\">\"tfoot\"</span>, <span class=\"string\">\"th\"</span>, <span class=\"string\">\"thead\"</span>, <span class=\"string\">\"tr\"</span>, <span class=\"string\">\"u\"</span>, <span class=\"string\">\"ul\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"title\"</span>) <span class=\"comment\">// a 标签的合法属性为 href 和 title</span></span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"blockquote\"</span>, <span class=\"string\">\"cite\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"col\"</span>, <span class=\"string\">\"span\"</span>, <span class=\"string\">\"width\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"colgroup\"</span>, <span class=\"string\">\"span\"</span>, <span class=\"string\">\"width\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"img\"</span>, <span class=\"string\">\"align\"</span>, <span class=\"string\">\"alt\"</span>, <span class=\"string\">\"height\"</span>, <span class=\"string\">\"src\"</span>, <span class=\"string\">\"title\"</span>, <span class=\"string\">\"width\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"ol\"</span>, <span class=\"string\">\"start\"</span>, <span class=\"string\">\"type\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"q\"</span>, <span class=\"string\">\"cite\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"table\"</span>, <span class=\"string\">\"summary\"</span>, <span class=\"string\">\"width\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"td\"</span>, <span class=\"string\">\"abbr\"</span>, <span class=\"string\">\"axis\"</span>, <span class=\"string\">\"colspan\"</span>, <span class=\"string\">\"rowspan\"</span>, <span class=\"string\">\"width\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"th\"</span>, <span class=\"string\">\"abbr\"</span>, <span class=\"string\">\"axis\"</span>, <span class=\"string\">\"colspan\"</span>, <span class=\"string\">\"rowspan\"</span>, <span class=\"string\">\"scope\"</span>, <span class=\"string\">\"width\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"ul\"</span>, <span class=\"string\">\"type\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        .addProtocols(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"ftp\"</span>, <span class=\"string\">\"http\"</span>, <span class=\"string\">\"https\"</span>, <span class=\"string\">\"mailto\"</span>)</span><br><span class=\"line\">        .addProtocols(<span class=\"string\">\"blockquote\"</span>, <span class=\"string\">\"cite\"</span>, <span class=\"string\">\"http\"</span>, <span class=\"string\">\"https\"</span>)</span><br><span class=\"line\">        .addProtocols(<span class=\"string\">\"cite\"</span>, <span class=\"string\">\"cite\"</span>, <span class=\"string\">\"http\"</span>, <span class=\"string\">\"https\"</span>)</span><br><span class=\"line\">        .addProtocols(<span class=\"string\">\"img\"</span>, <span class=\"string\">\"src\"</span>, <span class=\"string\">\"http\"</span>, <span class=\"string\">\"https\"</span>) <span class=\"comment\">//这里img src属性只支持http，和https协议。</span></span><br><span class=\"line\">        .addProtocols(<span class=\"string\">\"q\"</span>, <span class=\"string\">\"cite\"</span>, <span class=\"string\">\"http\"</span>, <span class=\"string\">\"https\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而<code>base64</code>是以<code>data:</code>开头。所以每次都把<code>src</code>给过滤掉了。在白名单中添加：<code>WHITELIST.addProtocols(&quot;img&quot;,&quot;src&quot;,&quot;data&quot;);//支持img 为base64</code>就解决了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.peak.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.Jsoup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.safety.Whitelist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.使用Jsoup过滤XSS攻击。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.在Jsoup的Whitelist中内置了很多白名单，这些名单将不会过滤</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsoupUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Whitelist WHITELIST = Whitelist.relaxed();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 富文本编辑时一些样式是使用 style 来进行实现的</span></span><br><span class=\"line\">        <span class=\"comment\">// 比如红色字体 style=\"color:red;\"</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以需要给所有标签添加 style 属性</span></span><br><span class=\"line\">        WHITELIST.addAttributes(<span class=\"string\">\":all\"</span>, <span class=\"string\">\"style\"</span>);</span><br><span class=\"line\">        WHITELIST.addAttributes(<span class=\"string\">\":all\"</span>, <span class=\"string\">\"class\"</span>);</span><br><span class=\"line\">        WHITELIST.addAttributes(<span class=\"string\">\":all\"</span>, <span class=\"string\">\"target\"</span>);</span><br><span class=\"line\">        WHITELIST.addAttributes(<span class=\"string\">\":all\"</span>, <span class=\"string\">\"spellcheck\"</span>);</span><br><span class=\"line\">        WHITELIST.addProtocols(<span class=\"string\">\"img\"</span>,<span class=\"string\">\"src\"</span>,<span class=\"string\">\"data\"</span>);<span class=\"comment\">//支持img 为base64</span></span><br><span class=\"line\">        System.out.println(JSON.toJSONString(WHITELIST));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">JsoupUtils</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Document.OutputSettings OUTPUT_SETTINGS = <span class=\"keyword\">new</span> Document.OutputSettings().prettyPrint(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">clean</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(content)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Jsoup.clean(content, <span class=\"string\">\"\"</span>, WHITELIST, OUTPUT_SETTINGS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"&lt;a href='ss' src='ss'&gt;&lt;/a&gt;&lt;img src='http://www.baidu.com' alt='d' /&gt;&lt;script&gt;alert('ss')&lt;/script&gt;sss&lt;p style='s' onclick='s'&gt;p标签&lt;/p&gt;\"</span>;</span><br><span class=\"line\">        System.out.println(JsoupUtils.clean(str));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"集成HttpServletRequestWrapper\"><a href=\"#集成HttpServletRequestWrapper\" class=\"headerlink\" title=\"集成HttpServletRequestWrapper\"></a>集成HttpServletRequestWrapper</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.peak.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.peak.utils.JsoupUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XSSHttpServletRequestWrapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XSSHttpServletRequestWrapper</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤数组参数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] getParameterValues(String name) &#123;</span><br><span class=\"line\">        String[] values = <span class=\"keyword\">super</span>.getParameterValues(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == values)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = values.length;</span><br><span class=\"line\">        String[] encodeValues = <span class=\"keyword\">new</span> String[count];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            encodeValues[i] = JsoupUtils.clean(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> encodeValues;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤参数中的特殊字符</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getParameter</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        String value = <span class=\"keyword\">super</span>.getParameter(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == value)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsoupUtils.clean(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤attribute中的参数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getAttribute</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        Object value = <span class=\"keyword\">super</span>.getAttribute(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != value &amp;&amp; value <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> JsoupUtils.clean((String) value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤header头部信息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getHeader</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        String value = <span class=\"keyword\">super</span>.getHeader(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == value)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsoupUtils.clean(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写Filter\"><a href=\"#编写Filter\" class=\"headerlink\" title=\"编写Filter\"></a>编写Filter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.peak.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> jdk.nashorn.internal.objects.annotations.Setter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XssFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; exUrls;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(filterConfig.getInitParameter(<span class=\"string\">\"exUrl\"</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.exUrls = Collections.unmodifiableSet(<span class=\"keyword\">new</span> HashSet&lt;&gt;(Arrays.asList(filterConfig.getInitParameter(<span class=\"string\">\"exUrl\"</span>).split(<span class=\"string\">\",\"</span>))));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.exUrls = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class=\"line\">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class=\"line\">        <span class=\"comment\">//获取当前请求路径</span></span><br><span class=\"line\">        String path = request.getRequestURI().substring(request.getContextPath().length()).replaceAll(<span class=\"string\">\"[/]+$\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//判断是否在不再过滤范围内 规范:保存或者修改内容时，规范访问地址中包含save或者update</span></span><br><span class=\"line\">        <span class=\"comment\">//这样，只需要添加，或者保存的操作才进行过滤</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path.indexOf(<span class=\"string\">\"save\"</span>) &gt;= <span class=\"number\">0</span> || path.indexOf(<span class=\"string\">\"update\"</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            chain.doFilter(<span class=\"keyword\">new</span> XSSHttpServletRequestWrapper(request), response);</span><br><span class=\"line\">            <span class=\"comment\">//chain.doFilter(request, response);</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            chain.doFilter(request, response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置Filter\"><a href=\"#配置Filter\" class=\"headerlink\" title=\"配置Filter\"></a>配置Filter</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 防止xss攻击 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>xssFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.peak.filter.XssFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>xssFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"XSS攻击\"><a href=\"#XSS攻击\" class=\"headerlink\" title=\"XSS攻击\"></a>XSS攻击</h1><p>XSS攻击全称跨站脚本攻击，是一种在<code>web</code>应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其他用户使用的页面中。例如：不法用户在评论某条博客时，植入类似<code>&lt;script&gt;alert(&#39;一个大傻瓜&#39;)&lt;/script&gt;</code>可执行的js脚本保存到服务器，当在显示的时候，就会出现弹出框，这是最简单的XSS攻击。</p>\n<blockquote>\n<p>   服务器处理富文本编辑器提交的内容时, 因排版的需求不能对 HTML 标签进行转义, 但为了防止 XSS 攻击, 又必须过滤掉其中的 JS 代码, 在 Java 中使用 Jsoup 正好可以满足此要求</p>\n</blockquote>\n<p><a href=\"https://www.jianshu.com/p/32abc12a175a\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h1 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h1><p>1.在前端页面，可以通过js过滤一下特殊字符。</p>\n<p>2.在服务器端通过过滤器，拦截请求，过滤参数，清除危险字符</p>","more":"<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><h2 id=\"导入所需jar\"><a href=\"#导入所需jar\" class=\"headerlink\" title=\"导入所需jar\"></a>导入所需jar</h2><p>前面提到，使用<code>jsoup</code>比较合适，因此要引入<code>jsoup</code>的jar</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">compile</span>(</span><br><span class=\"line\">           <span class=\"string\">\"org.springframework:spring-webmvc:$spring\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"org.springframework:spring-context-support:$spring\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"org.thymeleaf:thymeleaf-spring5:$&#123;versions.thymeleaf&#125;\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"com.alibaba:fastjson:$&#123;versions.fastjson&#125;\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"commons-codec:commons-codec:1.10\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"commons-io:commons-io:2.5\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"org.apache.commons:commons-lang3:3.8.1\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"commons-fileupload:commons-fileupload:1.3.1\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"org.projectlombok:lombok:1.18.4\"</span>,</span><br><span class=\"line\">           <span class=\"string\">\"org.jsoup:jsoup:1.7.1\"</span> <span class=\"comment\">//jsoup</span></span><br><span class=\"line\">   )</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写JsoupUtils\"><a href=\"#编写JsoupUtils\" class=\"headerlink\" title=\"编写JsoupUtils\"></a>编写JsoupUtils</h2><p>一开始使用<code>jsoup</code>时，遇到一个问题。在富文本框中，把图片转换成<code>base64</code>时，传到后台会把<code>src</code>给过滤掉，成<code>&lt;img alt=&quot;&quot; width=&quot;200&quot;/&gt;</code>。原因是，在<code>jsoup</code>中提供了一个白名单类<code>org.jsoup.safety.Whitelist</code><a href=\"https://blog.csdn.net/xyw_blog/article/details/9145523\" target=\"_blank\" rel=\"noopener\">Whitelist类学习</a>。类中有个方法<code>addProtocols(java.lang.String,java.lang.String, java.lang.String...)</code>，可以设置某个标签中的某个特性支持什么协议。看一下白名单，注意<code>img</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Whitelist <span class=\"title\">relaxed</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Whitelist()</span><br><span class=\"line\">        .addTags(</span><br><span class=\"line\">            <span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"blockquote\"</span>, <span class=\"string\">\"br\"</span>, <span class=\"string\">\"caption\"</span>, <span class=\"string\">\"cite\"</span>, <span class=\"string\">\"code\"</span>, <span class=\"string\">\"col\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"colgroup\"</span>, <span class=\"string\">\"dd\"</span>, <span class=\"string\">\"div\"</span>, <span class=\"string\">\"dl\"</span>, <span class=\"string\">\"dt\"</span>, <span class=\"string\">\"em\"</span>, <span class=\"string\">\"h1\"</span>, <span class=\"string\">\"h2\"</span>, <span class=\"string\">\"h3\"</span>, <span class=\"string\">\"h4\"</span>, <span class=\"string\">\"h5\"</span>, <span class=\"string\">\"h6\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"i\"</span>, <span class=\"string\">\"img\"</span>, <span class=\"string\">\"li\"</span>, <span class=\"string\">\"ol\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"pre\"</span>, <span class=\"string\">\"q\"</span>, <span class=\"string\">\"small\"</span>, <span class=\"string\">\"span\"</span>, <span class=\"string\">\"strike\"</span>, <span class=\"string\">\"strong\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"sub\"</span>, <span class=\"string\">\"sup\"</span>, <span class=\"string\">\"table\"</span>, <span class=\"string\">\"tbody\"</span>, <span class=\"string\">\"td\"</span>, <span class=\"string\">\"tfoot\"</span>, <span class=\"string\">\"th\"</span>, <span class=\"string\">\"thead\"</span>, <span class=\"string\">\"tr\"</span>, <span class=\"string\">\"u\"</span>, <span class=\"string\">\"ul\"</span></span><br><span class=\"line\">        )</span><br><span class=\"line\"></span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"title\"</span>) <span class=\"comment\">// a 标签的合法属性为 href 和 title</span></span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"blockquote\"</span>, <span class=\"string\">\"cite\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"col\"</span>, <span class=\"string\">\"span\"</span>, <span class=\"string\">\"width\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"colgroup\"</span>, <span class=\"string\">\"span\"</span>, <span class=\"string\">\"width\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"img\"</span>, <span class=\"string\">\"align\"</span>, <span class=\"string\">\"alt\"</span>, <span class=\"string\">\"height\"</span>, <span class=\"string\">\"src\"</span>, <span class=\"string\">\"title\"</span>, <span class=\"string\">\"width\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"ol\"</span>, <span class=\"string\">\"start\"</span>, <span class=\"string\">\"type\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"q\"</span>, <span class=\"string\">\"cite\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"table\"</span>, <span class=\"string\">\"summary\"</span>, <span class=\"string\">\"width\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"td\"</span>, <span class=\"string\">\"abbr\"</span>, <span class=\"string\">\"axis\"</span>, <span class=\"string\">\"colspan\"</span>, <span class=\"string\">\"rowspan\"</span>, <span class=\"string\">\"width\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"th\"</span>, <span class=\"string\">\"abbr\"</span>, <span class=\"string\">\"axis\"</span>, <span class=\"string\">\"colspan\"</span>, <span class=\"string\">\"rowspan\"</span>, <span class=\"string\">\"scope\"</span>, <span class=\"string\">\"width\"</span>)</span><br><span class=\"line\">        .addAttributes(<span class=\"string\">\"ul\"</span>, <span class=\"string\">\"type\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        .addProtocols(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"href\"</span>, <span class=\"string\">\"ftp\"</span>, <span class=\"string\">\"http\"</span>, <span class=\"string\">\"https\"</span>, <span class=\"string\">\"mailto\"</span>)</span><br><span class=\"line\">        .addProtocols(<span class=\"string\">\"blockquote\"</span>, <span class=\"string\">\"cite\"</span>, <span class=\"string\">\"http\"</span>, <span class=\"string\">\"https\"</span>)</span><br><span class=\"line\">        .addProtocols(<span class=\"string\">\"cite\"</span>, <span class=\"string\">\"cite\"</span>, <span class=\"string\">\"http\"</span>, <span class=\"string\">\"https\"</span>)</span><br><span class=\"line\">        .addProtocols(<span class=\"string\">\"img\"</span>, <span class=\"string\">\"src\"</span>, <span class=\"string\">\"http\"</span>, <span class=\"string\">\"https\"</span>) <span class=\"comment\">//这里img src属性只支持http，和https协议。</span></span><br><span class=\"line\">        .addProtocols(<span class=\"string\">\"q\"</span>, <span class=\"string\">\"cite\"</span>, <span class=\"string\">\"http\"</span>, <span class=\"string\">\"https\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而<code>base64</code>是以<code>data:</code>开头。所以每次都把<code>src</code>给过滤掉了。在白名单中添加：<code>WHITELIST.addProtocols(&quot;img&quot;,&quot;src&quot;,&quot;data&quot;);//支持img 为base64</code>就解决了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.peak.utils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSON;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.Jsoup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.safety.Whitelist;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1.使用Jsoup过滤XSS攻击。</span></span><br><span class=\"line\"><span class=\"comment\"> * 2.在Jsoup的Whitelist中内置了很多白名单，这些名单将不会过滤</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JsoupUtils</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Whitelist WHITELIST = Whitelist.relaxed();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 富文本编辑时一些样式是使用 style 来进行实现的</span></span><br><span class=\"line\">        <span class=\"comment\">// 比如红色字体 style=\"color:red;\"</span></span><br><span class=\"line\">        <span class=\"comment\">// 所以需要给所有标签添加 style 属性</span></span><br><span class=\"line\">        WHITELIST.addAttributes(<span class=\"string\">\":all\"</span>, <span class=\"string\">\"style\"</span>);</span><br><span class=\"line\">        WHITELIST.addAttributes(<span class=\"string\">\":all\"</span>, <span class=\"string\">\"class\"</span>);</span><br><span class=\"line\">        WHITELIST.addAttributes(<span class=\"string\">\":all\"</span>, <span class=\"string\">\"target\"</span>);</span><br><span class=\"line\">        WHITELIST.addAttributes(<span class=\"string\">\":all\"</span>, <span class=\"string\">\"spellcheck\"</span>);</span><br><span class=\"line\">        WHITELIST.addProtocols(<span class=\"string\">\"img\"</span>,<span class=\"string\">\"src\"</span>,<span class=\"string\">\"data\"</span>);<span class=\"comment\">//支持img 为base64</span></span><br><span class=\"line\">        System.out.println(JSON.toJSONString(WHITELIST));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">JsoupUtils</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Document.OutputSettings OUTPUT_SETTINGS = <span class=\"keyword\">new</span> Document.OutputSettings().prettyPrint(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">clean</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isBlank(content)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Jsoup.clean(content, <span class=\"string\">\"\"</span>, WHITELIST, OUTPUT_SETTINGS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String str = <span class=\"string\">\"&lt;a href='ss' src='ss'&gt;&lt;/a&gt;&lt;img src='http://www.baidu.com' alt='d' /&gt;&lt;script&gt;alert('ss')&lt;/script&gt;sss&lt;p style='s' onclick='s'&gt;p标签&lt;/p&gt;\"</span>;</span><br><span class=\"line\">        System.out.println(JsoupUtils.clean(str));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"集成HttpServletRequestWrapper\"><a href=\"#集成HttpServletRequestWrapper\" class=\"headerlink\" title=\"集成HttpServletRequestWrapper\"></a>集成HttpServletRequestWrapper</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.peak.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.peak.utils.JsoupUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XSSHttpServletRequestWrapper</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">XSSHttpServletRequestWrapper</span><span class=\"params\">(HttpServletRequest request)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(request);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤数组参数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String[] getParameterValues(String name) &#123;</span><br><span class=\"line\">        String[] values = <span class=\"keyword\">super</span>.getParameterValues(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == values)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = values.length;</span><br><span class=\"line\">        String[] encodeValues = <span class=\"keyword\">new</span> String[count];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            encodeValues[i] = JsoupUtils.clean(values[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> encodeValues;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤参数中的特殊字符</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getParameter</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        String value = <span class=\"keyword\">super</span>.getParameter(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == value)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsoupUtils.clean(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤attribute中的参数</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">getAttribute</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        Object value = <span class=\"keyword\">super</span>.getAttribute(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> != value &amp;&amp; value <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> JsoupUtils.clean((String) value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 过滤header头部信息</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getHeader</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        String value = <span class=\"keyword\">super</span>.getHeader(name);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == value)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> JsoupUtils.clean(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写Filter\"><a href=\"#编写Filter\" class=\"headerlink\" title=\"编写Filter\"></a>编写Filter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.peak.filter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> jdk.nashorn.internal.objects.annotations.Setter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collections;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">XssFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;String&gt; exUrls;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.isNotBlank(filterConfig.getInitParameter(<span class=\"string\">\"exUrl\"</span>))) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.exUrls = Collections.unmodifiableSet(<span class=\"keyword\">new</span> HashSet&lt;&gt;(Arrays.asList(filterConfig.getInitParameter(<span class=\"string\">\"exUrl\"</span>).split(<span class=\"string\">\",\"</span>))));</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.exUrls = <span class=\"keyword\">new</span> HashSet&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class=\"line\">        HttpServletResponse response = (HttpServletResponse) res;</span><br><span class=\"line\">        <span class=\"comment\">//获取当前请求路径</span></span><br><span class=\"line\">        String path = request.getRequestURI().substring(request.getContextPath().length()).replaceAll(<span class=\"string\">\"[/]+$\"</span>, <span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//判断是否在不再过滤范围内 规范:保存或者修改内容时，规范访问地址中包含save或者update</span></span><br><span class=\"line\">        <span class=\"comment\">//这样，只需要添加，或者保存的操作才进行过滤</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (path.indexOf(<span class=\"string\">\"save\"</span>) &gt;= <span class=\"number\">0</span> || path.indexOf(<span class=\"string\">\"update\"</span>) &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            chain.doFilter(<span class=\"keyword\">new</span> XSSHttpServletRequestWrapper(request), response);</span><br><span class=\"line\">            <span class=\"comment\">//chain.doFilter(request, response);</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            chain.doFilter(request, response);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置Filter\"><a href=\"#配置Filter\" class=\"headerlink\" title=\"配置Filter\"></a>配置Filter</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 防止xss攻击 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>xssFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>com.peak.filter.XssFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>xssFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Redis安装","date":"2018-09-28T08:05:44.000Z","_content":"\n# 开场白\n\n今天正式开始接触和学习Redis，就从安装开始吧。\n\n<!-- more -->\n\n# 下载\n\nredis官方网站redis.io，在官网中的zip包据说只支持linux系统（没有实际实验过）。后来问度娘，说是有个团队在维护这一个window可用的redis包，在此先行谢过。\n\n下载地址：[https://github.com/MSOpenTech/redis/tags](https://github.com/MSOpenTech/redis/tags)\n\n根据系统要求，下载 Redis-x64-3.2.100.zip\n\n![20180609102114561](C:\\Users\\Administrator\\Desktop\\20180609102114561.png)\n\n# 安装\n\n我是安装在D盘，在D盘下创建一个redis目录，然后把压缩包内的文件解压到当前目录下。安装ok\n\n# 测试\n\n```doc\n//启动\nredis-server redis.windows.conf\n```\n\n如果不抱错，就算启动成功了。\n\n```doc\n//从新打开一个命令行  默认端口6379\nredis-cli -h 127.0.0.1 -p 6379\n//连接成功后，测试存储   peak 为key   gaofeng为value\nset peak gaofeng   \n//读取\nget peak\n```\n\n没错，和你预想的结果一样，基本就是成功了。\n\n# 配置服务\n\n这时，如果关闭了，开启redis的命令行窗口，在进行存取，就没有反应了。是因为redis服务已经随着窗口的关闭，而停止了。\n\n我们可以把redis作为一个服务安装到我们的操作系统中，就像最初学习SQL Server那会，需要去服务页面，先开启服务。\n\n安装服务：\n\nredis-server --service-install redis.windows.conf\n\n>    [575384] 28 Sep 16:20:59.787 # Granting read/write access to 'NT AUTHORITY\\NetworkService' on: \"D:\\redis\" \"D:\\redis\\\"\n>    [575384] 28 Sep 16:20:59.790 # Redis successfully installed as a service.\n\n去服务页面，打开redis服务，进行测试，成功。\n\n卸载服务：\n\nredis-server.exe --service-uninstall\n\n>    [579236] 28 Sep 16:26:28.519 # Redis service successfully uninstalled.\n\n表示卸载成功。\n\n启动服务：\n\nredis-server --service-start\n\n停止服务：\n\nredis-server --service-stop","source":"_posts/redis-one.md","raw":"---\ntitle: Redis安装\ndate: 2018-09-28 16:05:44\ntags: redis\n---\n\n# 开场白\n\n今天正式开始接触和学习Redis，就从安装开始吧。\n\n<!-- more -->\n\n# 下载\n\nredis官方网站redis.io，在官网中的zip包据说只支持linux系统（没有实际实验过）。后来问度娘，说是有个团队在维护这一个window可用的redis包，在此先行谢过。\n\n下载地址：[https://github.com/MSOpenTech/redis/tags](https://github.com/MSOpenTech/redis/tags)\n\n根据系统要求，下载 Redis-x64-3.2.100.zip\n\n![20180609102114561](C:\\Users\\Administrator\\Desktop\\20180609102114561.png)\n\n# 安装\n\n我是安装在D盘，在D盘下创建一个redis目录，然后把压缩包内的文件解压到当前目录下。安装ok\n\n# 测试\n\n```doc\n//启动\nredis-server redis.windows.conf\n```\n\n如果不抱错，就算启动成功了。\n\n```doc\n//从新打开一个命令行  默认端口6379\nredis-cli -h 127.0.0.1 -p 6379\n//连接成功后，测试存储   peak 为key   gaofeng为value\nset peak gaofeng   \n//读取\nget peak\n```\n\n没错，和你预想的结果一样，基本就是成功了。\n\n# 配置服务\n\n这时，如果关闭了，开启redis的命令行窗口，在进行存取，就没有反应了。是因为redis服务已经随着窗口的关闭，而停止了。\n\n我们可以把redis作为一个服务安装到我们的操作系统中，就像最初学习SQL Server那会，需要去服务页面，先开启服务。\n\n安装服务：\n\nredis-server --service-install redis.windows.conf\n\n>    [575384] 28 Sep 16:20:59.787 # Granting read/write access to 'NT AUTHORITY\\NetworkService' on: \"D:\\redis\" \"D:\\redis\\\"\n>    [575384] 28 Sep 16:20:59.790 # Redis successfully installed as a service.\n\n去服务页面，打开redis服务，进行测试，成功。\n\n卸载服务：\n\nredis-server.exe --service-uninstall\n\n>    [579236] 28 Sep 16:26:28.519 # Redis service successfully uninstalled.\n\n表示卸载成功。\n\n启动服务：\n\nredis-server --service-start\n\n停止服务：\n\nredis-server --service-stop","slug":"redis-one","published":1,"updated":"2022-11-24T13:38:45.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1ey00124ovkgrouqo1h","content":"<h1 id=\"开场白\"><a href=\"#开场白\" class=\"headerlink\" title=\"开场白\"></a>开场白</h1><p>今天正式开始接触和学习Redis，就从安装开始吧。</p>\n<a id=\"more\"></a>\n<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>redis官方网站redis.io，在官网中的zip包据说只支持linux系统（没有实际实验过）。后来问度娘，说是有个团队在维护这一个window可用的redis包，在此先行谢过。</p>\n<p>下载地址：<a href=\"https://github.com/MSOpenTech/redis/tags\" target=\"_blank\" rel=\"noopener\">https://github.com/MSOpenTech/redis/tags</a></p>\n<p>根据系统要求，下载 Redis-x64-3.2.100.zip</p>\n<p><img src=\"C:\\Users\\Administrator\\Desktop\\20180609102114561.png\" alt=\"20180609102114561\"></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>我是安装在D盘，在D盘下创建一个redis目录，然后把压缩包内的文件解压到当前目录下。安装ok</p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//启动</span><br><span class=\"line\">redis-server redis.windows.conf</span><br></pre></td></tr></table></figure>\n<p>如果不抱错，就算启动成功了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//从新打开一个命令行  默认端口6379</span><br><span class=\"line\">redis-cli -h 127.0.0.1 -p 6379</span><br><span class=\"line\">//连接成功后，测试存储   peak 为key   gaofeng为value</span><br><span class=\"line\">set peak gaofeng   </span><br><span class=\"line\">//读取</span><br><span class=\"line\">get peak</span><br></pre></td></tr></table></figure>\n<p>没错，和你预想的结果一样，基本就是成功了。</p>\n<h1 id=\"配置服务\"><a href=\"#配置服务\" class=\"headerlink\" title=\"配置服务\"></a>配置服务</h1><p>这时，如果关闭了，开启redis的命令行窗口，在进行存取，就没有反应了。是因为redis服务已经随着窗口的关闭，而停止了。</p>\n<p>我们可以把redis作为一个服务安装到我们的操作系统中，就像最初学习SQL Server那会，需要去服务页面，先开启服务。</p>\n<p>安装服务：</p>\n<p>redis-server –service-install redis.windows.conf</p>\n<blockquote>\n<p>   [575384] 28 Sep 16:20:59.787 # Granting read/write access to ‘NT AUTHORITY\\NetworkService’ on: “D:\\redis” “D:\\redis\\”<br>   [575384] 28 Sep 16:20:59.790 # Redis successfully installed as a service.</p>\n</blockquote>\n<p>去服务页面，打开redis服务，进行测试，成功。</p>\n<p>卸载服务：</p>\n<p>redis-server.exe –service-uninstall</p>\n<blockquote>\n<p>   [579236] 28 Sep 16:26:28.519 # Redis service successfully uninstalled.</p>\n</blockquote>\n<p>表示卸载成功。</p>\n<p>启动服务：</p>\n<p>redis-server –service-start</p>\n<p>停止服务：</p>\n<p>redis-server –service-stop</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"开场白\"><a href=\"#开场白\" class=\"headerlink\" title=\"开场白\"></a>开场白</h1><p>今天正式开始接触和学习Redis，就从安装开始吧。</p>","more":"<h1 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h1><p>redis官方网站redis.io，在官网中的zip包据说只支持linux系统（没有实际实验过）。后来问度娘，说是有个团队在维护这一个window可用的redis包，在此先行谢过。</p>\n<p>下载地址：<a href=\"https://github.com/MSOpenTech/redis/tags\" target=\"_blank\" rel=\"noopener\">https://github.com/MSOpenTech/redis/tags</a></p>\n<p>根据系统要求，下载 Redis-x64-3.2.100.zip</p>\n<p><img src=\"C:\\Users\\Administrator\\Desktop\\20180609102114561.png\" alt=\"20180609102114561\"></p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>我是安装在D盘，在D盘下创建一个redis目录，然后把压缩包内的文件解压到当前目录下。安装ok</p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//启动</span><br><span class=\"line\">redis-server redis.windows.conf</span><br></pre></td></tr></table></figure>\n<p>如果不抱错，就算启动成功了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//从新打开一个命令行  默认端口6379</span><br><span class=\"line\">redis-cli -h 127.0.0.1 -p 6379</span><br><span class=\"line\">//连接成功后，测试存储   peak 为key   gaofeng为value</span><br><span class=\"line\">set peak gaofeng   </span><br><span class=\"line\">//读取</span><br><span class=\"line\">get peak</span><br></pre></td></tr></table></figure>\n<p>没错，和你预想的结果一样，基本就是成功了。</p>\n<h1 id=\"配置服务\"><a href=\"#配置服务\" class=\"headerlink\" title=\"配置服务\"></a>配置服务</h1><p>这时，如果关闭了，开启redis的命令行窗口，在进行存取，就没有反应了。是因为redis服务已经随着窗口的关闭，而停止了。</p>\n<p>我们可以把redis作为一个服务安装到我们的操作系统中，就像最初学习SQL Server那会，需要去服务页面，先开启服务。</p>\n<p>安装服务：</p>\n<p>redis-server –service-install redis.windows.conf</p>\n<blockquote>\n<p>   [575384] 28 Sep 16:20:59.787 # Granting read/write access to ‘NT AUTHORITY\\NetworkService’ on: “D:\\redis” “D:\\redis\\”<br>   [575384] 28 Sep 16:20:59.790 # Redis successfully installed as a service.</p>\n</blockquote>\n<p>去服务页面，打开redis服务，进行测试，成功。</p>\n<p>卸载服务：</p>\n<p>redis-server.exe –service-uninstall</p>\n<blockquote>\n<p>   [579236] 28 Sep 16:26:28.519 # Redis service successfully uninstalled.</p>\n</blockquote>\n<p>表示卸载成功。</p>\n<p>启动服务：</p>\n<p>redis-server –service-start</p>\n<p>停止服务：</p>\n<p>redis-server –service-stop</p>"},{"title":"Security入门","date":"2017-12-06T08:50:43.000Z","_content":"\nSpring Security是一个灵活和强大的身份验证和访问控制框架，以确保基于Spring的Java Web应用程序的安全。\n\n<!-- more -->\n\n# 引用jar\n\n```xml\n<dependency>\n\t<groupId>org.springframework.security</groupId>\n\t<artifactId>spring-security-web</artifactId>\n\t<version>4.1.3.RELEASE</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework.security</groupId>\n\t<artifactId>spring-security-config</artifactId>\n\t<version>4.1.3.RELEASE</version>\n</dependency>\n```\n\n# 创建两个对比页面\n\nhello.html\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title th:text=\"${title}\">security</title>\n</head>\n<body>\n\t<h1 th:text=\"${message}\">哈哈哈</h1>\n</body>\n</html>\n```\n\nadmin.html\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title th:text=\"${title}\">Insert title here</title>\n</head>\n<body>\n\t<h1 th:text=\"${message}\">你好</h1>\n</body>\n</html>\n```\n\n# 编写controller\n\n```java\npackage springmvc.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@Controller\n@RequestMapping(\"/home/se\")\npublic class SecurityHelloController {\n\n\tpublic SecurityHelloController() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t\n\t@RequestMapping(value=\"/hello\",method=RequestMethod.GET)\n\tpublic String hello(Model model) {\n\t\tmodel.addAttribute(\"title\", \"spring security\");\n\t\tmodel.addAttribute(\"message\", \"你好 Security!\");\n\t\treturn \"hello\";\n\t}\n\t\n\t@RequestMapping(value=\"/admin\",method=RequestMethod.GET)\n\tpublic String admin(Model model) {\n\t\tmodel.addAttribute(\"title\", \"spring security\");\n\t\tmodel.addAttribute(\"message\", \"这是一个受保护的页面!\");\n\t\treturn \"admin\";\n\t}\n\n}\n\n```\n\n# 配置springmvc\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd\">\n\n\t<context:component-scan base-package=\"springmvc.controller\"></context:component-scan>\n\t<!-- 设置thymeleaf模板解析器 -->\n\t<bean id=\"templateResolver\"\n\t\tclass=\"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver\">\n\t\t<property name=\"prefix\" value=\"/WEB-INF/templates/\"></property>\n\t\t<property name=\"suffix\" value=\".html\"></property>\n\t\t<property name=\"templateMode\" value=\"HTML\"></property>\n\t\t<property name=\"characterEncoding\" value=\"UTF-8\"></property>\n\t\t<property name=\"cacheable\" value=\"false\"></property>\n\t</bean>\n\t<!-- 设置模板引擎 -->\n\t<bean id=\"templateEngine\" class=\"org.thymeleaf.spring4.SpringTemplateEngine\">\n\t\t<property name=\"templateResolver\" ref=\"templateResolver\"></property>\n\t\t<property name=\"enableSpringELCompiler\" value=\"true\"></property>\n\t</bean>\n\t<!-- 配置thymeleaf视图解析器 -->\n\t<bean class=\"org.thymeleaf.spring4.view.ThymeleafViewResolver\">\n\t\t<property name=\"templateEngine\" ref=\"templateEngine\"></property>\n\t\t<property name=\"characterEncoding\" value=\"UTF-8\" />\n\t\t<property name=\"order\" value=\"1\"></property>\n\t</bean>\n</beans>\n\n```\n\n# 编写spring-security.xml\n\n权限定义为 `ROLE_ADMIN`，判断是否有权限使用 `hasRole('ADMIN') 或者 hasRole('ROLE_ADMIN')`，前缀 ROLE_ 可以省略\n需要多个权限: `hasRole('ADMIN') and hasRole('DBA')`\n有任意一个权限: `hasAnyRole('ROLE_ADMIN', 'ROLE_DBA')`\n\n如果想使用权限列表的方式，而不是上面的这种表达式，需要设置 `<security:http auto-config=\"true\" use-expressions=\"false\">`，然后才能`<security:intercept-url pattern=\"/home/se/admin\" access=\"ROLE_ADMIN\"/>`\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- 1.该配置主要用于配置Spring-Security，因此用到的security命名空间比较多，所以把security设置为默认的命名空间，而beans需要显示配置例如：<beans:beans> -->\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:security=\"http://www.springframework.org/schema/security\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\t\t\thttp://www.springframework.org/schema/security \n\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\">\n\n\t<security:http auto-config=\"true\" use-expressions=\"false\">\n      <!-- 1.intercept-url 可以配置请求路径需要什么样的权限访问\n                1.1 pattern 配置请求路径，可以借用ant语法\n                1.2 access 配置角色权限 hasRole('USER')即ROLE_USER，多个的话可以用逗号隔开\n                1.3 method 可以配置对什么类型的请求进行拦截\n                1.4 可以在http标签下配置多个intercept-url\n             这句话的意思是：拦截所有GET请求，并验证用户身份，只允许拥有USER角色的用户通过\n         -->\n\t\t<security:intercept-url pattern=\"/home/se/admin\" access=\"ROLE_ADMIN\"/>\n\t</security:http>\n\t<security:authentication-manager>\n\t\t<security:authentication-provider>\n\t\t\t<security:user-service>\n              <!--\n                    1.默认把用户信息配置到内存中\n                    2.密码以{noop}为前缀，表示DelegatingPasswordEncode，大概意思就是用明文的方式，方便测试阅读\n                -->\n\t\t\t\t<security:user name=\"zhanggaofeng\" password=\"{noop}zhanggaofeng\" authorities=\"ROLE_ADMIN\"/>\n\t\t\t</security:user-service>\n\t\t</security:authentication-provider>\n\t</security:authentication-manager>\n</beans>\n```\n\n# 添加Security\n\n需要修改web.xml配置文件，添加org.springframwork.web.filter.DelegatingFilterProxy映射。配置拦截的地方主要：`<url-pattem>\\*</url-pattem>`,一定是\\* 而不是 \\可以百度一下这两个配置的区别。\n\n```xml\n<listener>\n\t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n</listener>\n<context-param>\n\t<param-name>contextConfigLocation</param-name>\n\t<param-value>classpath:spring-security.xml</param-value>\n</context-param>\n<filter>\n\t<filter-name>springSecurityFilterChain</filter-name>\n\t<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n</filter>\n<filter-mapping>\n\t<filter-name>springSecurityFilterChain</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n\n# 测试\n\n1.访问 /home/se/helo 能正常显示页面，因为Security没有限制该请求\n\n2.访问 /home/se/admin 跳转到登录页面（我们没有创建登录页面，为什么会跳转呢，因为security默认了一个登录页面）,因为在spring-security.xml配置文件中对该请求添加了权限验证。","source":"_posts/security1.md","raw":"---\ntitle: Security入门\ndate: 2017-12-06 16:50:43\ntags: [springmvc,security]\n---\n\nSpring Security是一个灵活和强大的身份验证和访问控制框架，以确保基于Spring的Java Web应用程序的安全。\n\n<!-- more -->\n\n# 引用jar\n\n```xml\n<dependency>\n\t<groupId>org.springframework.security</groupId>\n\t<artifactId>spring-security-web</artifactId>\n\t<version>4.1.3.RELEASE</version>\n</dependency>\n<dependency>\n\t<groupId>org.springframework.security</groupId>\n\t<artifactId>spring-security-config</artifactId>\n\t<version>4.1.3.RELEASE</version>\n</dependency>\n```\n\n# 创建两个对比页面\n\nhello.html\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title th:text=\"${title}\">security</title>\n</head>\n<body>\n\t<h1 th:text=\"${message}\">哈哈哈</h1>\n</body>\n</html>\n```\n\nadmin.html\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title th:text=\"${title}\">Insert title here</title>\n</head>\n<body>\n\t<h1 th:text=\"${message}\">你好</h1>\n</body>\n</html>\n```\n\n# 编写controller\n\n```java\npackage springmvc.controller;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@Controller\n@RequestMapping(\"/home/se\")\npublic class SecurityHelloController {\n\n\tpublic SecurityHelloController() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t\n\t@RequestMapping(value=\"/hello\",method=RequestMethod.GET)\n\tpublic String hello(Model model) {\n\t\tmodel.addAttribute(\"title\", \"spring security\");\n\t\tmodel.addAttribute(\"message\", \"你好 Security!\");\n\t\treturn \"hello\";\n\t}\n\t\n\t@RequestMapping(value=\"/admin\",method=RequestMethod.GET)\n\tpublic String admin(Model model) {\n\t\tmodel.addAttribute(\"title\", \"spring security\");\n\t\tmodel.addAttribute(\"message\", \"这是一个受保护的页面!\");\n\t\treturn \"admin\";\n\t}\n\n}\n\n```\n\n# 配置springmvc\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\"\n\txmlns:mvc=\"http://www.springframework.org/schema/mvc\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd\n\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd\">\n\n\t<context:component-scan base-package=\"springmvc.controller\"></context:component-scan>\n\t<!-- 设置thymeleaf模板解析器 -->\n\t<bean id=\"templateResolver\"\n\t\tclass=\"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver\">\n\t\t<property name=\"prefix\" value=\"/WEB-INF/templates/\"></property>\n\t\t<property name=\"suffix\" value=\".html\"></property>\n\t\t<property name=\"templateMode\" value=\"HTML\"></property>\n\t\t<property name=\"characterEncoding\" value=\"UTF-8\"></property>\n\t\t<property name=\"cacheable\" value=\"false\"></property>\n\t</bean>\n\t<!-- 设置模板引擎 -->\n\t<bean id=\"templateEngine\" class=\"org.thymeleaf.spring4.SpringTemplateEngine\">\n\t\t<property name=\"templateResolver\" ref=\"templateResolver\"></property>\n\t\t<property name=\"enableSpringELCompiler\" value=\"true\"></property>\n\t</bean>\n\t<!-- 配置thymeleaf视图解析器 -->\n\t<bean class=\"org.thymeleaf.spring4.view.ThymeleafViewResolver\">\n\t\t<property name=\"templateEngine\" ref=\"templateEngine\"></property>\n\t\t<property name=\"characterEncoding\" value=\"UTF-8\" />\n\t\t<property name=\"order\" value=\"1\"></property>\n\t</bean>\n</beans>\n\n```\n\n# 编写spring-security.xml\n\n权限定义为 `ROLE_ADMIN`，判断是否有权限使用 `hasRole('ADMIN') 或者 hasRole('ROLE_ADMIN')`，前缀 ROLE_ 可以省略\n需要多个权限: `hasRole('ADMIN') and hasRole('DBA')`\n有任意一个权限: `hasAnyRole('ROLE_ADMIN', 'ROLE_DBA')`\n\n如果想使用权限列表的方式，而不是上面的这种表达式，需要设置 `<security:http auto-config=\"true\" use-expressions=\"false\">`，然后才能`<security:intercept-url pattern=\"/home/se/admin\" access=\"ROLE_ADMIN\"/>`\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- 1.该配置主要用于配置Spring-Security，因此用到的security命名空间比较多，所以把security设置为默认的命名空间，而beans需要显示配置例如：<beans:beans> -->\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:security=\"http://www.springframework.org/schema/security\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\t\t\thttp://www.springframework.org/schema/security \n\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\">\n\n\t<security:http auto-config=\"true\" use-expressions=\"false\">\n      <!-- 1.intercept-url 可以配置请求路径需要什么样的权限访问\n                1.1 pattern 配置请求路径，可以借用ant语法\n                1.2 access 配置角色权限 hasRole('USER')即ROLE_USER，多个的话可以用逗号隔开\n                1.3 method 可以配置对什么类型的请求进行拦截\n                1.4 可以在http标签下配置多个intercept-url\n             这句话的意思是：拦截所有GET请求，并验证用户身份，只允许拥有USER角色的用户通过\n         -->\n\t\t<security:intercept-url pattern=\"/home/se/admin\" access=\"ROLE_ADMIN\"/>\n\t</security:http>\n\t<security:authentication-manager>\n\t\t<security:authentication-provider>\n\t\t\t<security:user-service>\n              <!--\n                    1.默认把用户信息配置到内存中\n                    2.密码以{noop}为前缀，表示DelegatingPasswordEncode，大概意思就是用明文的方式，方便测试阅读\n                -->\n\t\t\t\t<security:user name=\"zhanggaofeng\" password=\"{noop}zhanggaofeng\" authorities=\"ROLE_ADMIN\"/>\n\t\t\t</security:user-service>\n\t\t</security:authentication-provider>\n\t</security:authentication-manager>\n</beans>\n```\n\n# 添加Security\n\n需要修改web.xml配置文件，添加org.springframwork.web.filter.DelegatingFilterProxy映射。配置拦截的地方主要：`<url-pattem>\\*</url-pattem>`,一定是\\* 而不是 \\可以百度一下这两个配置的区别。\n\n```xml\n<listener>\n\t\t<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n</listener>\n<context-param>\n\t<param-name>contextConfigLocation</param-name>\n\t<param-value>classpath:spring-security.xml</param-value>\n</context-param>\n<filter>\n\t<filter-name>springSecurityFilterChain</filter-name>\n\t<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n</filter>\n<filter-mapping>\n\t<filter-name>springSecurityFilterChain</filter-name>\n\t<url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n\n# 测试\n\n1.访问 /home/se/helo 能正常显示页面，因为Security没有限制该请求\n\n2.访问 /home/se/admin 跳转到登录页面（我们没有创建登录页面，为什么会跳转呢，因为security默认了一个登录页面）,因为在spring-security.xml配置文件中对该请求添加了权限验证。","slug":"security1","published":1,"updated":"2022-11-24T13:38:45.598Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1ez00144ovkhznzxuqe","content":"<p>Spring Security是一个灵活和强大的身份验证和访问控制框架，以确保基于Spring的Java Web应用程序的安全。</p>\n<a id=\"more\"></a>\n<h1 id=\"引用jar\"><a href=\"#引用jar\" class=\"headerlink\" title=\"引用jar\"></a>引用jar</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"创建两个对比页面\"><a href=\"#创建两个对比页面\" class=\"headerlink\" title=\"创建两个对比页面\"></a>创建两个对比页面</h1><p>hello.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;title&#125;\"</span>&gt;</span>security<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;message&#125;\"</span>&gt;</span>哈哈哈<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>admin.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;title&#125;\"</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;message&#125;\"</span>&gt;</span>你好<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"编写controller\"><a href=\"#编写controller\" class=\"headerlink\" title=\"编写controller\"></a>编写controller</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/home/se\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityHelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SecurityHelloController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/hello\"</span>,method=RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"spring security\"</span>);</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"你好 Security!\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/admin\"</span>,method=RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">admin</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"spring security\"</span>);</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"这是一个受保护的页面!\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"admin\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置springmvc\"><a href=\"#配置springmvc\" class=\"headerlink\" title=\"配置springmvc\"></a>配置springmvc</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"springmvc.controller\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 设置thymeleaf模板解析器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"templateResolver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/templates/\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"templateMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"HTML\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"characterEncoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cacheable\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 设置模板引擎 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"templateEngine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.thymeleaf.spring4.SpringTemplateEngine\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"templateResolver\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"templateResolver\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSpringELCompiler\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置thymeleaf视图解析器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.thymeleaf.spring4.view.ThymeleafViewResolver\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"templateEngine\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"templateEngine\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"characterEncoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"order\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"编写spring-security-xml\"><a href=\"#编写spring-security-xml\" class=\"headerlink\" title=\"编写spring-security.xml\"></a>编写spring-security.xml</h1><p>权限定义为 <code>ROLE_ADMIN</code>，判断是否有权限使用 <code>hasRole(&#39;ADMIN&#39;) 或者 hasRole(&#39;ROLE_ADMIN&#39;)</code>，前缀 ROLE_ 可以省略<br>需要多个权限: <code>hasRole(&#39;ADMIN&#39;) and hasRole(&#39;DBA&#39;)</code><br>有任意一个权限: <code>hasAnyRole(&#39;ROLE_ADMIN&#39;, &#39;ROLE_DBA&#39;)</code></p>\n<p>如果想使用权限列表的方式，而不是上面的这种表达式，需要设置 <code>&lt;security:http auto-config=&quot;true&quot; use-expressions=&quot;false&quot;&gt;</code>，然后才能<code>&lt;security:intercept-url pattern=&quot;/home/se/admin&quot; access=&quot;ROLE_ADMIN&quot;/&gt;</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 1.该配置主要用于配置Spring-Security，因此用到的security命名空间比较多，所以把security设置为默认的命名空间，而beans需要显示配置例如：&lt;beans:beans&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:security</span>=<span class=\"string\">\"http://www.springframework.org/schema/security\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 1.intercept-url 可以配置请求路径需要什么样的权限访问</span></span><br><span class=\"line\"><span class=\"comment\">                1.1 pattern 配置请求路径，可以借用ant语法</span></span><br><span class=\"line\"><span class=\"comment\">                1.2 access 配置角色权限 hasRole('USER')即ROLE_USER，多个的话可以用逗号隔开</span></span><br><span class=\"line\"><span class=\"comment\">                1.3 method 可以配置对什么类型的请求进行拦截</span></span><br><span class=\"line\"><span class=\"comment\">                1.4 可以在http标签下配置多个intercept-url</span></span><br><span class=\"line\"><span class=\"comment\">             这句话的意思是：拦截所有GET请求，并验证用户身份，只允许拥有USER角色的用户通过</span></span><br><span class=\"line\"><span class=\"comment\">         --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/home/se/admin\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"ROLE_ADMIN\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">security:user-service</span>&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">                    1.默认把用户信息配置到内存中</span></span><br><span class=\"line\"><span class=\"comment\">                    2.密码以&#123;noop&#125;为前缀，表示DelegatingPasswordEncode，大概意思就是用明文的方式，方便测试阅读</span></span><br><span class=\"line\"><span class=\"comment\">                --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"zhanggaofeng\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"&#123;noop&#125;zhanggaofeng\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_ADMIN\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">security:user-service</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"添加Security\"><a href=\"#添加Security\" class=\"headerlink\" title=\"添加Security\"></a>添加Security</h1><p>需要修改web.xml配置文件，添加org.springframwork.web.filter.DelegatingFilterProxy映射。配置拦截的地方主要：<code>&lt;url-pattem&gt;\\*&lt;/url-pattem&gt;</code>,一定是* 而不是 \\可以百度一下这两个配置的区别。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring-security.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>springSecurityFilterChain<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>springSecurityFilterChain<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>1.访问 /home/se/helo 能正常显示页面，因为Security没有限制该请求</p>\n<p>2.访问 /home/se/admin 跳转到登录页面（我们没有创建登录页面，为什么会跳转呢，因为security默认了一个登录页面）,因为在spring-security.xml配置文件中对该请求添加了权限验证。</p>\n","site":{"data":{}},"excerpt":"<p>Spring Security是一个灵活和强大的身份验证和访问控制框架，以确保基于Spring的Java Web应用程序的安全。</p>","more":"<h1 id=\"引用jar\"><a href=\"#引用jar\" class=\"headerlink\" title=\"引用jar\"></a>引用jar</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.security<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-security-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.3.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"创建两个对比页面\"><a href=\"#创建两个对比页面\" class=\"headerlink\" title=\"创建两个对比页面\"></a>创建两个对比页面</h1><p>hello.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;title&#125;\"</span>&gt;</span>security<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;message&#125;\"</span>&gt;</span>哈哈哈<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>admin.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;title&#125;\"</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;message&#125;\"</span>&gt;</span>你好<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"编写controller\"><a href=\"#编写controller\" class=\"headerlink\" title=\"编写controller\"></a>编写controller</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/home/se\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecurityHelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SecurityHelloController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/hello\"</span>,method=RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">hello</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"spring security\"</span>);</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"你好 Security!\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value=<span class=\"string\">\"/admin\"</span>,method=RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">admin</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"title\"</span>, <span class=\"string\">\"spring security\"</span>);</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"这是一个受保护的页面!\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"admin\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置springmvc\"><a href=\"#配置springmvc\" class=\"headerlink\" title=\"配置springmvc\"></a>配置springmvc</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:mvc</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\thttp://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"springmvc.controller\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:component-scan</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 设置thymeleaf模板解析器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"templateResolver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/templates/\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"templateMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"HTML\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"characterEncoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cacheable\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 设置模板引擎 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"templateEngine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.thymeleaf.spring4.SpringTemplateEngine\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"templateResolver\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"templateResolver\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSpringELCompiler\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置thymeleaf视图解析器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.thymeleaf.spring4.view.ThymeleafViewResolver\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"templateEngine\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"templateEngine\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"characterEncoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"order\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"编写spring-security-xml\"><a href=\"#编写spring-security-xml\" class=\"headerlink\" title=\"编写spring-security.xml\"></a>编写spring-security.xml</h1><p>权限定义为 <code>ROLE_ADMIN</code>，判断是否有权限使用 <code>hasRole(&#39;ADMIN&#39;) 或者 hasRole(&#39;ROLE_ADMIN&#39;)</code>，前缀 ROLE_ 可以省略<br>需要多个权限: <code>hasRole(&#39;ADMIN&#39;) and hasRole(&#39;DBA&#39;)</code><br>有任意一个权限: <code>hasAnyRole(&#39;ROLE_ADMIN&#39;, &#39;ROLE_DBA&#39;)</code></p>\n<p>如果想使用权限列表的方式，而不是上面的这种表达式，需要设置 <code>&lt;security:http auto-config=&quot;true&quot; use-expressions=&quot;false&quot;&gt;</code>，然后才能<code>&lt;security:intercept-url pattern=&quot;/home/se/admin&quot; access=&quot;ROLE_ADMIN&quot;/&gt;</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 1.该配置主要用于配置Spring-Security，因此用到的security命名空间比较多，所以把security设置为默认的命名空间，而beans需要显示配置例如：&lt;beans:beans&gt; --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:security</span>=<span class=\"string\">\"http://www.springframework.org/schema/security\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 1.intercept-url 可以配置请求路径需要什么样的权限访问</span></span><br><span class=\"line\"><span class=\"comment\">                1.1 pattern 配置请求路径，可以借用ant语法</span></span><br><span class=\"line\"><span class=\"comment\">                1.2 access 配置角色权限 hasRole('USER')即ROLE_USER，多个的话可以用逗号隔开</span></span><br><span class=\"line\"><span class=\"comment\">                1.3 method 可以配置对什么类型的请求进行拦截</span></span><br><span class=\"line\"><span class=\"comment\">                1.4 可以在http标签下配置多个intercept-url</span></span><br><span class=\"line\"><span class=\"comment\">             这句话的意思是：拦截所有GET请求，并验证用户身份，只允许拥有USER角色的用户通过</span></span><br><span class=\"line\"><span class=\"comment\">         --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/home/se/admin\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"ROLE_ADMIN\"</span>/&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">security:user-service</span>&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!--</span></span><br><span class=\"line\"><span class=\"comment\">                    1.默认把用户信息配置到内存中</span></span><br><span class=\"line\"><span class=\"comment\">                    2.密码以&#123;noop&#125;为前缀，表示DelegatingPasswordEncode，大概意思就是用明文的方式，方便测试阅读</span></span><br><span class=\"line\"><span class=\"comment\">                --&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"zhanggaofeng\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"&#123;noop&#125;zhanggaofeng\"</span> <span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_ADMIN\"</span>/&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">security:user-service</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"添加Security\"><a href=\"#添加Security\" class=\"headerlink\" title=\"添加Security\"></a>添加Security</h1><p>需要修改web.xml配置文件，添加org.springframwork.web.filter.DelegatingFilterProxy映射。配置拦截的地方主要：<code>&lt;url-pattem&gt;\\*&lt;/url-pattem&gt;</code>,一定是* 而不是 \\可以百度一下这两个配置的区别。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:spring-security.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>springSecurityFilterChain<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>springSecurityFilterChain<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>1.访问 /home/se/helo 能正常显示页面，因为Security没有限制该请求</p>\n<p>2.访问 /home/se/admin 跳转到登录页面（我们没有创建登录页面，为什么会跳转呢，因为security默认了一个登录页面）,因为在spring-security.xml配置文件中对该请求添加了权限验证。</p>"},{"title":"Security自定义表单验证","date":"2017-12-06T09:29:53.000Z","_content":"\n前面已经初步认识了Security框架，并且做了一个类似于Hello word的例子。当我们没有配置登录界面的时候，Security框架经过验证需要用户登录时，会预编译一个默认的登录界面。今天我们学习一下自定义的登录验证页面。\n\n<!-- more -->\n\n# Spring Security配置\n\n在我们实际开发中，围绕登录和注销，结合Spring Security框架会有以下几种情况：\n\n>    1.   当用户访问的资源需要登录验证，可以配置自定义的登录页面\n>    2.   当用户提交登录信息，经过security的验证该用户登录信息错误，可以配置指定的URL\n>    3.   处理登录请求的URL\n>    4.   当用户直接访问登录页面，登录成功后跳转到什么页面\n>    5.   用户注销登录页面后，跳转到什么页面\n>    6.   用户登录成功，却没有权限访问该资源时，跳转到什么页面\n\n以上情况都可以在security配置文件中配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:security=\"http://www.springframework.org/schema/security\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\t\t\thttp://www.springframework.org/schema/security \n\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\">\n\n\t<!-- 一些不需要登录就可以访问的资源，取消验证，这样就省去了很多filter的拦截，提高程序效率 -->\n\t<security:http security=\"none\" pattern=\"/loginPage\"></security:http>\n\t<security:http auto-config=\"true\" use-expressions=\"false\">\n\t\t<security:intercept-url pattern=\"/admin\" access=\"ROLE_ADMIN\" />\n\t\t<!-- 配置登录验证的一些信息 \n\t\t\t1.login-page:get请求登录页面的url \n\t\t\t2.login-processing-url：post请求，处理登录请求的URL ，这里配置的是security默认的处理方法/login（如过没有特殊处理，这里可以省略配置）\n\t\t\t3.default-target-url:当用户直接访问登录页面，登录成功后，跳转到该属性配置的url \n\t\t-->\n\t\t<security:form-login \n\t\t\tlogin-page=\"/loginPage\"\n\t\t\tlogin-processing-url=\"/login\" \n\t\t\tdefault-target-url=\"/\"\n\t\t\tauthentication-failure-url=\"/login?error\" \n\t\t\tusername-parameter=\"username\"\n\t\t\tpassword-parameter=\"password\" />\n\t\t<!-- 配置注销登录的一些配置 \n\t\t\t1.logout-url：get请求，注销的url\n\t\t\t2.logout-success-url:get请求，注销成功后访问的url \n\t\t\n\t\t-->\n\t\t<security:logout \n\t\t\tlogout-url=\"/logout\"\n\t\t\tlogout-success-url=\"/login?logout\" />\n\t\t<!-- 登录成功，却没有权限的页面 error-page:没有权限访问的url -->\n\t\t<security:access-denied-handler\n\t\t\terror-page=\"/deny\" />\n\t\t<security:csrf disabled=\"true\" />\n\t</security:http>\n\t<security:authentication-manager>\n\t\t<security:authentication-provider>\n\t\t\t<security:user-service>\n\t\t\t\t<security:user name=\"zhanggaofeng\" password=\"zhanggaofeng\"\n\t\t\t\t\tauthorities=\"ROLE_ADMIN\" />\n\t\t\t\t<security:user name=\"zhaojiong\" password=\"zhaojiong\"\n\t\t\t\t\tauthorities=\"ROLE_USER\" />\n\t\t\t</security:user-service>\n\t\t</security:authentication-provider>\n\t</security:authentication-manager>\n</beans>\n```\n\n# 编写Controller\n\n```java\npackage springmvc.controller;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class LoginController {\n\n\tpublic LoginController() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\n\t@RequestMapping(value = \"/logout\", method = RequestMethod.GET)\n\t@ResponseBody\n\tpublic String logoutPage(HttpServletRequest request, HttpServletResponse response) {\n\t\tAuthentication auth = SecurityContextHolder.getContext().getAuthentication();\n\t\tif (auth != null) {\n\t\t\tSystem.out.println(auth.toString());\n\t\t\tnew SecurityContextLogoutHandler().logout(request, response, auth);\n\t\t}\n\t\treturn \"logout success\";\n\t}\n\t\n\t@RequestMapping(value = \"/loginPage\", method = RequestMethod.GET)\n\tpublic String login() {\n\t\treturn \"login\";\n\t}\n\t\n\n\t@RequestMapping(value = \"/login\")\n\tpublic String login(@RequestParam(value = \"error\", required = false) String error,\n\t\t\t@RequestParam(value = \"logout\", required = false) String logout, Model model) {\n\t\tif (error != null) {\n\t\t\tmodel.addAttribute(\"message\", \"登录失败\");\n\t\t}\n\t\tif (logout != null) {\n\t\t\tmodel.addAttribute(\"message\", \"注销成功\");\n\t\t}\n\t\treturn \"login\";\n\t}\n\n\t@RequestMapping(\"/deny\")\n\tpublic String deny(Model model) {\n\t\tmodel.addAttribute(\"errormessage\", \"您没有权限访问该页面\");\n\t\treturn \"error\";\n\t}\n\n}\n```\n\n# 登录表单\n\n```html\n<html>\n<head>\n<title>Login Page</title>\n</head>\n<body onload='document.f.j_username.focus();'>\n\t<h3>Login with Username and Password</h3>\n\t<h4 th:if=\"${message} != '' \"><span th:text=\"${message}\"></span></h4>\n  <!-- form的action默认配置为“/login” ，默认交给security内置的url处理 -->\n\t<form name='f' action='/login' method='POST'>\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td>User:</td>\n\t\t\t\t<td><input type='text' name='username' value=''></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Password:</td>\n\t\t\t\t<td><input type='password' name='password' /></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td colspan='2'><input name=\"submit\" type=\"submit\"\n\t\t\t\t\tvalue=\"Login\" /></td>\n\t\t\t</tr>\n\t\t</table>\n\t</form>\n</body>\n</html>\n```\n\n# 测试\n\n1.   访问/admin 需要验证，跳转到登录页面\n2.   填写错误的登录名密码，还在该页面，并显示错误提示\n3.   填写正确的登录名密码，成功登录，并跳转到admin.html页面\n4.   填写权限不够的登录名密码，成功登录，但是提醒权限不够，跳转到error.html页面\n5.   直接访问登录页面，登录成功后，跳转到制定页面。\n\n\n# 根据不同的角色登录成功后跳转不同的页面\n\n>    在实际项目中有这样一种场景，使用同一个登录表单，希望不同的用户登录成功后，显示不同的页面。比如管理员登录成功后，希望直接跳转到后台管理页面，而普通用户显示首页，这个时候可以使用`authentication-success-handler-ref`这个属性配置登录成功后的handler。修改后的form-login属性如下\n\n```xml\n<security:form-login \n\t\t\tlogin-page=\"/loginPage\"\n\t\t\tauthentication-success-handler-ref=\"loginSuccessHandler\"\n\t\t\tdefault-target-url=\"/\"\n\t\t\tauthentication-failure-url=\"/login?error\" \n\t\t\tusername-parameter=\"username\"\n\t\t\tpassword-parameter=\"password\" />\n```\n\n注意：当使用`authentication-success-handler-ref`属性后，`default-target-url`将不再起作用\n\nLoginSuccessHandler.java\n\n```java\npackage springmvc;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.security.context.DelegatingApplicationListener;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.web.authentication.AuthenticationSuccessHandler;\nimport org.springframework.security.web.savedrequest.HttpSessionRequestCache;\nimport org.springframework.security.web.savedrequest.SavedRequest;\n\npublic class LoginSuccessHandler implements AuthenticationSuccessHandler {\n\n\tpublic LoginSuccessHandler() {\n\t}\n\n\t/**\n\t * 1.获取用户访问的url 2.如果url不为空，验证登录后，直接跳转到该页面 3.如果url为空，则判断用户权限，根据不同的权限跳转到不同的页面\n\t */\n\tpublic void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication auth)\n\t\t\tthrows IOException, ServletException {\n\n\t\tSavedRequest saved = new HttpSessionRequestCache().getRequest(request, response);\n\n\t\tString redirectUrl = (saved != null) ? saved.getRedirectUrl() : \"\";\n\t\tif (!redirectUrl.isEmpty()) {\n\t\t\tresponse.sendRedirect(redirectUrl);\n\t\t\treturn;\n\t\t}\n\t\t// 获取用户登录信息\n\t\tAuthentication authtication = SecurityContextHolder.getContext().getAuthentication();\n\t\tfor (GrantedAuthority authority : authtication.getAuthorities()) {\n\t\t\tString role = authority.getAuthority();\n\t\t\tif (\"ROLE_ADMIN\".equals(role)) {\n\t\t\t\tredirectUrl = \"/admin\";\n\t\t\t} else {\n\t\t\t\tredirectUrl = \"/hello\";\n\t\t\t}\n\t\t}\n\n\t\tresponse.sendRedirect(redirectUrl);\n\t}\n\n}\n\n```\n\n\n\n# 总结\n\n1.   html和我们自己写的后台controller不是在同一个上下文内的。因此在静态页面访问url的时候，带不带/是有很大区别的，带/是访问host路径，不带/是访问相对路径","source":"_posts/security2.md","raw":"---\ntitle: Security自定义表单验证\ndate: 2017-12-06 17:29:53\ntags: [security]\n---\n\n前面已经初步认识了Security框架，并且做了一个类似于Hello word的例子。当我们没有配置登录界面的时候，Security框架经过验证需要用户登录时，会预编译一个默认的登录界面。今天我们学习一下自定义的登录验证页面。\n\n<!-- more -->\n\n# Spring Security配置\n\n在我们实际开发中，围绕登录和注销，结合Spring Security框架会有以下几种情况：\n\n>    1.   当用户访问的资源需要登录验证，可以配置自定义的登录页面\n>    2.   当用户提交登录信息，经过security的验证该用户登录信息错误，可以配置指定的URL\n>    3.   处理登录请求的URL\n>    4.   当用户直接访问登录页面，登录成功后跳转到什么页面\n>    5.   用户注销登录页面后，跳转到什么页面\n>    6.   用户登录成功，却没有权限访问该资源时，跳转到什么页面\n\n以上情况都可以在security配置文件中配置\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:security=\"http://www.springframework.org/schema/security\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\t\t\thttp://www.springframework.org/schema/security \n\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\">\n\n\t<!-- 一些不需要登录就可以访问的资源，取消验证，这样就省去了很多filter的拦截，提高程序效率 -->\n\t<security:http security=\"none\" pattern=\"/loginPage\"></security:http>\n\t<security:http auto-config=\"true\" use-expressions=\"false\">\n\t\t<security:intercept-url pattern=\"/admin\" access=\"ROLE_ADMIN\" />\n\t\t<!-- 配置登录验证的一些信息 \n\t\t\t1.login-page:get请求登录页面的url \n\t\t\t2.login-processing-url：post请求，处理登录请求的URL ，这里配置的是security默认的处理方法/login（如过没有特殊处理，这里可以省略配置）\n\t\t\t3.default-target-url:当用户直接访问登录页面，登录成功后，跳转到该属性配置的url \n\t\t-->\n\t\t<security:form-login \n\t\t\tlogin-page=\"/loginPage\"\n\t\t\tlogin-processing-url=\"/login\" \n\t\t\tdefault-target-url=\"/\"\n\t\t\tauthentication-failure-url=\"/login?error\" \n\t\t\tusername-parameter=\"username\"\n\t\t\tpassword-parameter=\"password\" />\n\t\t<!-- 配置注销登录的一些配置 \n\t\t\t1.logout-url：get请求，注销的url\n\t\t\t2.logout-success-url:get请求，注销成功后访问的url \n\t\t\n\t\t-->\n\t\t<security:logout \n\t\t\tlogout-url=\"/logout\"\n\t\t\tlogout-success-url=\"/login?logout\" />\n\t\t<!-- 登录成功，却没有权限的页面 error-page:没有权限访问的url -->\n\t\t<security:access-denied-handler\n\t\t\terror-page=\"/deny\" />\n\t\t<security:csrf disabled=\"true\" />\n\t</security:http>\n\t<security:authentication-manager>\n\t\t<security:authentication-provider>\n\t\t\t<security:user-service>\n\t\t\t\t<security:user name=\"zhanggaofeng\" password=\"zhanggaofeng\"\n\t\t\t\t\tauthorities=\"ROLE_ADMIN\" />\n\t\t\t\t<security:user name=\"zhaojiong\" password=\"zhaojiong\"\n\t\t\t\t\tauthorities=\"ROLE_USER\" />\n\t\t\t</security:user-service>\n\t\t</security:authentication-provider>\n\t</security:authentication-manager>\n</beans>\n```\n\n# 编写Controller\n\n```java\npackage springmvc.controller;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\npublic class LoginController {\n\n\tpublic LoginController() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\n\t@RequestMapping(value = \"/logout\", method = RequestMethod.GET)\n\t@ResponseBody\n\tpublic String logoutPage(HttpServletRequest request, HttpServletResponse response) {\n\t\tAuthentication auth = SecurityContextHolder.getContext().getAuthentication();\n\t\tif (auth != null) {\n\t\t\tSystem.out.println(auth.toString());\n\t\t\tnew SecurityContextLogoutHandler().logout(request, response, auth);\n\t\t}\n\t\treturn \"logout success\";\n\t}\n\t\n\t@RequestMapping(value = \"/loginPage\", method = RequestMethod.GET)\n\tpublic String login() {\n\t\treturn \"login\";\n\t}\n\t\n\n\t@RequestMapping(value = \"/login\")\n\tpublic String login(@RequestParam(value = \"error\", required = false) String error,\n\t\t\t@RequestParam(value = \"logout\", required = false) String logout, Model model) {\n\t\tif (error != null) {\n\t\t\tmodel.addAttribute(\"message\", \"登录失败\");\n\t\t}\n\t\tif (logout != null) {\n\t\t\tmodel.addAttribute(\"message\", \"注销成功\");\n\t\t}\n\t\treturn \"login\";\n\t}\n\n\t@RequestMapping(\"/deny\")\n\tpublic String deny(Model model) {\n\t\tmodel.addAttribute(\"errormessage\", \"您没有权限访问该页面\");\n\t\treturn \"error\";\n\t}\n\n}\n```\n\n# 登录表单\n\n```html\n<html>\n<head>\n<title>Login Page</title>\n</head>\n<body onload='document.f.j_username.focus();'>\n\t<h3>Login with Username and Password</h3>\n\t<h4 th:if=\"${message} != '' \"><span th:text=\"${message}\"></span></h4>\n  <!-- form的action默认配置为“/login” ，默认交给security内置的url处理 -->\n\t<form name='f' action='/login' method='POST'>\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<td>User:</td>\n\t\t\t\t<td><input type='text' name='username' value=''></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Password:</td>\n\t\t\t\t<td><input type='password' name='password' /></td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td colspan='2'><input name=\"submit\" type=\"submit\"\n\t\t\t\t\tvalue=\"Login\" /></td>\n\t\t\t</tr>\n\t\t</table>\n\t</form>\n</body>\n</html>\n```\n\n# 测试\n\n1.   访问/admin 需要验证，跳转到登录页面\n2.   填写错误的登录名密码，还在该页面，并显示错误提示\n3.   填写正确的登录名密码，成功登录，并跳转到admin.html页面\n4.   填写权限不够的登录名密码，成功登录，但是提醒权限不够，跳转到error.html页面\n5.   直接访问登录页面，登录成功后，跳转到制定页面。\n\n\n# 根据不同的角色登录成功后跳转不同的页面\n\n>    在实际项目中有这样一种场景，使用同一个登录表单，希望不同的用户登录成功后，显示不同的页面。比如管理员登录成功后，希望直接跳转到后台管理页面，而普通用户显示首页，这个时候可以使用`authentication-success-handler-ref`这个属性配置登录成功后的handler。修改后的form-login属性如下\n\n```xml\n<security:form-login \n\t\t\tlogin-page=\"/loginPage\"\n\t\t\tauthentication-success-handler-ref=\"loginSuccessHandler\"\n\t\t\tdefault-target-url=\"/\"\n\t\t\tauthentication-failure-url=\"/login?error\" \n\t\t\tusername-parameter=\"username\"\n\t\t\tpassword-parameter=\"password\" />\n```\n\n注意：当使用`authentication-success-handler-ref`属性后，`default-target-url`将不再起作用\n\nLoginSuccessHandler.java\n\n```java\npackage springmvc;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.security.context.DelegatingApplicationListener;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.context.SecurityContext;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.web.authentication.AuthenticationSuccessHandler;\nimport org.springframework.security.web.savedrequest.HttpSessionRequestCache;\nimport org.springframework.security.web.savedrequest.SavedRequest;\n\npublic class LoginSuccessHandler implements AuthenticationSuccessHandler {\n\n\tpublic LoginSuccessHandler() {\n\t}\n\n\t/**\n\t * 1.获取用户访问的url 2.如果url不为空，验证登录后，直接跳转到该页面 3.如果url为空，则判断用户权限，根据不同的权限跳转到不同的页面\n\t */\n\tpublic void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response, Authentication auth)\n\t\t\tthrows IOException, ServletException {\n\n\t\tSavedRequest saved = new HttpSessionRequestCache().getRequest(request, response);\n\n\t\tString redirectUrl = (saved != null) ? saved.getRedirectUrl() : \"\";\n\t\tif (!redirectUrl.isEmpty()) {\n\t\t\tresponse.sendRedirect(redirectUrl);\n\t\t\treturn;\n\t\t}\n\t\t// 获取用户登录信息\n\t\tAuthentication authtication = SecurityContextHolder.getContext().getAuthentication();\n\t\tfor (GrantedAuthority authority : authtication.getAuthorities()) {\n\t\t\tString role = authority.getAuthority();\n\t\t\tif (\"ROLE_ADMIN\".equals(role)) {\n\t\t\t\tredirectUrl = \"/admin\";\n\t\t\t} else {\n\t\t\t\tredirectUrl = \"/hello\";\n\t\t\t}\n\t\t}\n\n\t\tresponse.sendRedirect(redirectUrl);\n\t}\n\n}\n\n```\n\n\n\n# 总结\n\n1.   html和我们自己写的后台controller不是在同一个上下文内的。因此在静态页面访问url的时候，带不带/是有很大区别的，带/是访问host路径，不带/是访问相对路径","slug":"security2","published":1,"updated":"2022-11-24T13:38:45.599Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1f100164ovkmvr8fjh1","content":"<p>前面已经初步认识了Security框架，并且做了一个类似于Hello word的例子。当我们没有配置登录界面的时候，Security框架经过验证需要用户登录时，会预编译一个默认的登录界面。今天我们学习一下自定义的登录验证页面。</p>\n<a id=\"more\"></a>\n<h1 id=\"Spring-Security配置\"><a href=\"#Spring-Security配置\" class=\"headerlink\" title=\"Spring Security配置\"></a>Spring Security配置</h1><p>在我们实际开发中，围绕登录和注销，结合Spring Security框架会有以下几种情况：</p>\n<blockquote>\n<ol>\n<li>当用户访问的资源需要登录验证，可以配置自定义的登录页面</li>\n<li>当用户提交登录信息，经过security的验证该用户登录信息错误，可以配置指定的URL</li>\n<li>处理登录请求的URL</li>\n<li>当用户直接访问登录页面，登录成功后跳转到什么页面</li>\n<li>用户注销登录页面后，跳转到什么页面</li>\n<li>用户登录成功，却没有权限访问该资源时，跳转到什么页面</li>\n</ol>\n</blockquote>\n<p>以上情况都可以在security配置文件中配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:security</span>=<span class=\"string\">\"http://www.springframework.org/schema/security\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 一些不需要登录就可以访问的资源，取消验证，这样就省去了很多filter的拦截，提高程序效率 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">security</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/loginPage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"ROLE_ADMIN\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置登录验证的一些信息 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t1.login-page:get请求登录页面的url </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t2.login-processing-url：post请求，处理登录请求的URL ，这里配置的是security默认的处理方法/login（如过没有特殊处理，这里可以省略配置）</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t3.default-target-url:当用户直接访问登录页面，登录成功后，跳转到该属性配置的url </span></span><br><span class=\"line\"><span class=\"comment\">\t\t--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:form-login</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">login-page</span>=<span class=\"string\">\"/loginPage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">login-processing-url</span>=<span class=\"string\">\"/login\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">default-target-url</span>=<span class=\"string\">\"/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">authentication-failure-url</span>=<span class=\"string\">\"/login?error\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">username-parameter</span>=<span class=\"string\">\"username\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">password-parameter</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置注销登录的一些配置 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t1.logout-url：get请求，注销的url</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t2.logout-success-url:get请求，注销成功后访问的url </span></span><br><span class=\"line\"><span class=\"comment\">\t\t</span></span><br><span class=\"line\"><span class=\"comment\">\t\t--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:logout</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">logout-url</span>=<span class=\"string\">\"/logout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">logout-success-url</span>=<span class=\"string\">\"/login?logout\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 登录成功，却没有权限的页面 error-page:没有权限访问的url --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:access-denied-handler</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">error-page</span>=<span class=\"string\">\"/deny\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:csrf</span> <span class=\"attr\">disabled</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">security:user-service</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"zhanggaofeng\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"zhanggaofeng\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_ADMIN\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"zhaojiong\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"zhaojiong\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">security:user-service</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"编写Controller\"><a href=\"#编写Controller\" class=\"headerlink\" title=\"编写Controller\"></a>编写Controller</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoginController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/logout\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">logoutPage</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">\t\tAuthentication auth = SecurityContextHolder.getContext().getAuthentication();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (auth != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(auth.toString());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> SecurityContextLogoutHandler().logout(request, response, auth);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"logout success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/loginPage\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"login\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/login\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"error\"</span>, required = <span class=\"keyword\">false</span>)</span> String error,</span></span><br><span class=\"line\"><span class=\"function\">\t\t\t@<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"logout\"</span>, required = <span class=\"keyword\">false</span>)</span> String logout, Model model) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (error != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logout != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"注销成功\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"login\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/deny\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deny</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"errormessage\"</span>, <span class=\"string\">\"您没有权限访问该页面\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"登录表单\"><a href=\"#登录表单\" class=\"headerlink\" title=\"登录表单\"></a>登录表单</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Login Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">'document.f.j_username.focus();'</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Login with Username and Password<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;message&#125; != '' \"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;message&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- form的action默认配置为“/login” ，默认交给security内置的url处理 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">'f'</span> <span class=\"attr\">action</span>=<span class=\"string\">'/login'</span> <span class=\"attr\">method</span>=<span class=\"string\">'POST'</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>User:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'username'</span> <span class=\"attr\">value</span>=<span class=\"string\">''</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Password:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'password'</span> <span class=\"attr\">name</span>=<span class=\"string\">'password'</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span>=<span class=\"string\">'2'</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">value</span>=<span class=\"string\">\"Login\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><ol>\n<li>访问/admin 需要验证，跳转到登录页面</li>\n<li>填写错误的登录名密码，还在该页面，并显示错误提示</li>\n<li>填写正确的登录名密码，成功登录，并跳转到admin.html页面</li>\n<li>填写权限不够的登录名密码，成功登录，但是提醒权限不够，跳转到error.html页面</li>\n<li>直接访问登录页面，登录成功后，跳转到制定页面。</li>\n</ol>\n<h1 id=\"根据不同的角色登录成功后跳转不同的页面\"><a href=\"#根据不同的角色登录成功后跳转不同的页面\" class=\"headerlink\" title=\"根据不同的角色登录成功后跳转不同的页面\"></a>根据不同的角色登录成功后跳转不同的页面</h1><blockquote>\n<p>   在实际项目中有这样一种场景，使用同一个登录表单，希望不同的用户登录成功后，显示不同的页面。比如管理员登录成功后，希望直接跳转到后台管理页面，而普通用户显示首页，这个时候可以使用<code>authentication-success-handler-ref</code>这个属性配置登录成功后的handler。修改后的form-login属性如下</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:form-login</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">login-page</span>=<span class=\"string\">\"/loginPage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">authentication-success-handler-ref</span>=<span class=\"string\">\"loginSuccessHandler\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">default-target-url</span>=<span class=\"string\">\"/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">authentication-failure-url</span>=<span class=\"string\">\"/login?error\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">username-parameter</span>=<span class=\"string\">\"username\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">password-parameter</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意：当使用<code>authentication-success-handler-ref</code>属性后，<code>default-target-url</code>将不再起作用</p>\n<p>LoginSuccessHandler.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.context.DelegatingApplicationListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.context.SecurityContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.savedrequest.HttpSessionRequestCache;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.savedrequest.SavedRequest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoginSuccessHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 1.获取用户访问的url 2.如果url不为空，验证登录后，直接跳转到该页面 3.如果url为空，则判断用户权限，根据不同的权限跳转到不同的页面</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication auth)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSavedRequest saved = <span class=\"keyword\">new</span> HttpSessionRequestCache().getRequest(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString redirectUrl = (saved != <span class=\"keyword\">null</span>) ? saved.getRedirectUrl() : <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!redirectUrl.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tresponse.sendRedirect(redirectUrl);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取用户登录信息</span></span><br><span class=\"line\">\t\tAuthentication authtication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (GrantedAuthority authority : authtication.getAuthorities()) &#123;</span><br><span class=\"line\">\t\t\tString role = authority.getAuthority();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"ROLE_ADMIN\"</span>.equals(role)) &#123;</span><br><span class=\"line\">\t\t\t\tredirectUrl = <span class=\"string\">\"/admin\"</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tredirectUrl = <span class=\"string\">\"/hello\"</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tresponse.sendRedirect(redirectUrl);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>html和我们自己写的后台controller不是在同一个上下文内的。因此在静态页面访问url的时候，带不带/是有很大区别的，带/是访问host路径，不带/是访问相对路径</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>前面已经初步认识了Security框架，并且做了一个类似于Hello word的例子。当我们没有配置登录界面的时候，Security框架经过验证需要用户登录时，会预编译一个默认的登录界面。今天我们学习一下自定义的登录验证页面。</p>","more":"<h1 id=\"Spring-Security配置\"><a href=\"#Spring-Security配置\" class=\"headerlink\" title=\"Spring Security配置\"></a>Spring Security配置</h1><p>在我们实际开发中，围绕登录和注销，结合Spring Security框架会有以下几种情况：</p>\n<blockquote>\n<ol>\n<li>当用户访问的资源需要登录验证，可以配置自定义的登录页面</li>\n<li>当用户提交登录信息，经过security的验证该用户登录信息错误，可以配置指定的URL</li>\n<li>处理登录请求的URL</li>\n<li>当用户直接访问登录页面，登录成功后跳转到什么页面</li>\n<li>用户注销登录页面后，跳转到什么页面</li>\n<li>用户登录成功，却没有权限访问该资源时，跳转到什么页面</li>\n</ol>\n</blockquote>\n<p>以上情况都可以在security配置文件中配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:security</span>=<span class=\"string\">\"http://www.springframework.org/schema/security\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 一些不需要登录就可以访问的资源，取消验证，这样就省去了很多filter的拦截，提高程序效率 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">security</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/loginPage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin\"</span> <span class=\"attr\">access</span>=<span class=\"string\">\"ROLE_ADMIN\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置登录验证的一些信息 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t1.login-page:get请求登录页面的url </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t2.login-processing-url：post请求，处理登录请求的URL ，这里配置的是security默认的处理方法/login（如过没有特殊处理，这里可以省略配置）</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t3.default-target-url:当用户直接访问登录页面，登录成功后，跳转到该属性配置的url </span></span><br><span class=\"line\"><span class=\"comment\">\t\t--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:form-login</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">login-page</span>=<span class=\"string\">\"/loginPage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">login-processing-url</span>=<span class=\"string\">\"/login\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">default-target-url</span>=<span class=\"string\">\"/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">authentication-failure-url</span>=<span class=\"string\">\"/login?error\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">username-parameter</span>=<span class=\"string\">\"username\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">password-parameter</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置注销登录的一些配置 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t1.logout-url：get请求，注销的url</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t2.logout-success-url:get请求，注销成功后访问的url </span></span><br><span class=\"line\"><span class=\"comment\">\t\t</span></span><br><span class=\"line\"><span class=\"comment\">\t\t--&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:logout</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">logout-url</span>=<span class=\"string\">\"/logout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">logout-success-url</span>=<span class=\"string\">\"/login?logout\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 登录成功，却没有权限的页面 error-page:没有权限访问的url --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:access-denied-handler</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">error-page</span>=<span class=\"string\">\"/deny\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:csrf</span> <span class=\"attr\">disabled</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">security:user-service</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"zhanggaofeng\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"zhanggaofeng\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_ADMIN\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">security:user</span> <span class=\"attr\">name</span>=<span class=\"string\">\"zhaojiong\"</span> <span class=\"attr\">password</span>=<span class=\"string\">\"zhaojiong\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">authorities</span>=<span class=\"string\">\"ROLE_USER\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">security:user-service</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"编写Controller\"><a href=\"#编写Controller\" class=\"headerlink\" title=\"编写Controller\"></a>编写Controller</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoginController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/logout\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">logoutPage</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class=\"line\">\t\tAuthentication auth = SecurityContextHolder.getContext().getAuthentication();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (auth != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(auth.toString());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">new</span> SecurityContextLogoutHandler().logout(request, response, auth);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"logout success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/loginPage\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"login\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/login\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(@RequestParam(value = <span class=\"string\">\"error\"</span>, required = <span class=\"keyword\">false</span>)</span> String error,</span></span><br><span class=\"line\"><span class=\"function\">\t\t\t@<span class=\"title\">RequestParam</span><span class=\"params\">(value = <span class=\"string\">\"logout\"</span>, required = <span class=\"keyword\">false</span>)</span> String logout, Model model) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (error != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"登录失败\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logout != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tmodel.addAttribute(<span class=\"string\">\"message\"</span>, <span class=\"string\">\"注销成功\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"login\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/deny\"</span>)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">deny</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"errormessage\"</span>, <span class=\"string\">\"您没有权限访问该页面\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"登录表单\"><a href=\"#登录表单\" class=\"headerlink\" title=\"登录表单\"></a>登录表单</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Login Page<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">'document.f.j_username.focus();'</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Login with Username and Password<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">th:if</span>=<span class=\"string\">\"$&#123;message&#125; != '' \"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;message&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- form的action默认配置为“/login” ，默认交给security内置的url处理 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">name</span>=<span class=\"string\">'f'</span> <span class=\"attr\">action</span>=<span class=\"string\">'/login'</span> <span class=\"attr\">method</span>=<span class=\"string\">'POST'</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>User:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'username'</span> <span class=\"attr\">value</span>=<span class=\"string\">''</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>Password:<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'password'</span> <span class=\"attr\">name</span>=<span class=\"string\">'password'</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span>=<span class=\"string\">'2'</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">name</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t\t\t<span class=\"attr\">value</span>=<span class=\"string\">\"Login\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><ol>\n<li>访问/admin 需要验证，跳转到登录页面</li>\n<li>填写错误的登录名密码，还在该页面，并显示错误提示</li>\n<li>填写正确的登录名密码，成功登录，并跳转到admin.html页面</li>\n<li>填写权限不够的登录名密码，成功登录，但是提醒权限不够，跳转到error.html页面</li>\n<li>直接访问登录页面，登录成功后，跳转到制定页面。</li>\n</ol>\n<h1 id=\"根据不同的角色登录成功后跳转不同的页面\"><a href=\"#根据不同的角色登录成功后跳转不同的页面\" class=\"headerlink\" title=\"根据不同的角色登录成功后跳转不同的页面\"></a>根据不同的角色登录成功后跳转不同的页面</h1><blockquote>\n<p>   在实际项目中有这样一种场景，使用同一个登录表单，希望不同的用户登录成功后，显示不同的页面。比如管理员登录成功后，希望直接跳转到后台管理页面，而普通用户显示首页，这个时候可以使用<code>authentication-success-handler-ref</code>这个属性配置登录成功后的handler。修改后的form-login属性如下</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security:form-login</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">login-page</span>=<span class=\"string\">\"/loginPage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">authentication-success-handler-ref</span>=<span class=\"string\">\"loginSuccessHandler\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">default-target-url</span>=<span class=\"string\">\"/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">authentication-failure-url</span>=<span class=\"string\">\"/login?error\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">username-parameter</span>=<span class=\"string\">\"username\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">password-parameter</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意：当使用<code>authentication-success-handler-ref</code>属性后，<code>default-target-url</code>将不再起作用</p>\n<p>LoginSuccessHandler.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.context.DelegatingApplicationListener;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.Authentication;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.context.SecurityContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.authentication.AuthenticationSuccessHandler;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.savedrequest.HttpSessionRequestCache;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.web.savedrequest.SavedRequest;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginSuccessHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoginSuccessHandler</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 1.获取用户访问的url 2.如果url不为空，验证登录后，直接跳转到该页面 3.如果url为空，则判断用户权限，根据不同的权限跳转到不同的页面</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAuthenticationSuccess</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Authentication auth)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t\t<span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSavedRequest saved = <span class=\"keyword\">new</span> HttpSessionRequestCache().getRequest(request, response);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tString redirectUrl = (saved != <span class=\"keyword\">null</span>) ? saved.getRedirectUrl() : <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!redirectUrl.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\tresponse.sendRedirect(redirectUrl);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取用户登录信息</span></span><br><span class=\"line\">\t\tAuthentication authtication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (GrantedAuthority authority : authtication.getAuthorities()) &#123;</span><br><span class=\"line\">\t\t\tString role = authority.getAuthority();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"string\">\"ROLE_ADMIN\"</span>.equals(role)) &#123;</span><br><span class=\"line\">\t\t\t\tredirectUrl = <span class=\"string\">\"/admin\"</span>;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tredirectUrl = <span class=\"string\">\"/hello\"</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tresponse.sendRedirect(redirectUrl);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>html和我们自己写的后台controller不是在同一个上下文内的。因此在静态页面访问url的时候，带不带/是有很大区别的，带/是访问host路径，不带/是访问相对路径</li>\n</ol>"},{"title":"Security 配置用户数据源","date":"2017-12-08T02:53:32.000Z","_content":"\n# 背景\n\n前面我们已经初步了解了Spring Security安全框架，并可以简单使用。但是之前的用户信息我们都是写在配置文件中。如果用户数量比较多了，或者用户信息经常变化，在写到配置文件中就不太现实，下面就讲一下用其他数据源来存储用户信息的情况。\n\n<!-- more -->\n\n# 模拟一下数据库\n\n接口\n\n```java\npackage springmvc.service;\n\nimport springmvc.pojo.User;\nimport springmvc.pojo.UserSecurity;\n\npublic interface UserService {\n\t\n\tvoid save(User user);\n\t\n\tUserSecurity findByName(String name);\n\n}\n\n```\n\n\n\n实现类\n\n```java\npackage springmvc.service.impl;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.springframework.stereotype.Service;\n\nimport springmvc.pojo.User;\nimport springmvc.pojo.UserSecurity;\nimport springmvc.service.UserService;\n\n@Service\npublic class UserServiceImpl implements UserService {\n\tprivate static Map<String, UserSecurity> users = new HashMap<String, UserSecurity>();\n\tstatic {\n\t\t// 模拟数据源，可以是多种，如数据库，LDAP，从配置文件读取等\n\t\tusers.put(\"admin\", new UserSecurity(\"admin\", \"admin\", \"ROLE_ADMIN\"));\n\t\tusers.put(\"alice\", new UserSecurity(\"alice\", \"admin\", \"ROLE_USER\"));\n\t}\n\n\tpublic UserServiceImpl() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\n\tpublic void save(User user) {\n\n\t\tSystem.out.println(user.toString());\n\t}\n\n\tpublic UserSecurity findByName(String name) {\n\t\t// TODO Auto-generated method stub\n\t\treturn users.get(name);\n\t}\n}\n\n```\n\n# 用户对象类 \n\n用户类需要继承org.springframework.security.core.userdetails.User\n\n```java\npackage springmvc.pojo;\n\nimport java.util.Collection;\nimport java.util.HashSet;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.AuthorityUtils;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class UserSecurity extends org.springframework.security.core.userdetails.User {\n\n\tprivate Long id;\n\tprivate String username;\n\tprivate String password;\n\n\tpublic UserSecurity() {\n\t\t// 父类不允许空的用户名、密码和权限，所以给个默认的，这样就可以用默认的构造函数创建 User 对象。\n\t\tsuper(\"non-exist-username\", \"\", (Collection<? extends GrantedAuthority>) new HashSet<Object>());\n\t}\n\t\n\t/**\n\t * \n\t * @param username 帐号\n\t * @param password 密码\n\t * @param roles 角色\n\t */\n\tpublic UserSecurity(String username,String password,String...roles) {\n\t\tthis(username,password,true,roles);\n\t}\n\n\t/**\n\t * \n\t * @param username 帐号\n\t * @param password 密码\n\t * @param enabled 是否禁用\n\t * @param roles 角色\n\t */\n\tpublic UserSecurity(String username, String password, boolean enabled, String... roles) {\n\t\tsuper(username, password, enabled, true, true, true, AuthorityUtils.createAuthorityList(roles));\n\t\tthis.username = username;\n\t\tthis.password = password;\n\n\t}\n\n}\n\n```\n\n# UserDetailsService\n\nUserDetailsService的作用是根据登录表单中的用户名查找用户信息用于身份验证。Spring Security中验证分为两部：1.身份验证  2.权限验证\n\n```java\npackage springmvc;\n\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\n\nimport springmvc.pojo.UserSecurity;\nimport springmvc.service.UserService;\nimport springmvc.service.impl.UserServiceImpl;\n\npublic class UserSecurityService implements UserDetailsService {\n\n\tprivate UserService us = new UserServiceImpl();\n\tpublic UserSecurityService() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\n\t/**\n\t * 根据用户提交的username查找用户信息，如密码，权限等信息\n\t * Spring Security根据查找到的用户密码和加密后的用户输入的密码进行比较，用来身份验证\n\t * 然后使用用户的角色和页面访问需要的角色对比，如果成功则验证成功。\n\t */\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\t// TODO Auto-generated method stub\n\t\tUserSecurity user = us.findByName(username);\n\t\tif(null == user) {\n\t\t\t throw new UsernameNotFoundException(username + \" not found!\");\n\t\t}\n\t\treturn user;\n\t}\n\n}\n\n```\n\n# 配置用户信息来源（spring-security.xml）\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:security=\"http://www.springframework.org/schema/security\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\t\t\thttp://www.springframework.org/schema/security \n\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\">\n\n\t<!-- 一些不需要登录就可以访问的资源，取消验证，这样就省去了很多filter的拦截，提高程序效率 -->\n\t<security:http security=\"none\" pattern=\"/loginPage\"></security:http>\n\t<security:http auto-config=\"true\" use-expressions=\"false\">\n\t\t<security:intercept-url pattern=\"/admin\"\n\t\t\taccess=\"ROLE_ADMIN\" />\n\t\t<!-- 配置登录验证的一些信息 1.login-page:get请求登录页面的url 2.login-processing-url：post请求，登录页面提交的请求（点击登录后，表单提交的信息会被security默认的登录验证拦截器拦截，并 \n\t\t\t判断用户信息，处理完之后，才会进入到这个地方配置的url对应的controller方法中。） 3.default-target-url:当用户直接访问登录页面，登录成功后，跳转到该属性配置的url \n\t\t\t4.配置了authentication-successs-handler-ref 是登录验证成功后，跳转的handler，default-target-url会失效 -->\n\t\t<security:form-login login-page=\"/loginPage\"\n\t\t\tauthentication-success-handler-ref=\"loginSuccessHandler\"\n\t\t\tdefault-target-url=\"/\" authentication-failure-url=\"/login?error\"\n\t\t\tusername-parameter=\"username\" password-parameter=\"password\" />\n\t\t<!-- 配置注销登录的一些配置 1.logout-url：get请求，注销的url 2.logout-success-url:get请求，注销成功后访问的url -->\n\t\t<security:logout logout-url=\"/logout\"\n\t\t\tlogout-success-url=\"/login?logout\" />\n\t\t<!-- 登录成功，却没有权限的页面 error-page:没有权限访问的url -->\n\t\t<security:access-denied-handler\n\t\t\terror-page=\"/deny\" />\n\t\t<security:csrf disabled=\"true\" />\n\t</security:http>\n    <!-- user-service-ref 配置用户数据来源信息 -->\n\t<security:authentication-manager>\n\t\t<security:authentication-provider\n\t\t\tuser-service-ref=\"userSecurityService\">\n\t\t</security:authentication-provider>\n\t</security:authentication-manager>\n\t<bean id=\"loginSuccessHandler\" class=\"springmvc.LoginSuccessHandler\"></bean>\n\t<bean id=\"userSecurityService\" class=\"springmvc.UserSecurityService\"></bean>\n</beans>\n\n```\n\n# Spring Security加密密码\n\n我们在存储用户数据的时候，肯定不会存储明文的密码。这个时候，我们可以配置security的密码加密方式（要和存储密码时的加密方式一致）。在`<security-authentication-provider>`标签内添加`<security:password-encoder hash=\"bcrypt\">`标签。bcrypt是一中加密方式：\n\n>    BCrypt 算法与 MD5/SHA 算法有一个很大的区别，每次生成的 hash 值都是不同的，就可以免除存储 salt，暴力破解起来也更困难。BCrypt 加密后的字符长度比较长，有60位，所以用户表中密码字段的长度，如果打算采用 BCrypt 加密存储，字段长度不得低于 68(需要前缀 `{bcrypt}`)。（彪哥）\n>\n>    \n\n```java\npackage springmvc.test;\n\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\npublic class PasswordEncode {\n\n\tpublic static void main(String[] args) {\n\n\t\tPasswordEncoder pe = new BCryptPasswordEncoder();\n\t\tString crypt = pe.encode(\"zhanggaofeng\");\n\t\tSystem.out.println(crypt);\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tSystem.out.println(pe.encode(\"zhanggaofeng\"));\n\t\t\tSystem.out.println(pe.matches(\"zhanggaofeng\", crypt));\n\t\t}\n\t}\n\n}\n\n```\n\n上面那个是bcrypt的使用方式\n\n修改后的spring-security.xml配置文件如下\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:security=\"http://www.springframework.org/schema/security\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\t\t\thttp://www.springframework.org/schema/security \n\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\">\n\n\t<!-- 一些不需要登录就可以访问的资源，取消验证，这样就省去了很多filter的拦截，提高程序效率 -->\n\t<security:http security=\"none\" pattern=\"/loginPage\"></security:http>\n\t<security:http auto-config=\"true\" use-expressions=\"false\">\n\t\t<security:intercept-url pattern=\"/admin\"\n\t\t\taccess=\"ROLE_ADMIN\" />\n\t\t<!-- 配置登录验证的一些信息 1.login-page:get请求登录页面的url 2.login-processing-url：post请求，登录页面提交的请求（点击登录后，表单提交的信息会被security默认的登录验证拦截器拦截，并 \n\t\t\t判断用户信息，处理完之后，才会进入到这个地方配置的url对应的controller方法中。） 3.default-target-url:当用户直接访问登录页面，登录成功后，跳转到该属性配置的url \n\t\t\t4.配置了authentication-successs-handler-ref 是登录验证成功后，跳转的handler，default-target-url会失效 -->\n\t\t<security:form-login login-page=\"/loginPage\"\n\t\t\tauthentication-success-handler-ref=\"loginSuccessHandler\"\n\t\t\tdefault-target-url=\"/\" authentication-failure-url=\"/login?error\"\n\t\t\tusername-parameter=\"username\" password-parameter=\"password\" />\n\t\t<!-- 配置注销登录的一些配置 1.logout-url：get请求，注销的url 2.logout-success-url:get请求，注销成功后访问的url -->\n\t\t<security:logout logout-url=\"/logout\"\n\t\t\tlogout-success-url=\"/login?logout\" />\n\t\t<!-- 登录成功，却没有权限的页面 error-page:没有权限访问的url -->\n\t\t<security:access-denied-handler\n\t\t\terror-page=\"/deny\" />\n\t\t<security:csrf disabled=\"true\" />\n\t</security:http>\n\t<security:authentication-manager>\n\t\t<security:authentication-provider\n\t\t\tuser-service-ref=\"userSecurityService\">\n\t\t\t<security:password-encoder hash=\"bcrypt\"></security:password-encoder>\n\t\t</security:authentication-provider>\n\t</security:authentication-manager>\n\t<bean id=\"loginSuccessHandler\" class=\"springmvc.LoginSuccessHandler\"></bean>\n\t<bean id=\"userSecurityService\" class=\"springmvc.UserSecurityService\"></bean>\n</beans>\n\n```\n\n`<security:password-encoder hash=\"bcrypt\"></security:password-encoder>`\n\n在数据源中存储的也应该是加密后的密码：\n\n``` java\nstatic {\n\t\t// 模拟数据源，可以是多种，如数据库，LDAP，从配置文件读取等\n\t\tusers.put(\"zhanggaofeng\", new UserSecurity(\"zhanggaofeng\", \"$2a$10$hWA4T4Zwxiz0TSg39XKFuOLe9tJxak2cCIYWKyjxv5SCXl/qnMvJG\", \"ROLE_ADMIN\"));\n\t\tusers.put(\"alice\", new UserSecurity(\"alice\", \"admin\", \"ROLE_USER\"));\n\t}\n```\n\n\n\n# 测试\n\n没有问题，具体的设计还要根据实际需求进行开发。","source":"_posts/security3.md","raw":"---\ntitle: Security 配置用户数据源\ndate: 2017-12-08 10:53:32\ntags: [security]\n---\n\n# 背景\n\n前面我们已经初步了解了Spring Security安全框架，并可以简单使用。但是之前的用户信息我们都是写在配置文件中。如果用户数量比较多了，或者用户信息经常变化，在写到配置文件中就不太现实，下面就讲一下用其他数据源来存储用户信息的情况。\n\n<!-- more -->\n\n# 模拟一下数据库\n\n接口\n\n```java\npackage springmvc.service;\n\nimport springmvc.pojo.User;\nimport springmvc.pojo.UserSecurity;\n\npublic interface UserService {\n\t\n\tvoid save(User user);\n\t\n\tUserSecurity findByName(String name);\n\n}\n\n```\n\n\n\n实现类\n\n```java\npackage springmvc.service.impl;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.springframework.stereotype.Service;\n\nimport springmvc.pojo.User;\nimport springmvc.pojo.UserSecurity;\nimport springmvc.service.UserService;\n\n@Service\npublic class UserServiceImpl implements UserService {\n\tprivate static Map<String, UserSecurity> users = new HashMap<String, UserSecurity>();\n\tstatic {\n\t\t// 模拟数据源，可以是多种，如数据库，LDAP，从配置文件读取等\n\t\tusers.put(\"admin\", new UserSecurity(\"admin\", \"admin\", \"ROLE_ADMIN\"));\n\t\tusers.put(\"alice\", new UserSecurity(\"alice\", \"admin\", \"ROLE_USER\"));\n\t}\n\n\tpublic UserServiceImpl() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\n\tpublic void save(User user) {\n\n\t\tSystem.out.println(user.toString());\n\t}\n\n\tpublic UserSecurity findByName(String name) {\n\t\t// TODO Auto-generated method stub\n\t\treturn users.get(name);\n\t}\n}\n\n```\n\n# 用户对象类 \n\n用户类需要继承org.springframework.security.core.userdetails.User\n\n```java\npackage springmvc.pojo;\n\nimport java.util.Collection;\nimport java.util.HashSet;\n\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.authority.AuthorityUtils;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class UserSecurity extends org.springframework.security.core.userdetails.User {\n\n\tprivate Long id;\n\tprivate String username;\n\tprivate String password;\n\n\tpublic UserSecurity() {\n\t\t// 父类不允许空的用户名、密码和权限，所以给个默认的，这样就可以用默认的构造函数创建 User 对象。\n\t\tsuper(\"non-exist-username\", \"\", (Collection<? extends GrantedAuthority>) new HashSet<Object>());\n\t}\n\t\n\t/**\n\t * \n\t * @param username 帐号\n\t * @param password 密码\n\t * @param roles 角色\n\t */\n\tpublic UserSecurity(String username,String password,String...roles) {\n\t\tthis(username,password,true,roles);\n\t}\n\n\t/**\n\t * \n\t * @param username 帐号\n\t * @param password 密码\n\t * @param enabled 是否禁用\n\t * @param roles 角色\n\t */\n\tpublic UserSecurity(String username, String password, boolean enabled, String... roles) {\n\t\tsuper(username, password, enabled, true, true, true, AuthorityUtils.createAuthorityList(roles));\n\t\tthis.username = username;\n\t\tthis.password = password;\n\n\t}\n\n}\n\n```\n\n# UserDetailsService\n\nUserDetailsService的作用是根据登录表单中的用户名查找用户信息用于身份验证。Spring Security中验证分为两部：1.身份验证  2.权限验证\n\n```java\npackage springmvc;\n\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\n\nimport springmvc.pojo.UserSecurity;\nimport springmvc.service.UserService;\nimport springmvc.service.impl.UserServiceImpl;\n\npublic class UserSecurityService implements UserDetailsService {\n\n\tprivate UserService us = new UserServiceImpl();\n\tpublic UserSecurityService() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\n\t/**\n\t * 根据用户提交的username查找用户信息，如密码，权限等信息\n\t * Spring Security根据查找到的用户密码和加密后的用户输入的密码进行比较，用来身份验证\n\t * 然后使用用户的角色和页面访问需要的角色对比，如果成功则验证成功。\n\t */\n\tpublic UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n\t\t// TODO Auto-generated method stub\n\t\tUserSecurity user = us.findByName(username);\n\t\tif(null == user) {\n\t\t\t throw new UsernameNotFoundException(username + \" not found!\");\n\t\t}\n\t\treturn user;\n\t}\n\n}\n\n```\n\n# 配置用户信息来源（spring-security.xml）\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:security=\"http://www.springframework.org/schema/security\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\t\t\thttp://www.springframework.org/schema/security \n\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\">\n\n\t<!-- 一些不需要登录就可以访问的资源，取消验证，这样就省去了很多filter的拦截，提高程序效率 -->\n\t<security:http security=\"none\" pattern=\"/loginPage\"></security:http>\n\t<security:http auto-config=\"true\" use-expressions=\"false\">\n\t\t<security:intercept-url pattern=\"/admin\"\n\t\t\taccess=\"ROLE_ADMIN\" />\n\t\t<!-- 配置登录验证的一些信息 1.login-page:get请求登录页面的url 2.login-processing-url：post请求，登录页面提交的请求（点击登录后，表单提交的信息会被security默认的登录验证拦截器拦截，并 \n\t\t\t判断用户信息，处理完之后，才会进入到这个地方配置的url对应的controller方法中。） 3.default-target-url:当用户直接访问登录页面，登录成功后，跳转到该属性配置的url \n\t\t\t4.配置了authentication-successs-handler-ref 是登录验证成功后，跳转的handler，default-target-url会失效 -->\n\t\t<security:form-login login-page=\"/loginPage\"\n\t\t\tauthentication-success-handler-ref=\"loginSuccessHandler\"\n\t\t\tdefault-target-url=\"/\" authentication-failure-url=\"/login?error\"\n\t\t\tusername-parameter=\"username\" password-parameter=\"password\" />\n\t\t<!-- 配置注销登录的一些配置 1.logout-url：get请求，注销的url 2.logout-success-url:get请求，注销成功后访问的url -->\n\t\t<security:logout logout-url=\"/logout\"\n\t\t\tlogout-success-url=\"/login?logout\" />\n\t\t<!-- 登录成功，却没有权限的页面 error-page:没有权限访问的url -->\n\t\t<security:access-denied-handler\n\t\t\terror-page=\"/deny\" />\n\t\t<security:csrf disabled=\"true\" />\n\t</security:http>\n    <!-- user-service-ref 配置用户数据来源信息 -->\n\t<security:authentication-manager>\n\t\t<security:authentication-provider\n\t\t\tuser-service-ref=\"userSecurityService\">\n\t\t</security:authentication-provider>\n\t</security:authentication-manager>\n\t<bean id=\"loginSuccessHandler\" class=\"springmvc.LoginSuccessHandler\"></bean>\n\t<bean id=\"userSecurityService\" class=\"springmvc.UserSecurityService\"></bean>\n</beans>\n\n```\n\n# Spring Security加密密码\n\n我们在存储用户数据的时候，肯定不会存储明文的密码。这个时候，我们可以配置security的密码加密方式（要和存储密码时的加密方式一致）。在`<security-authentication-provider>`标签内添加`<security:password-encoder hash=\"bcrypt\">`标签。bcrypt是一中加密方式：\n\n>    BCrypt 算法与 MD5/SHA 算法有一个很大的区别，每次生成的 hash 值都是不同的，就可以免除存储 salt，暴力破解起来也更困难。BCrypt 加密后的字符长度比较长，有60位，所以用户表中密码字段的长度，如果打算采用 BCrypt 加密存储，字段长度不得低于 68(需要前缀 `{bcrypt}`)。（彪哥）\n>\n>    \n\n```java\npackage springmvc.test;\n\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\npublic class PasswordEncode {\n\n\tpublic static void main(String[] args) {\n\n\t\tPasswordEncoder pe = new BCryptPasswordEncoder();\n\t\tString crypt = pe.encode(\"zhanggaofeng\");\n\t\tSystem.out.println(crypt);\n\t\tfor (int i = 0; i < 5; i++) {\n\t\t\tSystem.out.println(pe.encode(\"zhanggaofeng\"));\n\t\t\tSystem.out.println(pe.matches(\"zhanggaofeng\", crypt));\n\t\t}\n\t}\n\n}\n\n```\n\n上面那个是bcrypt的使用方式\n\n修改后的spring-security.xml配置文件如下\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:security=\"http://www.springframework.org/schema/security\"\n\txsi:schemaLocation=\"http://www.springframework.org/schema/beans\n\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd\n\t\t\t\t\t\thttp://www.springframework.org/schema/security \n\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\">\n\n\t<!-- 一些不需要登录就可以访问的资源，取消验证，这样就省去了很多filter的拦截，提高程序效率 -->\n\t<security:http security=\"none\" pattern=\"/loginPage\"></security:http>\n\t<security:http auto-config=\"true\" use-expressions=\"false\">\n\t\t<security:intercept-url pattern=\"/admin\"\n\t\t\taccess=\"ROLE_ADMIN\" />\n\t\t<!-- 配置登录验证的一些信息 1.login-page:get请求登录页面的url 2.login-processing-url：post请求，登录页面提交的请求（点击登录后，表单提交的信息会被security默认的登录验证拦截器拦截，并 \n\t\t\t判断用户信息，处理完之后，才会进入到这个地方配置的url对应的controller方法中。） 3.default-target-url:当用户直接访问登录页面，登录成功后，跳转到该属性配置的url \n\t\t\t4.配置了authentication-successs-handler-ref 是登录验证成功后，跳转的handler，default-target-url会失效 -->\n\t\t<security:form-login login-page=\"/loginPage\"\n\t\t\tauthentication-success-handler-ref=\"loginSuccessHandler\"\n\t\t\tdefault-target-url=\"/\" authentication-failure-url=\"/login?error\"\n\t\t\tusername-parameter=\"username\" password-parameter=\"password\" />\n\t\t<!-- 配置注销登录的一些配置 1.logout-url：get请求，注销的url 2.logout-success-url:get请求，注销成功后访问的url -->\n\t\t<security:logout logout-url=\"/logout\"\n\t\t\tlogout-success-url=\"/login?logout\" />\n\t\t<!-- 登录成功，却没有权限的页面 error-page:没有权限访问的url -->\n\t\t<security:access-denied-handler\n\t\t\terror-page=\"/deny\" />\n\t\t<security:csrf disabled=\"true\" />\n\t</security:http>\n\t<security:authentication-manager>\n\t\t<security:authentication-provider\n\t\t\tuser-service-ref=\"userSecurityService\">\n\t\t\t<security:password-encoder hash=\"bcrypt\"></security:password-encoder>\n\t\t</security:authentication-provider>\n\t</security:authentication-manager>\n\t<bean id=\"loginSuccessHandler\" class=\"springmvc.LoginSuccessHandler\"></bean>\n\t<bean id=\"userSecurityService\" class=\"springmvc.UserSecurityService\"></bean>\n</beans>\n\n```\n\n`<security:password-encoder hash=\"bcrypt\"></security:password-encoder>`\n\n在数据源中存储的也应该是加密后的密码：\n\n``` java\nstatic {\n\t\t// 模拟数据源，可以是多种，如数据库，LDAP，从配置文件读取等\n\t\tusers.put(\"zhanggaofeng\", new UserSecurity(\"zhanggaofeng\", \"$2a$10$hWA4T4Zwxiz0TSg39XKFuOLe9tJxak2cCIYWKyjxv5SCXl/qnMvJG\", \"ROLE_ADMIN\"));\n\t\tusers.put(\"alice\", new UserSecurity(\"alice\", \"admin\", \"ROLE_USER\"));\n\t}\n```\n\n\n\n# 测试\n\n没有问题，具体的设计还要根据实际需求进行开发。","slug":"security3","published":1,"updated":"2022-11-24T13:38:45.599Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1f500184ovk0r4sv4r8","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>前面我们已经初步了解了Spring Security安全框架，并可以简单使用。但是之前的用户信息我们都是写在配置文件中。如果用户数量比较多了，或者用户信息经常变化，在写到配置文件中就不太现实，下面就讲一下用其他数据源来存储用户信息的情况。</p>\n<a id=\"more\"></a>\n<h1 id=\"模拟一下数据库\"><a href=\"#模拟一下数据库\" class=\"headerlink\" title=\"模拟一下数据库\"></a>模拟一下数据库</h1><p>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.UserSecurity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\">UserSecurity <span class=\"title\">findByName</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.UserSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.service.UserService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, UserSecurity&gt; users = <span class=\"keyword\">new</span> HashMap&lt;String, UserSecurity&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 模拟数据源，可以是多种，如数据库，LDAP，从配置文件读取等</span></span><br><span class=\"line\">\t\tusers.put(<span class=\"string\">\"admin\"</span>, <span class=\"keyword\">new</span> UserSecurity(<span class=\"string\">\"admin\"</span>, <span class=\"string\">\"admin\"</span>, <span class=\"string\">\"ROLE_ADMIN\"</span>));</span><br><span class=\"line\">\t\tusers.put(<span class=\"string\">\"alice\"</span>, <span class=\"keyword\">new</span> UserSecurity(<span class=\"string\">\"alice\"</span>, <span class=\"string\">\"admin\"</span>, <span class=\"string\">\"ROLE_USER\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserServiceImpl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(user.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> UserSecurity <span class=\"title\">findByName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> users.get(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"用户对象类\"><a href=\"#用户对象类\" class=\"headerlink\" title=\"用户对象类\"></a>用户对象类</h1><p>用户类需要继承org.springframework.security.core.userdetails.User</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.authority.AuthorityUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Setter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSecurity</span> <span class=\"keyword\">extends</span> <span class=\"title\">org</span>.<span class=\"title\">springframework</span>.<span class=\"title\">security</span>.<span class=\"title\">core</span>.<span class=\"title\">userdetails</span>.<span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserSecurity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 父类不允许空的用户名、密码和权限，所以给个默认的，这样就可以用默认的构造函数创建 User 对象。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(<span class=\"string\">\"non-exist-username\"</span>, <span class=\"string\">\"\"</span>, (Collection&lt;? extends GrantedAuthority&gt;) <span class=\"keyword\">new</span> HashSet&lt;Object&gt;());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> username 帐号</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> password 密码</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> roles 角色</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserSecurity</span><span class=\"params\">(String username,String password,String...roles)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(username,password,<span class=\"keyword\">true</span>,roles);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> username 帐号</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> password 密码</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> enabled 是否禁用</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> roles 角色</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserSecurity</span><span class=\"params\">(String username, String password, <span class=\"keyword\">boolean</span> enabled, String... roles)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(username, password, enabled, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, AuthorityUtils.createAuthorityList(roles));</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"UserDetailsService\"><a href=\"#UserDetailsService\" class=\"headerlink\" title=\"UserDetailsService\"></a>UserDetailsService</h1><p>UserDetailsService的作用是根据登录表单中的用户名查找用户信息用于身份验证。Spring Security中验证分为两部：1.身份验证  2.权限验证</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.UserSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.service.impl.UserServiceImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSecurityService</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetailsService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService us = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserSecurityService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 根据用户提交的username查找用户信息，如密码，权限等信息</span></span><br><span class=\"line\"><span class=\"comment\">\t * Spring Security根据查找到的用户密码和加密后的用户输入的密码进行比较，用来身份验证</span></span><br><span class=\"line\"><span class=\"comment\">\t * 然后使用用户的角色和页面访问需要的角色对比，如果成功则验证成功。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> UserDetails <span class=\"title\">loadUserByUsername</span><span class=\"params\">(String username)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tUserSecurity user = us.findByName(username);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == user) &#123;</span><br><span class=\"line\">\t\t\t <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UsernameNotFoundException(username + <span class=\"string\">\" not found!\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> user;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置用户信息来源（spring-security-xml）\"><a href=\"#配置用户信息来源（spring-security-xml）\" class=\"headerlink\" title=\"配置用户信息来源（spring-security.xml）\"></a>配置用户信息来源（spring-security.xml）</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:security</span>=<span class=\"string\">\"http://www.springframework.org/schema/security\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 一些不需要登录就可以访问的资源，取消验证，这样就省去了很多filter的拦截，提高程序效率 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">security</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/loginPage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">access</span>=<span class=\"string\">\"ROLE_ADMIN\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置登录验证的一些信息 1.login-page:get请求登录页面的url 2.login-processing-url：post请求，登录页面提交的请求（点击登录后，表单提交的信息会被security默认的登录验证拦截器拦截，并 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t判断用户信息，处理完之后，才会进入到这个地方配置的url对应的controller方法中。） 3.default-target-url:当用户直接访问登录页面，登录成功后，跳转到该属性配置的url </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t4.配置了authentication-successs-handler-ref 是登录验证成功后，跳转的handler，default-target-url会失效 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:form-login</span> <span class=\"attr\">login-page</span>=<span class=\"string\">\"/loginPage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">authentication-success-handler-ref</span>=<span class=\"string\">\"loginSuccessHandler\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">default-target-url</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">authentication-failure-url</span>=<span class=\"string\">\"/login?error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">username-parameter</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">password-parameter</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置注销登录的一些配置 1.logout-url：get请求，注销的url 2.logout-success-url:get请求，注销成功后访问的url --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:logout</span> <span class=\"attr\">logout-url</span>=<span class=\"string\">\"/logout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">logout-success-url</span>=<span class=\"string\">\"/login?logout\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 登录成功，却没有权限的页面 error-page:没有权限访问的url --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:access-denied-handler</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">error-page</span>=<span class=\"string\">\"/deny\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:csrf</span> <span class=\"attr\">disabled</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- user-service-ref 配置用户数据来源信息 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">user-service-ref</span>=<span class=\"string\">\"userSecurityService\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginSuccessHandler\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"springmvc.LoginSuccessHandler\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userSecurityService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"springmvc.UserSecurityService\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Spring-Security加密密码\"><a href=\"#Spring-Security加密密码\" class=\"headerlink\" title=\"Spring Security加密密码\"></a>Spring Security加密密码</h1><p>我们在存储用户数据的时候，肯定不会存储明文的密码。这个时候，我们可以配置security的密码加密方式（要和存储密码时的加密方式一致）。在<code>&lt;security-authentication-provider&gt;</code>标签内添加<code>&lt;security:password-encoder hash=&quot;bcrypt&quot;&gt;</code>标签。bcrypt是一中加密方式：</p>\n<blockquote>\n<p>   BCrypt 算法与 MD5/SHA 算法有一个很大的区别，每次生成的 hash 值都是不同的，就可以免除存储 salt，暴力破解起来也更困难。BCrypt 加密后的字符长度比较长，有60位，所以用户表中密码字段的长度，如果打算采用 BCrypt 加密存储，字段长度不得低于 68(需要前缀 <code>{bcrypt}</code>)。（彪哥）</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PasswordEncode</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPasswordEncoder pe = <span class=\"keyword\">new</span> BCryptPasswordEncoder();</span><br><span class=\"line\">\t\tString crypt = pe.encode(<span class=\"string\">\"zhanggaofeng\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(crypt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(pe.encode(<span class=\"string\">\"zhanggaofeng\"</span>));</span><br><span class=\"line\">\t\t\tSystem.out.println(pe.matches(<span class=\"string\">\"zhanggaofeng\"</span>, crypt));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面那个是bcrypt的使用方式</p>\n<p>修改后的spring-security.xml配置文件如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:security</span>=<span class=\"string\">\"http://www.springframework.org/schema/security\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 一些不需要登录就可以访问的资源，取消验证，这样就省去了很多filter的拦截，提高程序效率 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">security</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/loginPage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">access</span>=<span class=\"string\">\"ROLE_ADMIN\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置登录验证的一些信息 1.login-page:get请求登录页面的url 2.login-processing-url：post请求，登录页面提交的请求（点击登录后，表单提交的信息会被security默认的登录验证拦截器拦截，并 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t判断用户信息，处理完之后，才会进入到这个地方配置的url对应的controller方法中。） 3.default-target-url:当用户直接访问登录页面，登录成功后，跳转到该属性配置的url </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t4.配置了authentication-successs-handler-ref 是登录验证成功后，跳转的handler，default-target-url会失效 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:form-login</span> <span class=\"attr\">login-page</span>=<span class=\"string\">\"/loginPage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">authentication-success-handler-ref</span>=<span class=\"string\">\"loginSuccessHandler\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">default-target-url</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">authentication-failure-url</span>=<span class=\"string\">\"/login?error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">username-parameter</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">password-parameter</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置注销登录的一些配置 1.logout-url：get请求，注销的url 2.logout-success-url:get请求，注销成功后访问的url --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:logout</span> <span class=\"attr\">logout-url</span>=<span class=\"string\">\"/logout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">logout-success-url</span>=<span class=\"string\">\"/login?logout\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 登录成功，却没有权限的页面 error-page:没有权限访问的url --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:access-denied-handler</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">error-page</span>=<span class=\"string\">\"/deny\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:csrf</span> <span class=\"attr\">disabled</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">user-service-ref</span>=<span class=\"string\">\"userSecurityService\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">security:password-encoder</span> <span class=\"attr\">hash</span>=<span class=\"string\">\"bcrypt\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">security:password-encoder</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginSuccessHandler\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"springmvc.LoginSuccessHandler\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userSecurityService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"springmvc.UserSecurityService\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;security:password-encoder hash=&quot;bcrypt&quot;&gt;&lt;/security:password-encoder&gt;</code></p>\n<p>在数据源中存储的也应该是加密后的密码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 模拟数据源，可以是多种，如数据库，LDAP，从配置文件读取等</span></span><br><span class=\"line\">\t\tusers.put(<span class=\"string\">\"zhanggaofeng\"</span>, <span class=\"keyword\">new</span> UserSecurity(<span class=\"string\">\"zhanggaofeng\"</span>, <span class=\"string\">\"$2a$10$hWA4T4Zwxiz0TSg39XKFuOLe9tJxak2cCIYWKyjxv5SCXl/qnMvJG\"</span>, <span class=\"string\">\"ROLE_ADMIN\"</span>));</span><br><span class=\"line\">\t\tusers.put(<span class=\"string\">\"alice\"</span>, <span class=\"keyword\">new</span> UserSecurity(<span class=\"string\">\"alice\"</span>, <span class=\"string\">\"admin\"</span>, <span class=\"string\">\"ROLE_USER\"</span>));</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>没有问题，具体的设计还要根据实际需求进行开发。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>前面我们已经初步了解了Spring Security安全框架，并可以简单使用。但是之前的用户信息我们都是写在配置文件中。如果用户数量比较多了，或者用户信息经常变化，在写到配置文件中就不太现实，下面就讲一下用其他数据源来存储用户信息的情况。</p>","more":"<h1 id=\"模拟一下数据库\"><a href=\"#模拟一下数据库\" class=\"headerlink\" title=\"模拟一下数据库\"></a>模拟一下数据库</h1><p>接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.UserSecurity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span></span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\">UserSecurity <span class=\"title\">findByName</span><span class=\"params\">(String name)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashMap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.User;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.UserSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.service.UserService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Map&lt;String, UserSecurity&gt; users = <span class=\"keyword\">new</span> HashMap&lt;String, UserSecurity&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 模拟数据源，可以是多种，如数据库，LDAP，从配置文件读取等</span></span><br><span class=\"line\">\t\tusers.put(<span class=\"string\">\"admin\"</span>, <span class=\"keyword\">new</span> UserSecurity(<span class=\"string\">\"admin\"</span>, <span class=\"string\">\"admin\"</span>, <span class=\"string\">\"ROLE_ADMIN\"</span>));</span><br><span class=\"line\">\t\tusers.put(<span class=\"string\">\"alice\"</span>, <span class=\"keyword\">new</span> UserSecurity(<span class=\"string\">\"alice\"</span>, <span class=\"string\">\"admin\"</span>, <span class=\"string\">\"ROLE_USER\"</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserServiceImpl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">(User user)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(user.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> UserSecurity <span class=\"title\">findByName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> users.get(name);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"用户对象类\"><a href=\"#用户对象类\" class=\"headerlink\" title=\"用户对象类\"></a>用户对象类</h1><p>用户类需要继承org.springframework.security.core.userdetails.User</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Collection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.HashSet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.authority.AuthorityUtils;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Getter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.Setter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Getter</span></span><br><span class=\"line\"><span class=\"meta\">@Setter</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSecurity</span> <span class=\"keyword\">extends</span> <span class=\"title\">org</span>.<span class=\"title\">springframework</span>.<span class=\"title\">security</span>.<span class=\"title\">core</span>.<span class=\"title\">userdetails</span>.<span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String password;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserSecurity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 父类不允许空的用户名、密码和权限，所以给个默认的，这样就可以用默认的构造函数创建 User 对象。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(<span class=\"string\">\"non-exist-username\"</span>, <span class=\"string\">\"\"</span>, (Collection&lt;? extends GrantedAuthority&gt;) <span class=\"keyword\">new</span> HashSet&lt;Object&gt;());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> username 帐号</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> password 密码</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> roles 角色</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserSecurity</span><span class=\"params\">(String username,String password,String...roles)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>(username,password,<span class=\"keyword\">true</span>,roles);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> username 帐号</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> password 密码</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> enabled 是否禁用</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> roles 角色</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserSecurity</span><span class=\"params\">(String username, String password, <span class=\"keyword\">boolean</span> enabled, String... roles)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">super</span>(username, password, enabled, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, <span class=\"keyword\">true</span>, AuthorityUtils.createAuthorityList(roles));</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.username = username;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.password = password;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"UserDetailsService\"><a href=\"#UserDetailsService\" class=\"headerlink\" title=\"UserDetailsService\"></a>UserDetailsService</h1><p>UserDetailsService的作用是根据登录表单中的用户名查找用户信息用于身份验证。Spring Security中验证分为两部：1.身份验证  2.权限验证</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.UserSecurity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.service.UserService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.service.impl.UserServiceImpl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSecurityService</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserDetailsService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> UserService us = <span class=\"keyword\">new</span> UserServiceImpl();</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserSecurityService</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 根据用户提交的username查找用户信息，如密码，权限等信息</span></span><br><span class=\"line\"><span class=\"comment\">\t * Spring Security根据查找到的用户密码和加密后的用户输入的密码进行比较，用来身份验证</span></span><br><span class=\"line\"><span class=\"comment\">\t * 然后使用用户的角色和页面访问需要的角色对比，如果成功则验证成功。</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> UserDetails <span class=\"title\">loadUserByUsername</span><span class=\"params\">(String username)</span> <span class=\"keyword\">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated method stub</span></span><br><span class=\"line\">\t\tUserSecurity user = us.findByName(username);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == user) &#123;</span><br><span class=\"line\">\t\t\t <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> UsernameNotFoundException(username + <span class=\"string\">\" not found!\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> user;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置用户信息来源（spring-security-xml）\"><a href=\"#配置用户信息来源（spring-security-xml）\" class=\"headerlink\" title=\"配置用户信息来源（spring-security.xml）\"></a>配置用户信息来源（spring-security.xml）</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:security</span>=<span class=\"string\">\"http://www.springframework.org/schema/security\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 一些不需要登录就可以访问的资源，取消验证，这样就省去了很多filter的拦截，提高程序效率 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">security</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/loginPage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">access</span>=<span class=\"string\">\"ROLE_ADMIN\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置登录验证的一些信息 1.login-page:get请求登录页面的url 2.login-processing-url：post请求，登录页面提交的请求（点击登录后，表单提交的信息会被security默认的登录验证拦截器拦截，并 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t判断用户信息，处理完之后，才会进入到这个地方配置的url对应的controller方法中。） 3.default-target-url:当用户直接访问登录页面，登录成功后，跳转到该属性配置的url </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t4.配置了authentication-successs-handler-ref 是登录验证成功后，跳转的handler，default-target-url会失效 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:form-login</span> <span class=\"attr\">login-page</span>=<span class=\"string\">\"/loginPage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">authentication-success-handler-ref</span>=<span class=\"string\">\"loginSuccessHandler\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">default-target-url</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">authentication-failure-url</span>=<span class=\"string\">\"/login?error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">username-parameter</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">password-parameter</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置注销登录的一些配置 1.logout-url：get请求，注销的url 2.logout-success-url:get请求，注销成功后访问的url --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:logout</span> <span class=\"attr\">logout-url</span>=<span class=\"string\">\"/logout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">logout-success-url</span>=<span class=\"string\">\"/login?logout\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 登录成功，却没有权限的页面 error-page:没有权限访问的url --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:access-denied-handler</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">error-page</span>=<span class=\"string\">\"/deny\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:csrf</span> <span class=\"attr\">disabled</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- user-service-ref 配置用户数据来源信息 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">user-service-ref</span>=<span class=\"string\">\"userSecurityService\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginSuccessHandler\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"springmvc.LoginSuccessHandler\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userSecurityService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"springmvc.UserSecurityService\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Spring-Security加密密码\"><a href=\"#Spring-Security加密密码\" class=\"headerlink\" title=\"Spring Security加密密码\"></a>Spring Security加密密码</h1><p>我们在存储用户数据的时候，肯定不会存储明文的密码。这个时候，我们可以配置security的密码加密方式（要和存储密码时的加密方式一致）。在<code>&lt;security-authentication-provider&gt;</code>标签内添加<code>&lt;security:password-encoder hash=&quot;bcrypt&quot;&gt;</code>标签。bcrypt是一中加密方式：</p>\n<blockquote>\n<p>   BCrypt 算法与 MD5/SHA 算法有一个很大的区别，每次生成的 hash 值都是不同的，就可以免除存储 salt，暴力破解起来也更困难。BCrypt 加密后的字符长度比较长，有60位，所以用户表中密码字段的长度，如果打算采用 BCrypt 加密存储，字段长度不得低于 68(需要前缀 <code>{bcrypt}</code>)。（彪哥）</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PasswordEncode</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tPasswordEncoder pe = <span class=\"keyword\">new</span> BCryptPasswordEncoder();</span><br><span class=\"line\">\t\tString crypt = pe.encode(<span class=\"string\">\"zhanggaofeng\"</span>);</span><br><span class=\"line\">\t\tSystem.out.println(crypt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(pe.encode(<span class=\"string\">\"zhanggaofeng\"</span>));</span><br><span class=\"line\">\t\t\tSystem.out.println(pe.matches(<span class=\"string\">\"zhanggaofeng\"</span>, crypt));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面那个是bcrypt的使用方式</p>\n<p>修改后的spring-security.xml配置文件如下</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:security</span>=<span class=\"string\">\"http://www.springframework.org/schema/security\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security </span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">\t\t\t\t\t\thttp://www.springframework.org/schema/security/spring-security-4.1.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 一些不需要登录就可以访问的资源，取消验证，这样就省去了很多filter的拦截，提高程序效率 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">security</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/loginPage\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:http</span> <span class=\"attr\">auto-config</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">use-expressions</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:intercept-url</span> <span class=\"attr\">pattern</span>=<span class=\"string\">\"/admin\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">access</span>=<span class=\"string\">\"ROLE_ADMIN\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置登录验证的一些信息 1.login-page:get请求登录页面的url 2.login-processing-url：post请求，登录页面提交的请求（点击登录后，表单提交的信息会被security默认的登录验证拦截器拦截，并 </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t判断用户信息，处理完之后，才会进入到这个地方配置的url对应的controller方法中。） 3.default-target-url:当用户直接访问登录页面，登录成功后，跳转到该属性配置的url </span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t4.配置了authentication-successs-handler-ref 是登录验证成功后，跳转的handler，default-target-url会失效 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:form-login</span> <span class=\"attr\">login-page</span>=<span class=\"string\">\"/loginPage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">authentication-success-handler-ref</span>=<span class=\"string\">\"loginSuccessHandler\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">default-target-url</span>=<span class=\"string\">\"/\"</span> <span class=\"attr\">authentication-failure-url</span>=<span class=\"string\">\"/login?error\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">username-parameter</span>=<span class=\"string\">\"username\"</span> <span class=\"attr\">password-parameter</span>=<span class=\"string\">\"password\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 配置注销登录的一些配置 1.logout-url：get请求，注销的url 2.logout-success-url:get请求，注销成功后访问的url --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:logout</span> <span class=\"attr\">logout-url</span>=<span class=\"string\">\"/logout\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">logout-success-url</span>=<span class=\"string\">\"/login?logout\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 登录成功，却没有权限的页面 error-page:没有权限访问的url --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:access-denied-handler</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">error-page</span>=<span class=\"string\">\"/deny\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:csrf</span> <span class=\"attr\">disabled</span>=<span class=\"string\">\"true\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:http</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">security:authentication-provider</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">user-service-ref</span>=<span class=\"string\">\"userSecurityService\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">security:password-encoder</span> <span class=\"attr\">hash</span>=<span class=\"string\">\"bcrypt\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">security:password-encoder</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-provider</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security:authentication-manager</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"loginSuccessHandler\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"springmvc.LoginSuccessHandler\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userSecurityService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"springmvc.UserSecurityService\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>&lt;security:password-encoder hash=&quot;bcrypt&quot;&gt;&lt;/security:password-encoder&gt;</code></p>\n<p>在数据源中存储的也应该是加密后的密码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 模拟数据源，可以是多种，如数据库，LDAP，从配置文件读取等</span></span><br><span class=\"line\">\t\tusers.put(<span class=\"string\">\"zhanggaofeng\"</span>, <span class=\"keyword\">new</span> UserSecurity(<span class=\"string\">\"zhanggaofeng\"</span>, <span class=\"string\">\"$2a$10$hWA4T4Zwxiz0TSg39XKFuOLe9tJxak2cCIYWKyjxv5SCXl/qnMvJG\"</span>, <span class=\"string\">\"ROLE_ADMIN\"</span>));</span><br><span class=\"line\">\t\tusers.put(<span class=\"string\">\"alice\"</span>, <span class=\"keyword\">new</span> UserSecurity(<span class=\"string\">\"alice\"</span>, <span class=\"string\">\"admin\"</span>, <span class=\"string\">\"ROLE_USER\"</span>));</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p>没有问题，具体的设计还要根据实际需求进行开发。</p>"},{"title":"All Documents","date":"2015-06-05T22:06:06.000Z","_content":"\n\n## hexo\n* [Hello World](/hello-world)\n\n## java\n* [hello](/hello)\n\n## maven\n* [eclipse 创建maven项目，并添加spring依赖](/eclipse-create-Maven-Project)\n\n## spring\n* [eclipse 创建maven项目，并添加spring依赖](/eclipse-create-Maven-Project)\n* [spring aop](/spring-aop)\n","source":"_posts/sitemap.md","raw":"---\ntitle: All Documents\ndate: 2015-06-06 06:06:06\ntags: Index\n---\n\n\n## hexo\n* [Hello World](/hello-world)\n\n## java\n* [hello](/hello)\n\n## maven\n* [eclipse 创建maven项目，并添加spring依赖](/eclipse-create-Maven-Project)\n\n## spring\n* [eclipse 创建maven项目，并添加spring依赖](/eclipse-create-Maven-Project)\n* [spring aop](/spring-aop)\n","slug":"sitemap","published":1,"updated":"2022-11-24T13:38:45.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1f7001a4ovk1ba1nva5","content":"<h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h2><ul>\n<li><a href=\"/hello-world\">Hello World</a></li>\n</ul>\n<h2 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h2><ul>\n<li><a href=\"/hello\">hello</a></li>\n</ul>\n<h2 id=\"maven\"><a href=\"#maven\" class=\"headerlink\" title=\"maven\"></a>maven</h2><ul>\n<li><a href=\"/eclipse-create-Maven-Project\">eclipse 创建maven项目，并添加spring依赖</a></li>\n</ul>\n<h2 id=\"spring\"><a href=\"#spring\" class=\"headerlink\" title=\"spring\"></a>spring</h2><ul>\n<li><a href=\"/eclipse-create-Maven-Project\">eclipse 创建maven项目，并添加spring依赖</a></li>\n<li><a href=\"/spring-aop\">spring aop</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h2><ul>\n<li><a href=\"/hello-world\">Hello World</a></li>\n</ul>\n<h2 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h2><ul>\n<li><a href=\"/hello\">hello</a></li>\n</ul>\n<h2 id=\"maven\"><a href=\"#maven\" class=\"headerlink\" title=\"maven\"></a>maven</h2><ul>\n<li><a href=\"/eclipse-create-Maven-Project\">eclipse 创建maven项目，并添加spring依赖</a></li>\n</ul>\n<h2 id=\"spring\"><a href=\"#spring\" class=\"headerlink\" title=\"spring\"></a>spring</h2><ul>\n<li><a href=\"/eclipse-create-Maven-Project\">eclipse 创建maven项目，并添加spring依赖</a></li>\n<li><a href=\"/spring-aop\">spring aop</a></li>\n</ul>\n"},{"title":"偶然的收获java实体类简化","date":"2017-07-27T06:23:15.000Z","_content":"\n今天编写实体bean的时候，正好一位大拿从身后飘过，说：来，我教你一种可以不写set，get的方法。当时还在想，还有这么好的事。\n\n    原来，彪哥用了Lombok，其实是一个开源的jar包，引入包，使用包中提供的注解，就可以不用写set，get方法了。其实是javac的一个插件，当我们写好的代码在编译的过程中，javac会扫描带有该注解的实体类，并自动生成set，get方法到class文件中，因此和你自己写的set，get方法一样，也不会影响性能，因为他是在编译阶段完成的。\n\n    网上也有很多介绍Lombok的内容，我认为自己也整理一套吧。\n\n <!-- more -->\n\n  ** 下载安装 **\n\n    lombok 的官方网址：[http://projectlombok.org/](http://projectlombok.org/)  可以下载jar包\n\n    1. 双击下载下来的 JAR 包安装 lombok\n           我选择这种方式安装的时候提示没有发现任何 IDE，所以我没安装成功，我是手动安装的。如果你想以这种方式安装，请参考官网的视频。\n       　2.eclipse / myeclipse 手动安装 lombok\n    2. 将 lombok.jar 复制到 myeclipse.ini / eclipse.ini 所在的文件夹目录下\n    3. 打开 eclipse.ini / myeclipse.ini，在最后面插入以下两行并保存：\n               -Xbootclasspath/a:lombok.jar\n               -javaagent:lombok.jar\n           3.重启 eclipse / myeclipse\n\n   以上步骤我都做完之后，依然提示找不到@Getter注解，我试着把jar包直接添加到项目的lib目录下，成功了。\n\n  \n\n    **测试**\n\n```\npackage com.entry;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class Person {\n\n    private int id;\n    private String name;\n\n    public Person() {\n\n    }\n\n    public Person(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"编号：\" + id + \" 姓名：\" + name;\n    }\n\n    public static void main(String[] args) {\n        Person per = new Person();\n        per.setId(123);\n        per.setName(\"张三疯\");\n        System.out.println(per.toString());// 编号：123 姓名：张三疯\n        \n        Person per2 = new Person(124, \"李二蛋\");\n        System.out.println(\"编号：\"+per2.getId()+\" 姓名：\"+per2.getName());//编号：124 姓名：李二蛋\n    }\n\n}\n```\n\n　　想想，如果这个类有那么50，60个属性的话，得有多少个set，get方法。\n\n \n\n当然一些特殊情况，我们需要在调用set或者get方法的时候，需要做特殊处理的时候，我们也可以自己编写set，get方法，这个时候Lombok便不再为该属性添加set或者get方法\n\n```\npackage com.entry;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class Person {\n\n    private int id;\n    private String name;\n\n    // 自己写了，lombok将不再生成该方法\n    public void setName(String name) {\n        this.name = name + \"你好!\";\n    }\n\n    public int getId() {\n        return id + 10000;\n    }\n\n    public Person() {\n\n    }\n\n    public Person(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"编号：\" + id + \" 姓名：\" + name;\n    }\n\n    public static void main(String[] args) {\n        Person per = new Person();\n        per.setId(123);\n        per.setName(\"张三疯\");\n        System.out.println(per.toString());// 编号：123 姓名：张三疯你好!\n\n        Person per2 = new Person(124, \"李二蛋\");\n        System.out.println(\"编号：\" + per2.getId() + \" 姓名：\" + per2.getName());//编号：10124 姓名：李二蛋\n    }\n\n}\n```\n\n \n\n \n\n    **lombok 注解**：\n    lombok 提供的注解不多，可以参考官方视频的讲解和官方文档。\n    Lombok 注解在线帮助文档：[http://projectlombok.org/features/index.](http://projectlombok.org/features/index.html)    下面介绍几个我常用的 lombok 注解：\n        @Data   ：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法\n        @Setter：注解在属性上；为属性提供 setting 方法\n        @Getter：注解在属性上；为属性提供 getting 方法\n        @Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象\n        @NoArgsConstructor：注解在类上；为类提供一个无参的构造方法\n        @AllArgsConstructor：注解在类上；为类提供一个全参的构造方法","source":"_posts/simplified.md","raw":"---\ntitle: 偶然的收获java实体类简化\ndate: 2017-07-27 14:23:15\ntags: java\n---\n\n今天编写实体bean的时候，正好一位大拿从身后飘过，说：来，我教你一种可以不写set，get的方法。当时还在想，还有这么好的事。\n\n    原来，彪哥用了Lombok，其实是一个开源的jar包，引入包，使用包中提供的注解，就可以不用写set，get方法了。其实是javac的一个插件，当我们写好的代码在编译的过程中，javac会扫描带有该注解的实体类，并自动生成set，get方法到class文件中，因此和你自己写的set，get方法一样，也不会影响性能，因为他是在编译阶段完成的。\n\n    网上也有很多介绍Lombok的内容，我认为自己也整理一套吧。\n\n <!-- more -->\n\n  ** 下载安装 **\n\n    lombok 的官方网址：[http://projectlombok.org/](http://projectlombok.org/)  可以下载jar包\n\n    1. 双击下载下来的 JAR 包安装 lombok\n           我选择这种方式安装的时候提示没有发现任何 IDE，所以我没安装成功，我是手动安装的。如果你想以这种方式安装，请参考官网的视频。\n       　2.eclipse / myeclipse 手动安装 lombok\n    2. 将 lombok.jar 复制到 myeclipse.ini / eclipse.ini 所在的文件夹目录下\n    3. 打开 eclipse.ini / myeclipse.ini，在最后面插入以下两行并保存：\n               -Xbootclasspath/a:lombok.jar\n               -javaagent:lombok.jar\n           3.重启 eclipse / myeclipse\n\n   以上步骤我都做完之后，依然提示找不到@Getter注解，我试着把jar包直接添加到项目的lib目录下，成功了。\n\n  \n\n    **测试**\n\n```\npackage com.entry;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class Person {\n\n    private int id;\n    private String name;\n\n    public Person() {\n\n    }\n\n    public Person(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"编号：\" + id + \" 姓名：\" + name;\n    }\n\n    public static void main(String[] args) {\n        Person per = new Person();\n        per.setId(123);\n        per.setName(\"张三疯\");\n        System.out.println(per.toString());// 编号：123 姓名：张三疯\n        \n        Person per2 = new Person(124, \"李二蛋\");\n        System.out.println(\"编号：\"+per2.getId()+\" 姓名：\"+per2.getName());//编号：124 姓名：李二蛋\n    }\n\n}\n```\n\n　　想想，如果这个类有那么50，60个属性的话，得有多少个set，get方法。\n\n \n\n当然一些特殊情况，我们需要在调用set或者get方法的时候，需要做特殊处理的时候，我们也可以自己编写set，get方法，这个时候Lombok便不再为该属性添加set或者get方法\n\n```\npackage com.entry;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n@Getter\n@Setter\npublic class Person {\n\n    private int id;\n    private String name;\n\n    // 自己写了，lombok将不再生成该方法\n    public void setName(String name) {\n        this.name = name + \"你好!\";\n    }\n\n    public int getId() {\n        return id + 10000;\n    }\n\n    public Person() {\n\n    }\n\n    public Person(int id, String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return \"编号：\" + id + \" 姓名：\" + name;\n    }\n\n    public static void main(String[] args) {\n        Person per = new Person();\n        per.setId(123);\n        per.setName(\"张三疯\");\n        System.out.println(per.toString());// 编号：123 姓名：张三疯你好!\n\n        Person per2 = new Person(124, \"李二蛋\");\n        System.out.println(\"编号：\" + per2.getId() + \" 姓名：\" + per2.getName());//编号：10124 姓名：李二蛋\n    }\n\n}\n```\n\n \n\n \n\n    **lombok 注解**：\n    lombok 提供的注解不多，可以参考官方视频的讲解和官方文档。\n    Lombok 注解在线帮助文档：[http://projectlombok.org/features/index.](http://projectlombok.org/features/index.html)    下面介绍几个我常用的 lombok 注解：\n        @Data   ：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法\n        @Setter：注解在属性上；为属性提供 setting 方法\n        @Getter：注解在属性上；为属性提供 getting 方法\n        @Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象\n        @NoArgsConstructor：注解在类上；为类提供一个无参的构造方法\n        @AllArgsConstructor：注解在类上；为类提供一个全参的构造方法","slug":"simplified","published":1,"updated":"2022-11-24T13:38:45.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1f8001c4ovkrunh52bi","content":"<p>今天编写实体bean的时候，正好一位大拿从身后飘过，说：来，我教你一种可以不写set，get的方法。当时还在想，还有这么好的事。</p>\n<pre><code>原来，彪哥用了Lombok，其实是一个开源的jar包，引入包，使用包中提供的注解，就可以不用写set，get方法了。其实是javac的一个插件，当我们写好的代码在编译的过程中，javac会扫描带有该注解的实体类，并自动生成set，get方法到class文件中，因此和你自己写的set，get方法一样，也不会影响性能，因为他是在编译阶段完成的。\n\n网上也有很多介绍Lombok的内容，我认为自己也整理一套吧。\n</code></pre> <a id=\"more\"></a>\n<p>  <strong> 下载安装 </strong></p>\n<pre><code>lombok 的官方网址：[http://projectlombok.org/](http://projectlombok.org/)  可以下载jar包\n\n1. 双击下载下来的 JAR 包安装 lombok\n       我选择这种方式安装的时候提示没有发现任何 IDE，所以我没安装成功，我是手动安装的。如果你想以这种方式安装，请参考官网的视频。\n   　2.eclipse / myeclipse 手动安装 lombok\n2. 将 lombok.jar 复制到 myeclipse.ini / eclipse.ini 所在的文件夹目录下\n3. 打开 eclipse.ini / myeclipse.ini，在最后面插入以下两行并保存：\n           -Xbootclasspath/a:lombok.jar\n           -javaagent:lombok.jar\n       3.重启 eclipse / myeclipse\n</code></pre><p>   以上步骤我都做完之后，依然提示找不到@Getter注解，我试着把jar包直接添加到项目的lib目录下，成功了。</p>\n<pre><code>**测试**\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.entry;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.Getter;</span><br><span class=\"line\">import lombok.Setter;</span><br><span class=\"line\"></span><br><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">public class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Person() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Person(int id, String name) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;编号：&quot; + id + &quot; 姓名：&quot; + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Person per = new Person();</span><br><span class=\"line\">        per.setId(123);</span><br><span class=\"line\">        per.setName(&quot;张三疯&quot;);</span><br><span class=\"line\">        System.out.println(per.toString());// 编号：123 姓名：张三疯</span><br><span class=\"line\">        </span><br><span class=\"line\">        Person per2 = new Person(124, &quot;李二蛋&quot;);</span><br><span class=\"line\">        System.out.println(&quot;编号：&quot;+per2.getId()+&quot; 姓名：&quot;+per2.getName());//编号：124 姓名：李二蛋</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　想想，如果这个类有那么50，60个属性的话，得有多少个set，get方法。</p>\n<p>当然一些特殊情况，我们需要在调用set或者get方法的时候，需要做特殊处理的时候，我们也可以自己编写set，get方法，这个时候Lombok便不再为该属性添加set或者get方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.entry;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.Getter;</span><br><span class=\"line\">import lombok.Setter;</span><br><span class=\"line\"></span><br><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">public class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 自己写了，lombok将不再生成该方法</span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name + &quot;你好!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getId() &#123;</span><br><span class=\"line\">        return id + 10000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Person() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Person(int id, String name) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;编号：&quot; + id + &quot; 姓名：&quot; + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Person per = new Person();</span><br><span class=\"line\">        per.setId(123);</span><br><span class=\"line\">        per.setName(&quot;张三疯&quot;);</span><br><span class=\"line\">        System.out.println(per.toString());// 编号：123 姓名：张三疯你好!</span><br><span class=\"line\"></span><br><span class=\"line\">        Person per2 = new Person(124, &quot;李二蛋&quot;);</span><br><span class=\"line\">        System.out.println(&quot;编号：&quot; + per2.getId() + &quot; 姓名：&quot; + per2.getName());//编号：10124 姓名：李二蛋</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>**lombok 注解**：\nlombok 提供的注解不多，可以参考官方视频的讲解和官方文档。\nLombok 注解在线帮助文档：[http://projectlombok.org/features/index.](http://projectlombok.org/features/index.html)    下面介绍几个我常用的 lombok 注解：\n    @Data   ：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法\n    @Setter：注解在属性上；为属性提供 setting 方法\n    @Getter：注解在属性上；为属性提供 getting 方法\n    @Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象\n    @NoArgsConstructor：注解在类上；为类提供一个无参的构造方法\n    @AllArgsConstructor：注解在类上；为类提供一个全参的构造方法\n</code></pre>","site":{"data":{}},"excerpt":"<p>今天编写实体bean的时候，正好一位大拿从身后飘过，说：来，我教你一种可以不写set，get的方法。当时还在想，还有这么好的事。</p>\n<pre><code>原来，彪哥用了Lombok，其实是一个开源的jar包，引入包，使用包中提供的注解，就可以不用写set，get方法了。其实是javac的一个插件，当我们写好的代码在编译的过程中，javac会扫描带有该注解的实体类，并自动生成set，get方法到class文件中，因此和你自己写的set，get方法一样，也不会影响性能，因为他是在编译阶段完成的。\n\n网上也有很多介绍Lombok的内容，我认为自己也整理一套吧。\n</code></pre>","more":"<p>  <strong> 下载安装 </strong></p>\n<pre><code>lombok 的官方网址：[http://projectlombok.org/](http://projectlombok.org/)  可以下载jar包\n\n1. 双击下载下来的 JAR 包安装 lombok\n       我选择这种方式安装的时候提示没有发现任何 IDE，所以我没安装成功，我是手动安装的。如果你想以这种方式安装，请参考官网的视频。\n   　2.eclipse / myeclipse 手动安装 lombok\n2. 将 lombok.jar 复制到 myeclipse.ini / eclipse.ini 所在的文件夹目录下\n3. 打开 eclipse.ini / myeclipse.ini，在最后面插入以下两行并保存：\n           -Xbootclasspath/a:lombok.jar\n           -javaagent:lombok.jar\n       3.重启 eclipse / myeclipse\n</code></pre><p>   以上步骤我都做完之后，依然提示找不到@Getter注解，我试着把jar包直接添加到项目的lib目录下，成功了。</p>\n<pre><code>**测试**\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.entry;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.Getter;</span><br><span class=\"line\">import lombok.Setter;</span><br><span class=\"line\"></span><br><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">public class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Person() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Person(int id, String name) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;编号：&quot; + id + &quot; 姓名：&quot; + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Person per = new Person();</span><br><span class=\"line\">        per.setId(123);</span><br><span class=\"line\">        per.setName(&quot;张三疯&quot;);</span><br><span class=\"line\">        System.out.println(per.toString());// 编号：123 姓名：张三疯</span><br><span class=\"line\">        </span><br><span class=\"line\">        Person per2 = new Person(124, &quot;李二蛋&quot;);</span><br><span class=\"line\">        System.out.println(&quot;编号：&quot;+per2.getId()+&quot; 姓名：&quot;+per2.getName());//编号：124 姓名：李二蛋</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>　　想想，如果这个类有那么50，60个属性的话，得有多少个set，get方法。</p>\n<p>当然一些特殊情况，我们需要在调用set或者get方法的时候，需要做特殊处理的时候，我们也可以自己编写set，get方法，这个时候Lombok便不再为该属性添加set或者get方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.entry;</span><br><span class=\"line\"></span><br><span class=\"line\">import lombok.Getter;</span><br><span class=\"line\">import lombok.Setter;</span><br><span class=\"line\"></span><br><span class=\"line\">@Getter</span><br><span class=\"line\">@Setter</span><br><span class=\"line\">public class Person &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private int id;</span><br><span class=\"line\">    private String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 自己写了，lombok将不再生成该方法</span><br><span class=\"line\">    public void setName(String name) &#123;</span><br><span class=\"line\">        this.name = name + &quot;你好!&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getId() &#123;</span><br><span class=\"line\">        return id + 10000;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Person() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Person(int id, String name) &#123;</span><br><span class=\"line\">        this.id = id;</span><br><span class=\"line\">        this.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public String toString() &#123;</span><br><span class=\"line\">        return &quot;编号：&quot; + id + &quot; 姓名：&quot; + name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        Person per = new Person();</span><br><span class=\"line\">        per.setId(123);</span><br><span class=\"line\">        per.setName(&quot;张三疯&quot;);</span><br><span class=\"line\">        System.out.println(per.toString());// 编号：123 姓名：张三疯你好!</span><br><span class=\"line\"></span><br><span class=\"line\">        Person per2 = new Person(124, &quot;李二蛋&quot;);</span><br><span class=\"line\">        System.out.println(&quot;编号：&quot; + per2.getId() + &quot; 姓名：&quot; + per2.getName());//编号：10124 姓名：李二蛋</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>**lombok 注解**：\nlombok 提供的注解不多，可以参考官方视频的讲解和官方文档。\nLombok 注解在线帮助文档：[http://projectlombok.org/features/index.](http://projectlombok.org/features/index.html)    下面介绍几个我常用的 lombok 注解：\n    @Data   ：注解在类上；提供类所有属性的 getting 和 setting 方法，此外还提供了equals、canEqual、hashCode、toString 方法\n    @Setter：注解在属性上；为属性提供 setting 方法\n    @Getter：注解在属性上；为属性提供 getting 方法\n    @Log4j ：注解在类上；为类提供一个 属性名为log 的 log4j 日志对象\n    @NoArgsConstructor：注解在类上；为类提供一个无参的构造方法\n    @AllArgsConstructor：注解在类上；为类提供一个全参的构造方法\n</code></pre>"},{"title":"spring aop","date":"2016-11-28T03:56:21.000Z","_content":"\n# AOP简介\n\n想必大家对OOP都已经很熟悉了，其实AOP就是对OOP的一个有益补充。万变不离其中，我理解的AOP其实也是用面向对象的思想编写好的一个业务功能，只是这个业务功能是环绕在同一个项目中的很多甚至所有的其他核心业务功能的组件。帮助我们解决系统中单独的且又和每个核心功能有牵扯的某一方面问题，比如事务控制，日志，安全等。\n<!-- more -->\n讲一个生活中通俗点的故事：一个歌手在录制专辑，但是歌手的主要职责就是用心把歌唱好，可是他只唱歌也出不了专辑影像，那么就需要一个人来录制。当歌手开始唱歌之前，录制人员打开录音机；歌手唱完了，录制人员关闭录音机；当歌手在演唱过程中突发状况了，录制人员也可以关闭录音机。有人问了，这不是两个对象相互合作的吗？那如果是一家唱片公司，那么多歌手，假设歌手们都不是同时录音的，每个人都要配置一个录音团队吗，显然不是一个好的选择。怎么使每个歌手在唱歌的时候，都能有录音团度跟上工作呢，这就是AOP重点解决的问题。（例子有点糙，反正我是明白的，哈哈哈）\n\n# 基于XML配置AOP\n\n## 添加依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-aop</artifactId>\n    <version>4.1.1.RELEASE</version>\n</dependency>\n<dependency>\n    <groupId>org.aspectj</groupId>\n    <artifactId>aspectjweaver</artifactId>\n    <version>1.8.1</version>\n</dependency>\n```\n\n\n\n## 创建一个通知\n\n即把处理核心业务之外的另外的操作，又是处理同一问题领域的功能，比如给核心操作添加日志的功能，即一个切面。\n\n```java\npackage example.spring.aop;\n\npublic class LoggerAspect {\n\n    public void doBefore(){\n        System.out.println(\"执行方法前\");\n    }\n\n    public void doAfter(){\n        System.out.println(\"执行方法之后\");\n    }\n\n    public void runException(){\n        System.out.println(\"执行抛异常的时候\");\n    }\n\n    public void onAround(){\n        System.out.println(\"方法执行中\");\n    }\n}\n\n```\n\n## 添加核心业务\n\nService接口\n\n```java\npackage example.spring.service;\npublic interface DomeService {\n\n    public void save();\n}\n```\n\nImpl实现类\n\n```java\npackage example.spring.service.impl;\n\nimport example.spring.service.DomeService;\n\npublic class DomeServiceImpl implements DomeService {\n\n  @Override\n    public void save() {\n        System.out.println(\"mysql save one Dome success\");\n    }\n}\n```\n\n\n\n## 在spring配置文件中配置AOP\n\n```xml\n\n    <!-- 使用 XML 配置AOP -->\n    <aop:config>\n        <!-- 创建切面配置 -->\n        <aop:aspect ref=\"loggerAspect\">\n            <!-- 创建一个切点 -->\n            <aop:pointcut id=\"methodPointCut\" expression=\"execution(* example.spring.service.*.*(..))\"></aop:pointcut>\n            <!-- 织入 -->\n            <aop:before method=\"doBefore\" pointcut-ref=\"methodPointCut\"></aop:before>\n            <aop:after method=\"doAfter\" pointcut-ref=\"methodPointCut\"></aop:after>\n            <aop:around method=\"onAround\" pointcut-ref=\"methodPointCut\"></aop:around>\n            <aop:after-throwing method=\"runException\" pointcut-ref=\"methodPointCut\"></aop:after-throwing>\n        </aop:aspect>\n    </aop:config>\n```\n\n## 测试\n\n```java\npackage example.spring.test;\n\nimport example.spring.service.DomeService;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class AspectTest {\n\n    public static void main(String[] args) {\n        ApplicationContext ap = new ClassPathXmlApplicationContext(\"config/application.xml\");\n        DomeService dservice = (DomeService) ap.getBean(\"domeService\");\n        dservice.save();\n    }\n}\n\n```\n\n## 结果\n\n>    Exception in thread \"main\" org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named 'domeService' is expected to be of type 'example.spring.service.impl.DomeServiceImpl' but was actually of type 'com.sun.proxy.$Proxy4'\n>\n>    \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:384)\n>    \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)\n>    \tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1091)\n>    \tat example.spring.test.AspectTest.main(AspectTest.java:11)\n\n报异常了，为什么呢，这是因为AOP采用了代理模式，通过配置创建核心业务对象的代理来使用。\n\nproxy-target-class属性值决定是基于接口的还是基于类的代理被创建。首先说明下proxy-target-class=\"true\"和proxy-target-class=\"false\"的区别，为true则是基于类的代理将起作用（需要cglib库），为false，则标准的JDK 基于接口的代理将起作用。\nproxy-target-class在spring事务、aop、缓存这几块都有设置，其作用都是一样的。\n\n我们上面采用的是接口代理，aop:config的配置默认是类注入代理模式，因此类型错误了。\n\n我们把aop那一块的配置加上 proxy-target-class属性\n\n```xml\n<aop:config proxy-target-class=\"true\">\n        <!-- 创建切面配置 -->\n        <aop:aspect ref=\"loggerAspect\">\n            <!-- 创建一个切点 -->\n            <aop:pointcut id=\"methodPointCut\" expression=\"execution(* example.spring.service.impl.*.*())\"></aop:pointcut>\n            <!-- 织入 -->\n            <aop:before method=\"doBefore\" pointcut-ref=\"methodPointCut\"></aop:before>\n            <aop:after method=\"doAfter\" pointcut-ref=\"methodPointCut\"></aop:after>\n\n        </aop:aspect>\n    </aop:config>\n```\n\n\n\n测试结果\n\n>    执行方法前\n>    mysql save one Dome success\n>    执行方法之后\n\n\n\n# 基于注解配置AOP\n\n##  配置文件开启AOP注解\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\">\n\n\n    <!-- 开启aop注解模式，设置类代理模式 -->\n    <aop:aspectj-autoproxy proxy-target-class=\"false\"></aop:aspectj-autoproxy>\n    <bean id=\"customerService\" class=\"example.spring.service.CustomerService\"></bean>\n  \t<!-- 通知类，即使加上注解，也需要在spring容器中注册 -->\n    <bean id=\"callAdvice\" class=\"example.spring.aop.CallAdvice\"></bean>\n</beans>\n```\n\n## 通知类\n\n```java\npackage example.spring.aop;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.*;\n\n@Aspect\npublic class CallAdvice {\n    public static int steps = 1;\n\n\n    @Before(\"execution(* example.spring.service.*.*())\")\n    public void doBefore(JoinPoint jp) {\n//        System.out.println(jp.toString());\n//        System.out.println(jp.getTarget().toString());\n//        System.out.println(jp.getTarget().getClass().getName());\n//        System.out.println(jp.getSignature().toString());\n//        System.out.println(jp.getSignature().getName());\n        System.out.println(jp.getTarget().getClass().getName() + \"方法执行前\");\n\n    }\n\n    @After(\"execution(* example.spring.service.*.*())\")\n    public void doAfter() {\n        System.out.println(\"方法执行后\");\n    }\n\n    @Around(\"execution(* example.spring.service.*.*())\")\n    public Object onAround(ProceedingJoinPoint pjp) throws Throwable {\n        String className = pjp.getTarget().getClass().getName();\n        String methodName = pjp.getSignature().getName();\n        int sn = steps++;\n        System.out.println(String.format(\"[%d: METHOD BEFORE]: %s.%s()\", sn, className, methodName));\n        long time = System.currentTimeMillis();\n        Object retVal = pjp.proceed();\n        time = System.currentTimeMillis() - time;\n        System.out.println(String.format(\"[%d: METHOD  AFTER]: %s.%s() : %dms\\n\", sn, className, methodName, time));\n        return retVal;\n\n    }\n}\n\n```\n\n## 核心业务类\n\n```java\npackage example.spring.service;\n\npublic class CustomerService {\n\n    public void save(){\n        System.out.println(\"保存客户信息\");\n    }\n}\n\n```\n\n## 测试\n\n```java\npackage example.spring.test;\n\nimport example.spring.service.CustomerService;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class Customer {\n\n    public static void main(String[] args) {\n        ApplicationContext ap = new ClassPathXmlApplicationContext(\"config/application-aop.xml\");\n        CustomerService cs = ap.getBean(\"customerService\",CustomerService.class);\n        cs.save();\n    }\n}\n\n```\n\n结果：\n\n>    [1: METHOD BEFORE]: example.spring.service.CustomerService.save()\n>    example.spring.service.CustomerService方法执行前\n>    保存客户信息\n>    [1: METHOD  AFTER]: example.spring.service.CustomerService.save() : 19ms\n>\n>    方法执行后\n\n\n\n","source":"_posts/spring-aop.md","raw":"---\ntitle: spring aop\ndate: 2016-11-28 11:56:21\ntags: spring\n---\n\n# AOP简介\n\n想必大家对OOP都已经很熟悉了，其实AOP就是对OOP的一个有益补充。万变不离其中，我理解的AOP其实也是用面向对象的思想编写好的一个业务功能，只是这个业务功能是环绕在同一个项目中的很多甚至所有的其他核心业务功能的组件。帮助我们解决系统中单独的且又和每个核心功能有牵扯的某一方面问题，比如事务控制，日志，安全等。\n<!-- more -->\n讲一个生活中通俗点的故事：一个歌手在录制专辑，但是歌手的主要职责就是用心把歌唱好，可是他只唱歌也出不了专辑影像，那么就需要一个人来录制。当歌手开始唱歌之前，录制人员打开录音机；歌手唱完了，录制人员关闭录音机；当歌手在演唱过程中突发状况了，录制人员也可以关闭录音机。有人问了，这不是两个对象相互合作的吗？那如果是一家唱片公司，那么多歌手，假设歌手们都不是同时录音的，每个人都要配置一个录音团队吗，显然不是一个好的选择。怎么使每个歌手在唱歌的时候，都能有录音团度跟上工作呢，这就是AOP重点解决的问题。（例子有点糙，反正我是明白的，哈哈哈）\n\n# 基于XML配置AOP\n\n## 添加依赖\n\n```xml\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-aop</artifactId>\n    <version>4.1.1.RELEASE</version>\n</dependency>\n<dependency>\n    <groupId>org.aspectj</groupId>\n    <artifactId>aspectjweaver</artifactId>\n    <version>1.8.1</version>\n</dependency>\n```\n\n\n\n## 创建一个通知\n\n即把处理核心业务之外的另外的操作，又是处理同一问题领域的功能，比如给核心操作添加日志的功能，即一个切面。\n\n```java\npackage example.spring.aop;\n\npublic class LoggerAspect {\n\n    public void doBefore(){\n        System.out.println(\"执行方法前\");\n    }\n\n    public void doAfter(){\n        System.out.println(\"执行方法之后\");\n    }\n\n    public void runException(){\n        System.out.println(\"执行抛异常的时候\");\n    }\n\n    public void onAround(){\n        System.out.println(\"方法执行中\");\n    }\n}\n\n```\n\n## 添加核心业务\n\nService接口\n\n```java\npackage example.spring.service;\npublic interface DomeService {\n\n    public void save();\n}\n```\n\nImpl实现类\n\n```java\npackage example.spring.service.impl;\n\nimport example.spring.service.DomeService;\n\npublic class DomeServiceImpl implements DomeService {\n\n  @Override\n    public void save() {\n        System.out.println(\"mysql save one Dome success\");\n    }\n}\n```\n\n\n\n## 在spring配置文件中配置AOP\n\n```xml\n\n    <!-- 使用 XML 配置AOP -->\n    <aop:config>\n        <!-- 创建切面配置 -->\n        <aop:aspect ref=\"loggerAspect\">\n            <!-- 创建一个切点 -->\n            <aop:pointcut id=\"methodPointCut\" expression=\"execution(* example.spring.service.*.*(..))\"></aop:pointcut>\n            <!-- 织入 -->\n            <aop:before method=\"doBefore\" pointcut-ref=\"methodPointCut\"></aop:before>\n            <aop:after method=\"doAfter\" pointcut-ref=\"methodPointCut\"></aop:after>\n            <aop:around method=\"onAround\" pointcut-ref=\"methodPointCut\"></aop:around>\n            <aop:after-throwing method=\"runException\" pointcut-ref=\"methodPointCut\"></aop:after-throwing>\n        </aop:aspect>\n    </aop:config>\n```\n\n## 测试\n\n```java\npackage example.spring.test;\n\nimport example.spring.service.DomeService;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class AspectTest {\n\n    public static void main(String[] args) {\n        ApplicationContext ap = new ClassPathXmlApplicationContext(\"config/application.xml\");\n        DomeService dservice = (DomeService) ap.getBean(\"domeService\");\n        dservice.save();\n    }\n}\n\n```\n\n## 结果\n\n>    Exception in thread \"main\" org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named 'domeService' is expected to be of type 'example.spring.service.impl.DomeServiceImpl' but was actually of type 'com.sun.proxy.$Proxy4'\n>\n>    \tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:384)\n>    \tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)\n>    \tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1091)\n>    \tat example.spring.test.AspectTest.main(AspectTest.java:11)\n\n报异常了，为什么呢，这是因为AOP采用了代理模式，通过配置创建核心业务对象的代理来使用。\n\nproxy-target-class属性值决定是基于接口的还是基于类的代理被创建。首先说明下proxy-target-class=\"true\"和proxy-target-class=\"false\"的区别，为true则是基于类的代理将起作用（需要cglib库），为false，则标准的JDK 基于接口的代理将起作用。\nproxy-target-class在spring事务、aop、缓存这几块都有设置，其作用都是一样的。\n\n我们上面采用的是接口代理，aop:config的配置默认是类注入代理模式，因此类型错误了。\n\n我们把aop那一块的配置加上 proxy-target-class属性\n\n```xml\n<aop:config proxy-target-class=\"true\">\n        <!-- 创建切面配置 -->\n        <aop:aspect ref=\"loggerAspect\">\n            <!-- 创建一个切点 -->\n            <aop:pointcut id=\"methodPointCut\" expression=\"execution(* example.spring.service.impl.*.*())\"></aop:pointcut>\n            <!-- 织入 -->\n            <aop:before method=\"doBefore\" pointcut-ref=\"methodPointCut\"></aop:before>\n            <aop:after method=\"doAfter\" pointcut-ref=\"methodPointCut\"></aop:after>\n\n        </aop:aspect>\n    </aop:config>\n```\n\n\n\n测试结果\n\n>    执行方法前\n>    mysql save one Dome success\n>    执行方法之后\n\n\n\n# 基于注解配置AOP\n\n##  配置文件开启AOP注解\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\">\n\n\n    <!-- 开启aop注解模式，设置类代理模式 -->\n    <aop:aspectj-autoproxy proxy-target-class=\"false\"></aop:aspectj-autoproxy>\n    <bean id=\"customerService\" class=\"example.spring.service.CustomerService\"></bean>\n  \t<!-- 通知类，即使加上注解，也需要在spring容器中注册 -->\n    <bean id=\"callAdvice\" class=\"example.spring.aop.CallAdvice\"></bean>\n</beans>\n```\n\n## 通知类\n\n```java\npackage example.spring.aop;\n\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.*;\n\n@Aspect\npublic class CallAdvice {\n    public static int steps = 1;\n\n\n    @Before(\"execution(* example.spring.service.*.*())\")\n    public void doBefore(JoinPoint jp) {\n//        System.out.println(jp.toString());\n//        System.out.println(jp.getTarget().toString());\n//        System.out.println(jp.getTarget().getClass().getName());\n//        System.out.println(jp.getSignature().toString());\n//        System.out.println(jp.getSignature().getName());\n        System.out.println(jp.getTarget().getClass().getName() + \"方法执行前\");\n\n    }\n\n    @After(\"execution(* example.spring.service.*.*())\")\n    public void doAfter() {\n        System.out.println(\"方法执行后\");\n    }\n\n    @Around(\"execution(* example.spring.service.*.*())\")\n    public Object onAround(ProceedingJoinPoint pjp) throws Throwable {\n        String className = pjp.getTarget().getClass().getName();\n        String methodName = pjp.getSignature().getName();\n        int sn = steps++;\n        System.out.println(String.format(\"[%d: METHOD BEFORE]: %s.%s()\", sn, className, methodName));\n        long time = System.currentTimeMillis();\n        Object retVal = pjp.proceed();\n        time = System.currentTimeMillis() - time;\n        System.out.println(String.format(\"[%d: METHOD  AFTER]: %s.%s() : %dms\\n\", sn, className, methodName, time));\n        return retVal;\n\n    }\n}\n\n```\n\n## 核心业务类\n\n```java\npackage example.spring.service;\n\npublic class CustomerService {\n\n    public void save(){\n        System.out.println(\"保存客户信息\");\n    }\n}\n\n```\n\n## 测试\n\n```java\npackage example.spring.test;\n\nimport example.spring.service.CustomerService;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class Customer {\n\n    public static void main(String[] args) {\n        ApplicationContext ap = new ClassPathXmlApplicationContext(\"config/application-aop.xml\");\n        CustomerService cs = ap.getBean(\"customerService\",CustomerService.class);\n        cs.save();\n    }\n}\n\n```\n\n结果：\n\n>    [1: METHOD BEFORE]: example.spring.service.CustomerService.save()\n>    example.spring.service.CustomerService方法执行前\n>    保存客户信息\n>    [1: METHOD  AFTER]: example.spring.service.CustomerService.save() : 19ms\n>\n>    方法执行后\n\n\n\n","slug":"spring-aop","published":1,"updated":"2022-11-24T13:38:45.600Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1f9001d4ovkkku6bfic","content":"<h1 id=\"AOP简介\"><a href=\"#AOP简介\" class=\"headerlink\" title=\"AOP简介\"></a>AOP简介</h1><p>想必大家对OOP都已经很熟悉了，其实AOP就是对OOP的一个有益补充。万变不离其中，我理解的AOP其实也是用面向对象的思想编写好的一个业务功能，只是这个业务功能是环绕在同一个项目中的很多甚至所有的其他核心业务功能的组件。帮助我们解决系统中单独的且又和每个核心功能有牵扯的某一方面问题，比如事务控制，日志，安全等。<br><a id=\"more\"></a><br>讲一个生活中通俗点的故事：一个歌手在录制专辑，但是歌手的主要职责就是用心把歌唱好，可是他只唱歌也出不了专辑影像，那么就需要一个人来录制。当歌手开始唱歌之前，录制人员打开录音机；歌手唱完了，录制人员关闭录音机；当歌手在演唱过程中突发状况了，录制人员也可以关闭录音机。有人问了，这不是两个对象相互合作的吗？那如果是一家唱片公司，那么多歌手，假设歌手们都不是同时录音的，每个人都要配置一个录音团队吗，显然不是一个好的选择。怎么使每个歌手在唱歌的时候，都能有录音团度跟上工作呢，这就是AOP重点解决的问题。（例子有点糙，反正我是明白的，哈哈哈）</p>\n<h1 id=\"基于XML配置AOP\"><a href=\"#基于XML配置AOP\" class=\"headerlink\" title=\"基于XML配置AOP\"></a>基于XML配置AOP</h1><h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建一个通知\"><a href=\"#创建一个通知\" class=\"headerlink\" title=\"创建一个通知\"></a>创建一个通知</h2><p>即把处理核心业务之外的另外的操作，又是处理同一问题领域的功能，比如给核心操作添加日志的功能，即一个切面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggerAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doBefore</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行方法前\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行方法之后\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runException</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行抛异常的时候\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAround</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法执行中\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加核心业务\"><a href=\"#添加核心业务\" class=\"headerlink\" title=\"添加核心业务\"></a>添加核心业务</h2><p>Service接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.service;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DomeService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Impl实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.service.DomeService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DomeServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DomeService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"mysql save one Dome success\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在spring配置文件中配置AOP\"><a href=\"#在spring配置文件中配置AOP\" class=\"headerlink\" title=\"在spring配置文件中配置AOP\"></a>在spring配置文件中配置AOP</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用 XML 配置AOP --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 创建切面配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"loggerAspect\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 创建一个切点 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"methodPointCut\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* example.spring.service.*.*(..))\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:pointcut</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 织入 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">\"doBefore\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"methodPointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:before</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">\"doAfter\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"methodPointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:after</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:around</span> <span class=\"attr\">method</span>=<span class=\"string\">\"onAround\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"methodPointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:around</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">method</span>=<span class=\"string\">\"runException\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"methodPointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:after-throwing</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.service.DomeService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AspectTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext ap = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"config/application.xml\"</span>);</span><br><span class=\"line\">        DomeService dservice = (DomeService) ap.getBean(<span class=\"string\">\"domeService\"</span>);</span><br><span class=\"line\">        dservice.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><blockquote>\n<p>   Exception in thread “main” org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named ‘domeService’ is expected to be of type ‘example.spring.service.impl.DomeServiceImpl’ but was actually of type ‘com.sun.proxy.$Proxy4’</p>\n<pre><code>at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:384)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)\nat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1091)\nat example.spring.test.AspectTest.main(AspectTest.java:11)\n</code></pre></blockquote>\n<p>报异常了，为什么呢，这是因为AOP采用了代理模式，通过配置创建核心业务对象的代理来使用。</p>\n<p>proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。首先说明下proxy-target-class=”true”和proxy-target-class=”false”的区别，为true则是基于类的代理将起作用（需要cglib库），为false，则标准的JDK 基于接口的代理将起作用。<br>proxy-target-class在spring事务、aop、缓存这几块都有设置，其作用都是一样的。</p>\n<p>我们上面采用的是接口代理，aop:config的配置默认是类注入代理模式，因此类型错误了。</p>\n<p>我们把aop那一块的配置加上 proxy-target-class属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 创建切面配置 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"loggerAspect\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 创建一个切点 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"methodPointCut\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* example.spring.service.impl.*.*())\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:pointcut</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 织入 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">\"doBefore\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"methodPointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:before</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">\"doAfter\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"methodPointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:after</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>测试结果</p>\n<blockquote>\n<p>   执行方法前<br>   mysql save one Dome success<br>   执行方法之后</p>\n</blockquote>\n<h1 id=\"基于注解配置AOP\"><a href=\"#基于注解配置AOP\" class=\"headerlink\" title=\"基于注解配置AOP\"></a>基于注解配置AOP</h1><h2 id=\"配置文件开启AOP注解\"><a href=\"#配置文件开启AOP注解\" class=\"headerlink\" title=\"配置文件开启AOP注解\"></a>配置文件开启AOP注解</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 开启aop注解模式，设置类代理模式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"customerService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.service.CustomerService\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"comment\">&lt;!-- 通知类，即使加上注解，也需要在spring容器中注册 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"callAdvice\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.aop.CallAdvice\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"通知类\"><a href=\"#通知类\" class=\"headerlink\" title=\"通知类\"></a>通知类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallAdvice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> steps = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* example.spring.service.*.*())\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doBefore</span><span class=\"params\">(JoinPoint jp)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(jp.toString());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(jp.getTarget().toString());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(jp.getTarget().getClass().getName());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(jp.getSignature().toString());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(jp.getSignature().getName());</span></span><br><span class=\"line\">        System.out.println(jp.getTarget().getClass().getName() + <span class=\"string\">\"方法执行前\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"execution(* example.spring.service.*.*())\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法执行后\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"execution(* example.spring.service.*.*())\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">onAround</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        String className = pjp.getTarget().getClass().getName();</span><br><span class=\"line\">        String methodName = pjp.getSignature().getName();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sn = steps++;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"[%d: METHOD BEFORE]: %s.%s()\"</span>, sn, className, methodName));</span><br><span class=\"line\">        <span class=\"keyword\">long</span> time = System.currentTimeMillis();</span><br><span class=\"line\">        Object retVal = pjp.proceed();</span><br><span class=\"line\">        time = System.currentTimeMillis() - time;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"[%d: METHOD  AFTER]: %s.%s() : %dms\\n\"</span>, sn, className, methodName, time));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"核心业务类\"><a href=\"#核心业务类\" class=\"headerlink\" title=\"核心业务类\"></a>核心业务类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"保存客户信息\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.service.CustomerService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext ap = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"config/application-aop.xml\"</span>);</span><br><span class=\"line\">        CustomerService cs = ap.getBean(<span class=\"string\">\"customerService\"</span>,CustomerService.class);</span><br><span class=\"line\">        cs.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<blockquote>\n<p>   example.spring.service.CustomerService方法执行前<br>   保存客户信息<br>   [1: METHOD  AFTER]: example.spring.service.CustomerService.save() : 19ms</p>\n<p>   方法执行后</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"AOP简介\"><a href=\"#AOP简介\" class=\"headerlink\" title=\"AOP简介\"></a>AOP简介</h1><p>想必大家对OOP都已经很熟悉了，其实AOP就是对OOP的一个有益补充。万变不离其中，我理解的AOP其实也是用面向对象的思想编写好的一个业务功能，只是这个业务功能是环绕在同一个项目中的很多甚至所有的其他核心业务功能的组件。帮助我们解决系统中单独的且又和每个核心功能有牵扯的某一方面问题，比如事务控制，日志，安全等。<br>","more":"<br>讲一个生活中通俗点的故事：一个歌手在录制专辑，但是歌手的主要职责就是用心把歌唱好，可是他只唱歌也出不了专辑影像，那么就需要一个人来录制。当歌手开始唱歌之前，录制人员打开录音机；歌手唱完了，录制人员关闭录音机；当歌手在演唱过程中突发状况了，录制人员也可以关闭录音机。有人问了，这不是两个对象相互合作的吗？那如果是一家唱片公司，那么多歌手，假设歌手们都不是同时录音的，每个人都要配置一个录音团队吗，显然不是一个好的选择。怎么使每个歌手在唱歌的时候，都能有录音团度跟上工作呢，这就是AOP重点解决的问题。（例子有点糙，反正我是明白的，哈哈哈）</p>\n<h1 id=\"基于XML配置AOP\"><a href=\"#基于XML配置AOP\" class=\"headerlink\" title=\"基于XML配置AOP\"></a>基于XML配置AOP</h1><h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.1.1.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.aspectj<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aspectjweaver<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.8.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建一个通知\"><a href=\"#创建一个通知\" class=\"headerlink\" title=\"创建一个通知\"></a>创建一个通知</h2><p>即把处理核心业务之外的另外的操作，又是处理同一问题领域的功能，比如给核心操作添加日志的功能，即一个切面。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoggerAspect</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doBefore</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行方法前\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfter</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行方法之后\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">runException</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行抛异常的时候\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAround</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法执行中\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加核心业务\"><a href=\"#添加核心业务\" class=\"headerlink\" title=\"添加核心业务\"></a>添加核心业务</h2><p>Service接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.service;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">DomeService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Impl实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.service.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.service.DomeService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DomeServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">DomeService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"mysql save one Dome success\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在spring配置文件中配置AOP\"><a href=\"#在spring配置文件中配置AOP\" class=\"headerlink\" title=\"在spring配置文件中配置AOP\"></a>在spring配置文件中配置AOP</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使用 XML 配置AOP --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 创建切面配置 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"loggerAspect\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 创建一个切点 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"methodPointCut\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* example.spring.service.*.*(..))\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:pointcut</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 织入 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">\"doBefore\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"methodPointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:before</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">\"doAfter\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"methodPointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:after</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:around</span> <span class=\"attr\">method</span>=<span class=\"string\">\"onAround\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"methodPointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:around</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">method</span>=<span class=\"string\">\"runException\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"methodPointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:after-throwing</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.service.DomeService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AspectTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext ap = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"config/application.xml\"</span>);</span><br><span class=\"line\">        DomeService dservice = (DomeService) ap.getBean(<span class=\"string\">\"domeService\"</span>);</span><br><span class=\"line\">        dservice.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><blockquote>\n<p>   Exception in thread “main” org.springframework.beans.factory.BeanNotOfRequiredTypeException: Bean named ‘domeService’ is expected to be of type ‘example.spring.service.impl.DomeServiceImpl’ but was actually of type ‘com.sun.proxy.$Proxy4’</p>\n<pre><code>at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:384)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:205)\nat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1091)\nat example.spring.test.AspectTest.main(AspectTest.java:11)\n</code></pre></blockquote>\n<p>报异常了，为什么呢，这是因为AOP采用了代理模式，通过配置创建核心业务对象的代理来使用。</p>\n<p>proxy-target-class属性值决定是基于接口的还是基于类的代理被创建。首先说明下proxy-target-class=”true”和proxy-target-class=”false”的区别，为true则是基于类的代理将起作用（需要cglib库），为false，则标准的JDK 基于接口的代理将起作用。<br>proxy-target-class在spring事务、aop、缓存这几块都有设置，其作用都是一样的。</p>\n<p>我们上面采用的是接口代理，aop:config的配置默认是类注入代理模式，因此类型错误了。</p>\n<p>我们把aop那一块的配置加上 proxy-target-class属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 创建切面配置 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"loggerAspect\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 创建一个切点 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">\"methodPointCut\"</span> <span class=\"attr\">expression</span>=<span class=\"string\">\"execution(* example.spring.service.impl.*.*())\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:pointcut</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 织入 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">method</span>=<span class=\"string\">\"doBefore\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"methodPointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:before</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">aop:after</span> <span class=\"attr\">method</span>=<span class=\"string\">\"doAfter\"</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">\"methodPointCut\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:after</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>测试结果</p>\n<blockquote>\n<p>   执行方法前<br>   mysql save one Dome success<br>   执行方法之后</p>\n</blockquote>\n<h1 id=\"基于注解配置AOP\"><a href=\"#基于注解配置AOP\" class=\"headerlink\" title=\"基于注解配置AOP\"></a>基于注解配置AOP</h1><h2 id=\"配置文件开启AOP注解\"><a href=\"#配置文件开启AOP注解\" class=\"headerlink\" title=\"配置文件开启AOP注解\"></a>配置文件开启AOP注解</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">\"http://www.springframework.org/schema/aop\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 开启aop注解模式，设置类代理模式 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> <span class=\"attr\">proxy-target-class</span>=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"customerService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.service.CustomerService\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"comment\">&lt;!-- 通知类，即使加上注解，也需要在spring容器中注册 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"callAdvice\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.aop.CallAdvice\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"通知类\"><a href=\"#通知类\" class=\"headerlink\" title=\"通知类\"></a>通知类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.aop;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.JoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.aspectj.lang.annotation.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CallAdvice</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> steps = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"execution(* example.spring.service.*.*())\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doBefore</span><span class=\"params\">(JoinPoint jp)</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(jp.toString());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(jp.getTarget().toString());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(jp.getTarget().getClass().getName());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(jp.getSignature().toString());</span></span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(jp.getSignature().getName());</span></span><br><span class=\"line\">        System.out.println(jp.getTarget().getClass().getName() + <span class=\"string\">\"方法执行前\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After</span>(<span class=\"string\">\"execution(* example.spring.service.*.*())\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doAfter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"方法执行后\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around</span>(<span class=\"string\">\"execution(* example.spring.service.*.*())\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">onAround</span><span class=\"params\">(ProceedingJoinPoint pjp)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        String className = pjp.getTarget().getClass().getName();</span><br><span class=\"line\">        String methodName = pjp.getSignature().getName();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> sn = steps++;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"[%d: METHOD BEFORE]: %s.%s()\"</span>, sn, className, methodName));</span><br><span class=\"line\">        <span class=\"keyword\">long</span> time = System.currentTimeMillis();</span><br><span class=\"line\">        Object retVal = pjp.proceed();</span><br><span class=\"line\">        time = System.currentTimeMillis() - time;</span><br><span class=\"line\">        System.out.println(String.format(<span class=\"string\">\"[%d: METHOD  AFTER]: %s.%s() : %dms\\n\"</span>, sn, className, methodName, time));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"核心业务类\"><a href=\"#核心业务类\" class=\"headerlink\" title=\"核心业务类\"></a>核心业务类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.service;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomerService</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">save</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"保存客户信息\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.service.CustomerService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext ap = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"config/application-aop.xml\"</span>);</span><br><span class=\"line\">        CustomerService cs = ap.getBean(<span class=\"string\">\"customerService\"</span>,CustomerService.class);</span><br><span class=\"line\">        cs.save();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<blockquote>\n<p>   example.spring.service.CustomerService方法执行前<br>   保存客户信息<br>   [1: METHOD  AFTER]: example.spring.service.CustomerService.save() : 19ms</p>\n<p>   方法执行后</p>\n</blockquote>"},{"title":"Spring结合uploadFile插件上传文件","date":"2019-05-24T05:49:12.000Z","_content":"\n# 简介\n\n今天整理了一个上传文件的基于Jquery开发的插件。[参考](http://www.jq22.com/jquery-info13450)\n\n提供单，多图片、文件上传；进度条支持；同步，异步上传等。\n\n# 使用\n\n下载插件包，把文件复制到工程WEB-INF目录下\n\n<!-- more -->\n\n应用实例\n\n```html\n<!DOCTYPE html>\n<html lang=\"ch\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>文件上传案例</title>\n    <link href=\"css/iconfont.css\" rel=\"stylesheet\" type=\"text/css\"/>\n    <link href=\"css/fileUpload.css\" rel=\"stylesheet\" type=\"text/css\">\n</head>\n<body>\n    <!--创建一个文件上传的容器-->\n    <div id=\"fileUploadContent\" class=\"fileUploadContent\"></div>\n    <button onclick=\"success()\">模拟上传成功</button><button onclick=\"fail()\">模拟上传失败</button>\n    <a href=\"doc.html\">文档说明</a>\n</body>\n</html>\n<script src=\"http://www.jq22.com/jquery/jquery-2.1.1.js\"></script>\n<script type=\"text/javascript\" src=\"js/fileUpload.js\"></script>\n<script type=\"text/javascript\">\n    let wfu = new WpFileUpload(\"fileUploadContent\");\n    wfu.initUpload({\n        \"uploadUrl\":\"#\",//上传文件信息地址\n        \"progressUrl\":\"#\",//获取进度信息地址，可选，注意需要返回的data格式如下（{bytesRead: 102516060, contentLength: 102516060, items: 1, percent: 100, startTime: 1489223136317, useTime: 2767}）\n        \"scheduleStandard\":true,\n    });\n\n    // //显示文件，设置删除事件\n    wfu.showFileResult(\"img/a2.png\",\"1\",null,true,true,deleteFileByMySelf,downloadByMySelf);\n    // //如果不需要删除\n    wfu.showFileResult(\"img/a3.png\",\"2\",null,false,false,null,null);\n    </script>\n```\n\n## 重要参数介绍\n\n```js\n let wfu = new WpFileUpload(\"fileUploadContent\");\n    wfu.initUpload({\n        \"uploadUrl\":\"#\",//上传文件信息地址\n        \"progressUrl\":\"#\",//获取进度信息地址，可选，注意需要返回的data格式如下（{bytesRead: 102516060, contentLength: 102516060, items: 1, percent: 100, startTime: 1489223136317, useTime: 2767}）\n        \"scheduleStandard\":true,\n      \t\"selfUploadBtId\":\"fileUploadId\",//自定义文件上传按钮ID\n        \"selfUploadBtId\":false,//\t是否记住已经上传过的文件，如果是记住，那么下次在上传的时候将不会允许，注意：当浏览器刷新的时候，这个设置将无效d\n      \t\"autoCommit\":false,//是否自动上传，如果为true的话，会根据配置的uploadUrl属性直接把文件上传到服务器\n      \t\"isHiddenUploadBt\":false,//是否隐藏上传按钮，这个上传按钮是选着文件旁边的那个按钮（如果设置为自动上传的话，该属性意义不大）\n      \t\"isHiddenCleanBt\":false,//是否隐藏清楚按钮\n      \t\"isAutoClean\":false,//上传完成后是否自动清除\n      \t\"fileType\":['png','docx'],//文件类型限制，默认不限制，注意写的是文件后缀，如：['png','jpg','docx','doc']\n      \t\"size\":1024,//文件大小限制，单位kb\n      \t\"totalSize\":51200,//总上传文件的大小\n      \t\"maxFileNumber\":12,//每次上传文件的总个数限制\n      \t\"showSummerProgress\":true,//是否显示总进度条，默认显示\n      \t\"showFileItemProgress\":true,//是否显示单文件进度条，默认显示\n      \t\"showProgressNum\":false,//是否显示进度条的值\n      \t\"uploadFileParamIteration\":true,//要上传的文件参数是否迭代，如果true：files0，files1，files2...... ， 如果是false：所有的文件通过一个参数uploadFileParam所设定的值（默认：files）来上传文件\n      \t\"beforeUpload\":function(){\n          console.log(\"文件上传之前\");\n          console.log(wfu.uploadFileParam);//uploadFileParam上传文件数据的参数，可以通过实例调用\n      \t},\n      \t\"onUpload\":function(){\n          console.log(\"文件上传完成\");\n          console.log(wfu.resultData);//resultData上传成功后返回的信息将会存在该参数下，可以通过实例调用\n      \t}\n    });\n//WpFileUpload的几个重要函数\n//文件上传失败\nfunction fialy(){\n  wfu.uploadError();\n}\n//文件上传成功\nfunction fileUploadSuccess(){\n  wfu.uploadSuccess();\n}\n\nfunction deleteFileByMySelf(fileId){\n    alert(\"要删除文件了：\"+fileId);\n\twfu.removeShowFileItem(fileId);\n} \n\n/*\n1、上传状态显示:\n（1）上传失败：\nwfu.uploadError();\n（2）上传成功：\nwfu.uploadSuccess();\n2、删除回显的文件:\nwfu.removeShowFileItem(fileId); // fileId指文件的Id\n3、上传成功后回显文件:\nwfu.showFileResult(fileUrl,fileId,defineFileName,deleteFile,downloadFile,deleteEvent,downLoadEvent)\nfileUrl:文件地址 \nfileId:文件Id \ndefineFileName:自定义文件名，注意带后缀 \ndeleteFile:是否可删除文件 \ndownloadFile:是否可下载文件 \ndeleteEvent:删除文件事件 ，注意，返回只有一个数据：文件的ID（fileId）\ndownLoadEvent:下载文件事件，注意，返回有两个数据：文件的ID（fileId）和文件的地址（fileUrl）\n\n关于上传注意事项：\n1、可以同时关闭主进度条和文件进度条\n\n2、如果没有进度信息，设置scheduleStandard:false,progressUrl:#,默认会上传到60%，然后根据后台返回的结果进行设置成功还是失败\n\n3、如果是PHP开发，请使用上文文件参数迭代：files0，files1，files2，.........\n*/\n```\n\n# 后台部分\n\n后台使用springmvc，参考[springmvc文件上传下载](/fileUpload)\n","source":"_posts/spring-uploadfile.md","raw":"---\ntitle: Spring结合uploadFile插件上传文件\ndate: 2019-05-24 13:49:12\ntags: springmvc\n---\n\n# 简介\n\n今天整理了一个上传文件的基于Jquery开发的插件。[参考](http://www.jq22.com/jquery-info13450)\n\n提供单，多图片、文件上传；进度条支持；同步，异步上传等。\n\n# 使用\n\n下载插件包，把文件复制到工程WEB-INF目录下\n\n<!-- more -->\n\n应用实例\n\n```html\n<!DOCTYPE html>\n<html lang=\"ch\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>文件上传案例</title>\n    <link href=\"css/iconfont.css\" rel=\"stylesheet\" type=\"text/css\"/>\n    <link href=\"css/fileUpload.css\" rel=\"stylesheet\" type=\"text/css\">\n</head>\n<body>\n    <!--创建一个文件上传的容器-->\n    <div id=\"fileUploadContent\" class=\"fileUploadContent\"></div>\n    <button onclick=\"success()\">模拟上传成功</button><button onclick=\"fail()\">模拟上传失败</button>\n    <a href=\"doc.html\">文档说明</a>\n</body>\n</html>\n<script src=\"http://www.jq22.com/jquery/jquery-2.1.1.js\"></script>\n<script type=\"text/javascript\" src=\"js/fileUpload.js\"></script>\n<script type=\"text/javascript\">\n    let wfu = new WpFileUpload(\"fileUploadContent\");\n    wfu.initUpload({\n        \"uploadUrl\":\"#\",//上传文件信息地址\n        \"progressUrl\":\"#\",//获取进度信息地址，可选，注意需要返回的data格式如下（{bytesRead: 102516060, contentLength: 102516060, items: 1, percent: 100, startTime: 1489223136317, useTime: 2767}）\n        \"scheduleStandard\":true,\n    });\n\n    // //显示文件，设置删除事件\n    wfu.showFileResult(\"img/a2.png\",\"1\",null,true,true,deleteFileByMySelf,downloadByMySelf);\n    // //如果不需要删除\n    wfu.showFileResult(\"img/a3.png\",\"2\",null,false,false,null,null);\n    </script>\n```\n\n## 重要参数介绍\n\n```js\n let wfu = new WpFileUpload(\"fileUploadContent\");\n    wfu.initUpload({\n        \"uploadUrl\":\"#\",//上传文件信息地址\n        \"progressUrl\":\"#\",//获取进度信息地址，可选，注意需要返回的data格式如下（{bytesRead: 102516060, contentLength: 102516060, items: 1, percent: 100, startTime: 1489223136317, useTime: 2767}）\n        \"scheduleStandard\":true,\n      \t\"selfUploadBtId\":\"fileUploadId\",//自定义文件上传按钮ID\n        \"selfUploadBtId\":false,//\t是否记住已经上传过的文件，如果是记住，那么下次在上传的时候将不会允许，注意：当浏览器刷新的时候，这个设置将无效d\n      \t\"autoCommit\":false,//是否自动上传，如果为true的话，会根据配置的uploadUrl属性直接把文件上传到服务器\n      \t\"isHiddenUploadBt\":false,//是否隐藏上传按钮，这个上传按钮是选着文件旁边的那个按钮（如果设置为自动上传的话，该属性意义不大）\n      \t\"isHiddenCleanBt\":false,//是否隐藏清楚按钮\n      \t\"isAutoClean\":false,//上传完成后是否自动清除\n      \t\"fileType\":['png','docx'],//文件类型限制，默认不限制，注意写的是文件后缀，如：['png','jpg','docx','doc']\n      \t\"size\":1024,//文件大小限制，单位kb\n      \t\"totalSize\":51200,//总上传文件的大小\n      \t\"maxFileNumber\":12,//每次上传文件的总个数限制\n      \t\"showSummerProgress\":true,//是否显示总进度条，默认显示\n      \t\"showFileItemProgress\":true,//是否显示单文件进度条，默认显示\n      \t\"showProgressNum\":false,//是否显示进度条的值\n      \t\"uploadFileParamIteration\":true,//要上传的文件参数是否迭代，如果true：files0，files1，files2...... ， 如果是false：所有的文件通过一个参数uploadFileParam所设定的值（默认：files）来上传文件\n      \t\"beforeUpload\":function(){\n          console.log(\"文件上传之前\");\n          console.log(wfu.uploadFileParam);//uploadFileParam上传文件数据的参数，可以通过实例调用\n      \t},\n      \t\"onUpload\":function(){\n          console.log(\"文件上传完成\");\n          console.log(wfu.resultData);//resultData上传成功后返回的信息将会存在该参数下，可以通过实例调用\n      \t}\n    });\n//WpFileUpload的几个重要函数\n//文件上传失败\nfunction fialy(){\n  wfu.uploadError();\n}\n//文件上传成功\nfunction fileUploadSuccess(){\n  wfu.uploadSuccess();\n}\n\nfunction deleteFileByMySelf(fileId){\n    alert(\"要删除文件了：\"+fileId);\n\twfu.removeShowFileItem(fileId);\n} \n\n/*\n1、上传状态显示:\n（1）上传失败：\nwfu.uploadError();\n（2）上传成功：\nwfu.uploadSuccess();\n2、删除回显的文件:\nwfu.removeShowFileItem(fileId); // fileId指文件的Id\n3、上传成功后回显文件:\nwfu.showFileResult(fileUrl,fileId,defineFileName,deleteFile,downloadFile,deleteEvent,downLoadEvent)\nfileUrl:文件地址 \nfileId:文件Id \ndefineFileName:自定义文件名，注意带后缀 \ndeleteFile:是否可删除文件 \ndownloadFile:是否可下载文件 \ndeleteEvent:删除文件事件 ，注意，返回只有一个数据：文件的ID（fileId）\ndownLoadEvent:下载文件事件，注意，返回有两个数据：文件的ID（fileId）和文件的地址（fileUrl）\n\n关于上传注意事项：\n1、可以同时关闭主进度条和文件进度条\n\n2、如果没有进度信息，设置scheduleStandard:false,progressUrl:#,默认会上传到60%，然后根据后台返回的结果进行设置成功还是失败\n\n3、如果是PHP开发，请使用上文文件参数迭代：files0，files1，files2，.........\n*/\n```\n\n# 后台部分\n\n后台使用springmvc，参考[springmvc文件上传下载](/fileUpload)\n","slug":"spring-uploadfile","published":1,"updated":"2022-11-24T13:38:45.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1fb001g4ovkwl0td9jw","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>今天整理了一个上传文件的基于Jquery开发的插件。<a href=\"http://www.jq22.com/jquery-info13450\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<p>提供单，多图片、文件上传；进度条支持；同步，异步上传等。</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>下载插件包，把文件复制到工程WEB-INF目录下</p>\n<a id=\"more\"></a>\n<p>应用实例</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"ch\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>文件上传案例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/iconfont.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/fileUpload.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--创建一个文件上传的容器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fileUploadContent\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fileUploadContent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"success()\"</span>&gt;</span>模拟上传成功<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"fail()\"</span>&gt;</span>模拟上传失败<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"doc.html\"</span>&gt;</span>文档说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.jq22.com/jquery/jquery-2.1.1.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/fileUpload.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> wfu = <span class=\"keyword\">new</span> WpFileUpload(<span class=\"string\">\"fileUploadContent\"</span>);</span></span><br><span class=\"line\">    wfu.initUpload(&#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"uploadUrl\"</span>:<span class=\"string\">\"#\"</span>,<span class=\"comment\">//上传文件信息地址</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"progressUrl\"</span>:<span class=\"string\">\"#\"</span>,<span class=\"comment\">//获取进度信息地址，可选，注意需要返回的data格式如下（&#123;bytesRead: 102516060, contentLength: 102516060, items: 1, percent: 100, startTime: 1489223136317, useTime: 2767&#125;）</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"scheduleStandard\"</span>:<span class=\"literal\">true</span>,</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// //显示文件，设置删除事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">    wfu.showFileResult(<span class=\"string\">\"img/a2.png\"</span>,<span class=\"string\">\"1\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>,<span class=\"literal\">true</span>,deleteFileByMySelf,downloadByMySelf);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// //如果不需要删除</span></span></span><br><span class=\"line\"><span class=\"javascript\">    wfu.showFileResult(<span class=\"string\">\"img/a3.png\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"重要参数介绍\"><a href=\"#重要参数介绍\" class=\"headerlink\" title=\"重要参数介绍\"></a>重要参数介绍</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> wfu = <span class=\"keyword\">new</span> WpFileUpload(<span class=\"string\">\"fileUploadContent\"</span>);</span><br><span class=\"line\">    wfu.initUpload(&#123;</span><br><span class=\"line\">        <span class=\"string\">\"uploadUrl\"</span>:<span class=\"string\">\"#\"</span>,<span class=\"comment\">//上传文件信息地址</span></span><br><span class=\"line\">        <span class=\"string\">\"progressUrl\"</span>:<span class=\"string\">\"#\"</span>,<span class=\"comment\">//获取进度信息地址，可选，注意需要返回的data格式如下（&#123;bytesRead: 102516060, contentLength: 102516060, items: 1, percent: 100, startTime: 1489223136317, useTime: 2767&#125;）</span></span><br><span class=\"line\">        <span class=\"string\">\"scheduleStandard\"</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">      \t<span class=\"string\">\"selfUploadBtId\"</span>:<span class=\"string\">\"fileUploadId\"</span>,<span class=\"comment\">//自定义文件上传按钮ID</span></span><br><span class=\"line\">        <span class=\"string\">\"selfUploadBtId\"</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//\t是否记住已经上传过的文件，如果是记住，那么下次在上传的时候将不会允许，注意：当浏览器刷新的时候，这个设置将无效d</span></span><br><span class=\"line\">      \t<span class=\"string\">\"autoCommit\"</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//是否自动上传，如果为true的话，会根据配置的uploadUrl属性直接把文件上传到服务器</span></span><br><span class=\"line\">      \t<span class=\"string\">\"isHiddenUploadBt\"</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//是否隐藏上传按钮，这个上传按钮是选着文件旁边的那个按钮（如果设置为自动上传的话，该属性意义不大）</span></span><br><span class=\"line\">      \t<span class=\"string\">\"isHiddenCleanBt\"</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//是否隐藏清楚按钮</span></span><br><span class=\"line\">      \t<span class=\"string\">\"isAutoClean\"</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//上传完成后是否自动清除</span></span><br><span class=\"line\">      \t<span class=\"string\">\"fileType\"</span>:[<span class=\"string\">'png'</span>,<span class=\"string\">'docx'</span>],<span class=\"comment\">//文件类型限制，默认不限制，注意写的是文件后缀，如：['png','jpg','docx','doc']</span></span><br><span class=\"line\">      \t<span class=\"string\">\"size\"</span>:<span class=\"number\">1024</span>,<span class=\"comment\">//文件大小限制，单位kb</span></span><br><span class=\"line\">      \t<span class=\"string\">\"totalSize\"</span>:<span class=\"number\">51200</span>,<span class=\"comment\">//总上传文件的大小</span></span><br><span class=\"line\">      \t<span class=\"string\">\"maxFileNumber\"</span>:<span class=\"number\">12</span>,<span class=\"comment\">//每次上传文件的总个数限制</span></span><br><span class=\"line\">      \t<span class=\"string\">\"showSummerProgress\"</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//是否显示总进度条，默认显示</span></span><br><span class=\"line\">      \t<span class=\"string\">\"showFileItemProgress\"</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//是否显示单文件进度条，默认显示</span></span><br><span class=\"line\">      \t<span class=\"string\">\"showProgressNum\"</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//是否显示进度条的值</span></span><br><span class=\"line\">      \t<span class=\"string\">\"uploadFileParamIteration\"</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//要上传的文件参数是否迭代，如果true：files0，files1，files2...... ， 如果是false：所有的文件通过一个参数uploadFileParam所设定的值（默认：files）来上传文件</span></span><br><span class=\"line\">      \t<span class=\"string\">\"beforeUpload\"</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"文件上传之前\"</span>);</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(wfu.uploadFileParam);<span class=\"comment\">//uploadFileParam上传文件数据的参数，可以通过实例调用</span></span><br><span class=\"line\">      \t&#125;,</span><br><span class=\"line\">      \t<span class=\"string\">\"onUpload\"</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"文件上传完成\"</span>);</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(wfu.resultData);<span class=\"comment\">//resultData上传成功后返回的信息将会存在该参数下，可以通过实例调用</span></span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"comment\">//WpFileUpload的几个重要函数</span></span><br><span class=\"line\"><span class=\"comment\">//文件上传失败</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fialy</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  wfu.uploadError();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//文件上传成功</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileUploadSuccess</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  wfu.uploadSuccess();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteFileByMySelf</span>(<span class=\"params\">fileId</span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"要删除文件了：\"</span>+fileId);</span><br><span class=\"line\">\twfu.removeShowFileItem(fileId);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1、上传状态显示:</span></span><br><span class=\"line\"><span class=\"comment\">（1）上传失败：</span></span><br><span class=\"line\"><span class=\"comment\">wfu.uploadError();</span></span><br><span class=\"line\"><span class=\"comment\">（2）上传成功：</span></span><br><span class=\"line\"><span class=\"comment\">wfu.uploadSuccess();</span></span><br><span class=\"line\"><span class=\"comment\">2、删除回显的文件:</span></span><br><span class=\"line\"><span class=\"comment\">wfu.removeShowFileItem(fileId); // fileId指文件的Id</span></span><br><span class=\"line\"><span class=\"comment\">3、上传成功后回显文件:</span></span><br><span class=\"line\"><span class=\"comment\">wfu.showFileResult(fileUrl,fileId,defineFileName,deleteFile,downloadFile,deleteEvent,downLoadEvent)</span></span><br><span class=\"line\"><span class=\"comment\">fileUrl:文件地址 </span></span><br><span class=\"line\"><span class=\"comment\">fileId:文件Id </span></span><br><span class=\"line\"><span class=\"comment\">defineFileName:自定义文件名，注意带后缀 </span></span><br><span class=\"line\"><span class=\"comment\">deleteFile:是否可删除文件 </span></span><br><span class=\"line\"><span class=\"comment\">downloadFile:是否可下载文件 </span></span><br><span class=\"line\"><span class=\"comment\">deleteEvent:删除文件事件 ，注意，返回只有一个数据：文件的ID（fileId）</span></span><br><span class=\"line\"><span class=\"comment\">downLoadEvent:下载文件事件，注意，返回有两个数据：文件的ID（fileId）和文件的地址（fileUrl）</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">关于上传注意事项：</span></span><br><span class=\"line\"><span class=\"comment\">1、可以同时关闭主进度条和文件进度条</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">2、如果没有进度信息，设置scheduleStandard:false,progressUrl:#,默认会上传到60%，然后根据后台返回的结果进行设置成功还是失败</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">3、如果是PHP开发，请使用上文文件参数迭代：files0，files1，files2，.........</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"后台部分\"><a href=\"#后台部分\" class=\"headerlink\" title=\"后台部分\"></a>后台部分</h1><p>后台使用springmvc，参考<a href=\"/fileUpload\">springmvc文件上传下载</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>今天整理了一个上传文件的基于Jquery开发的插件。<a href=\"http://www.jq22.com/jquery-info13450\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<p>提供单，多图片、文件上传；进度条支持；同步，异步上传等。</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>下载插件包，把文件复制到工程WEB-INF目录下</p>","more":"<p>应用实例</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"ch\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>文件上传案例<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/iconfont.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"css/fileUpload.css\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--创建一个文件上传的容器--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fileUploadContent\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fileUploadContent\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"success()\"</span>&gt;</span>模拟上传成功<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"fail()\"</span>&gt;</span>模拟上传失败<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"doc.html\"</span>&gt;</span>文档说明<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://www.jq22.com/jquery/jquery-2.1.1.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/fileUpload.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> wfu = <span class=\"keyword\">new</span> WpFileUpload(<span class=\"string\">\"fileUploadContent\"</span>);</span></span><br><span class=\"line\">    wfu.initUpload(&#123;</span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"uploadUrl\"</span>:<span class=\"string\">\"#\"</span>,<span class=\"comment\">//上传文件信息地址</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"progressUrl\"</span>:<span class=\"string\">\"#\"</span>,<span class=\"comment\">//获取进度信息地址，可选，注意需要返回的data格式如下（&#123;bytesRead: 102516060, contentLength: 102516060, items: 1, percent: 100, startTime: 1489223136317, useTime: 2767&#125;）</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"string\">\"scheduleStandard\"</span>:<span class=\"literal\">true</span>,</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// //显示文件，设置删除事件</span></span></span><br><span class=\"line\"><span class=\"javascript\">    wfu.showFileResult(<span class=\"string\">\"img/a2.png\"</span>,<span class=\"string\">\"1\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">true</span>,<span class=\"literal\">true</span>,deleteFileByMySelf,downloadByMySelf);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// //如果不需要删除</span></span></span><br><span class=\"line\"><span class=\"javascript\">    wfu.showFileResult(<span class=\"string\">\"img/a3.png\"</span>,<span class=\"string\">\"2\"</span>,<span class=\"literal\">null</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>,<span class=\"literal\">null</span>);</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"重要参数介绍\"><a href=\"#重要参数介绍\" class=\"headerlink\" title=\"重要参数介绍\"></a>重要参数介绍</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">let</span> wfu = <span class=\"keyword\">new</span> WpFileUpload(<span class=\"string\">\"fileUploadContent\"</span>);</span><br><span class=\"line\">    wfu.initUpload(&#123;</span><br><span class=\"line\">        <span class=\"string\">\"uploadUrl\"</span>:<span class=\"string\">\"#\"</span>,<span class=\"comment\">//上传文件信息地址</span></span><br><span class=\"line\">        <span class=\"string\">\"progressUrl\"</span>:<span class=\"string\">\"#\"</span>,<span class=\"comment\">//获取进度信息地址，可选，注意需要返回的data格式如下（&#123;bytesRead: 102516060, contentLength: 102516060, items: 1, percent: 100, startTime: 1489223136317, useTime: 2767&#125;）</span></span><br><span class=\"line\">        <span class=\"string\">\"scheduleStandard\"</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">      \t<span class=\"string\">\"selfUploadBtId\"</span>:<span class=\"string\">\"fileUploadId\"</span>,<span class=\"comment\">//自定义文件上传按钮ID</span></span><br><span class=\"line\">        <span class=\"string\">\"selfUploadBtId\"</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//\t是否记住已经上传过的文件，如果是记住，那么下次在上传的时候将不会允许，注意：当浏览器刷新的时候，这个设置将无效d</span></span><br><span class=\"line\">      \t<span class=\"string\">\"autoCommit\"</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//是否自动上传，如果为true的话，会根据配置的uploadUrl属性直接把文件上传到服务器</span></span><br><span class=\"line\">      \t<span class=\"string\">\"isHiddenUploadBt\"</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//是否隐藏上传按钮，这个上传按钮是选着文件旁边的那个按钮（如果设置为自动上传的话，该属性意义不大）</span></span><br><span class=\"line\">      \t<span class=\"string\">\"isHiddenCleanBt\"</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//是否隐藏清楚按钮</span></span><br><span class=\"line\">      \t<span class=\"string\">\"isAutoClean\"</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//上传完成后是否自动清除</span></span><br><span class=\"line\">      \t<span class=\"string\">\"fileType\"</span>:[<span class=\"string\">'png'</span>,<span class=\"string\">'docx'</span>],<span class=\"comment\">//文件类型限制，默认不限制，注意写的是文件后缀，如：['png','jpg','docx','doc']</span></span><br><span class=\"line\">      \t<span class=\"string\">\"size\"</span>:<span class=\"number\">1024</span>,<span class=\"comment\">//文件大小限制，单位kb</span></span><br><span class=\"line\">      \t<span class=\"string\">\"totalSize\"</span>:<span class=\"number\">51200</span>,<span class=\"comment\">//总上传文件的大小</span></span><br><span class=\"line\">      \t<span class=\"string\">\"maxFileNumber\"</span>:<span class=\"number\">12</span>,<span class=\"comment\">//每次上传文件的总个数限制</span></span><br><span class=\"line\">      \t<span class=\"string\">\"showSummerProgress\"</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//是否显示总进度条，默认显示</span></span><br><span class=\"line\">      \t<span class=\"string\">\"showFileItemProgress\"</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//是否显示单文件进度条，默认显示</span></span><br><span class=\"line\">      \t<span class=\"string\">\"showProgressNum\"</span>:<span class=\"literal\">false</span>,<span class=\"comment\">//是否显示进度条的值</span></span><br><span class=\"line\">      \t<span class=\"string\">\"uploadFileParamIteration\"</span>:<span class=\"literal\">true</span>,<span class=\"comment\">//要上传的文件参数是否迭代，如果true：files0，files1，files2...... ， 如果是false：所有的文件通过一个参数uploadFileParam所设定的值（默认：files）来上传文件</span></span><br><span class=\"line\">      \t<span class=\"string\">\"beforeUpload\"</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"文件上传之前\"</span>);</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(wfu.uploadFileParam);<span class=\"comment\">//uploadFileParam上传文件数据的参数，可以通过实例调用</span></span><br><span class=\"line\">      \t&#125;,</span><br><span class=\"line\">      \t<span class=\"string\">\"onUpload\"</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">\"文件上传完成\"</span>);</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(wfu.resultData);<span class=\"comment\">//resultData上传成功后返回的信息将会存在该参数下，可以通过实例调用</span></span><br><span class=\"line\">      \t&#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"><span class=\"comment\">//WpFileUpload的几个重要函数</span></span><br><span class=\"line\"><span class=\"comment\">//文件上传失败</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fialy</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  wfu.uploadError();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//文件上传成功</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileUploadSuccess</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  wfu.uploadSuccess();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteFileByMySelf</span>(<span class=\"params\">fileId</span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">\"要删除文件了：\"</span>+fileId);</span><br><span class=\"line\">\twfu.removeShowFileItem(fileId);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1、上传状态显示:</span></span><br><span class=\"line\"><span class=\"comment\">（1）上传失败：</span></span><br><span class=\"line\"><span class=\"comment\">wfu.uploadError();</span></span><br><span class=\"line\"><span class=\"comment\">（2）上传成功：</span></span><br><span class=\"line\"><span class=\"comment\">wfu.uploadSuccess();</span></span><br><span class=\"line\"><span class=\"comment\">2、删除回显的文件:</span></span><br><span class=\"line\"><span class=\"comment\">wfu.removeShowFileItem(fileId); // fileId指文件的Id</span></span><br><span class=\"line\"><span class=\"comment\">3、上传成功后回显文件:</span></span><br><span class=\"line\"><span class=\"comment\">wfu.showFileResult(fileUrl,fileId,defineFileName,deleteFile,downloadFile,deleteEvent,downLoadEvent)</span></span><br><span class=\"line\"><span class=\"comment\">fileUrl:文件地址 </span></span><br><span class=\"line\"><span class=\"comment\">fileId:文件Id </span></span><br><span class=\"line\"><span class=\"comment\">defineFileName:自定义文件名，注意带后缀 </span></span><br><span class=\"line\"><span class=\"comment\">deleteFile:是否可删除文件 </span></span><br><span class=\"line\"><span class=\"comment\">downloadFile:是否可下载文件 </span></span><br><span class=\"line\"><span class=\"comment\">deleteEvent:删除文件事件 ，注意，返回只有一个数据：文件的ID（fileId）</span></span><br><span class=\"line\"><span class=\"comment\">downLoadEvent:下载文件事件，注意，返回有两个数据：文件的ID（fileId）和文件的地址（fileUrl）</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">关于上传注意事项：</span></span><br><span class=\"line\"><span class=\"comment\">1、可以同时关闭主进度条和文件进度条</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">2、如果没有进度信息，设置scheduleStandard:false,progressUrl:#,默认会上传到60%，然后根据后台返回的结果进行设置成功还是失败</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">3、如果是PHP开发，请使用上文文件参数迭代：files0，files1，files2，.........</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"后台部分\"><a href=\"#后台部分\" class=\"headerlink\" title=\"后台部分\"></a>后台部分</h1><p>后台使用springmvc，参考<a href=\"/fileUpload\">springmvc文件上传下载</a></p>"},{"title":"spring factoryBean","date":"2018-06-29T06:33:46.000Z","_content":"\n在spring中，创建bean的方式有三种，前面已经介绍了使用全类名的方式，在applicationContext.xml中配置bean。下面介绍另外两种工厂方法和factory\n\n# 工厂方法\n\n## 静态工厂方法\n\n静态工厂是用来创建bean的（可以通过spring配置，把工厂配置好，我们直接从工厂里获取bean）\n\n<!-- more -->\n\n### 先创建一个工厂类\n\n```java\npackage example.spring.factory;\n\nimport example.spring.beans.Dome;\n\npublic class DomeFactory {\n\n    public static Dome getDomeInstance(){\n        Dome dome = new Dome();\n        //这里可以添加复杂的逻辑\n        dome.setName(\"factory\");\n        dome.setMessage(\"create object\");\n        return dome;\n    }\n}\n\n```\n\n### 声明工厂bean\n\n要声明通过静态工厂方法创建的**bean**，需要在bean标签的class属性里制定拥有该工厂方法的类。同时在factory-method属性里制定创建对象的工厂方法名称，最后使用<constrctor-arg>标签为该方法参数\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <bean id=\"dateFormat\" class=\"java.text.DateFormat\" factory-method=\"getDateInstance\">\n        <constructor-arg value=\"2\"></constructor-arg>\n    </bean>\n\n    <bean id=\"domeFactory\" class=\"example.spring.factory.DomeFactory\" factory-method=\"getDomeInstance\"></bean>\n</beans>\n```\n\n### 测试\n\n```java\npackage example.spring.test;\n\nimport example.spring.beans.Dome;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport java.text.DateFormat;\n\npublic class DateFormatTest {\n\n\n    public static void main(String[] args) {\n        ApplicationContext ac = new ClassPathXmlApplicationContext(\"config/application.xml\");\n        DateFormat df = (DateFormat) ac.getBean(\"dateFormat\");\n        System.out.println(df);\n\n        Dome domeFactory = (Dome) ac.getBean(\"domeFactory\");\n        System.out.println(domeFactory);\n    }\n}\n\n```\n\n### 输出\n\n>    java.text.SimpleDateFormat@ef7951d7\n>    Dome{name='factory', message='create object', adds=null}\n\n# FactoryBean\n\nFactoryBean 是用来创建 Bean 的工厂，实现 `FactoryBean 接口` 的类就可以用来创建其他 Bean 了，在 Bean Configuration File 里的 bean标签 里定义要生成的 Bean。\n\nFactoryBean 命名规范：`Bean 的类名` 后跟着 `FactoryBean`，例如创建 Dome的 FactoryBean 的类名应该为 DomeFactoryBean。\n\n如果 Bean 的创建不只是简单的 setter, constructor 注入，而是有其他的逻辑，这个时候就可以用 FactoryBean 来创建 Bean。\n\nFactoryBean 是很常见的，例如 Spring 集成 MyBatis 时用 SqlSessionFactoryBean 来创建 SqlSession。\n\n## 实现FactoryBean接口的类\n\n```java\npackage example.spring.factory;\n\nimport example.spring.beans.Dome;\nimport org.springframework.beans.factory.FactoryBean;\n\npublic class DomeFactoryBean implements FactoryBean<Dome> {\n    private String name;\n    private String message;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    @Override\n    public boolean isSingleton() {\n        return false;\n    }\n\n    @Override\n    public Dome getObject() throws Exception {\n        Dome dome = new Dome();\n        //可以添加业务逻辑\n        dome.setName(name);\n        dome.setMessage(message);\n        return dome;\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return null;\n    }\n}\n\n```\n\n## 配置bean\n\n和普通bean配置一样，只不过，他返回的是要生成的类，而不是这里配置的工厂类\n\n```xml\n<bean id=\"domeFactoryBean\" class=\"example.spring.factory.DomeFactoryBean\">\n        <property name=\"name\" value=\"tomBean\"></property>\n        <property name=\"message\" value=\"factory create dome\"></property>\n    </bean>\n```\n\n## 测试\n\n```java\npackage example.spring.test;\n\nimport example.spring.beans.Dome;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\npublic class DateFormatTest{\n\n\n    public static void main(String[] args) {\n        ApplicationContext ac = new ClassPathXmlApplicationContext(\"config/application.xml\");\n        Dome dome = (Dome) ac.getBean(\"domeFactoryBean\");\n        System.out.println(dome);\n\n    }\n}\n\n```\n\n结果\n\n>Dome{name='tomBean', message='factory create dome', adds=null}\n\n","source":"_posts/spring-factoryBean.md","raw":"---\ntitle: spring factoryBean\ndate: 2018-06-29 14:33:46\ntags: spring\n---\n\n在spring中，创建bean的方式有三种，前面已经介绍了使用全类名的方式，在applicationContext.xml中配置bean。下面介绍另外两种工厂方法和factory\n\n# 工厂方法\n\n## 静态工厂方法\n\n静态工厂是用来创建bean的（可以通过spring配置，把工厂配置好，我们直接从工厂里获取bean）\n\n<!-- more -->\n\n### 先创建一个工厂类\n\n```java\npackage example.spring.factory;\n\nimport example.spring.beans.Dome;\n\npublic class DomeFactory {\n\n    public static Dome getDomeInstance(){\n        Dome dome = new Dome();\n        //这里可以添加复杂的逻辑\n        dome.setName(\"factory\");\n        dome.setMessage(\"create object\");\n        return dome;\n    }\n}\n\n```\n\n### 声明工厂bean\n\n要声明通过静态工厂方法创建的**bean**，需要在bean标签的class属性里制定拥有该工厂方法的类。同时在factory-method属性里制定创建对象的工厂方法名称，最后使用<constrctor-arg>标签为该方法参数\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <bean id=\"dateFormat\" class=\"java.text.DateFormat\" factory-method=\"getDateInstance\">\n        <constructor-arg value=\"2\"></constructor-arg>\n    </bean>\n\n    <bean id=\"domeFactory\" class=\"example.spring.factory.DomeFactory\" factory-method=\"getDomeInstance\"></bean>\n</beans>\n```\n\n### 测试\n\n```java\npackage example.spring.test;\n\nimport example.spring.beans.Dome;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport java.text.DateFormat;\n\npublic class DateFormatTest {\n\n\n    public static void main(String[] args) {\n        ApplicationContext ac = new ClassPathXmlApplicationContext(\"config/application.xml\");\n        DateFormat df = (DateFormat) ac.getBean(\"dateFormat\");\n        System.out.println(df);\n\n        Dome domeFactory = (Dome) ac.getBean(\"domeFactory\");\n        System.out.println(domeFactory);\n    }\n}\n\n```\n\n### 输出\n\n>    java.text.SimpleDateFormat@ef7951d7\n>    Dome{name='factory', message='create object', adds=null}\n\n# FactoryBean\n\nFactoryBean 是用来创建 Bean 的工厂，实现 `FactoryBean 接口` 的类就可以用来创建其他 Bean 了，在 Bean Configuration File 里的 bean标签 里定义要生成的 Bean。\n\nFactoryBean 命名规范：`Bean 的类名` 后跟着 `FactoryBean`，例如创建 Dome的 FactoryBean 的类名应该为 DomeFactoryBean。\n\n如果 Bean 的创建不只是简单的 setter, constructor 注入，而是有其他的逻辑，这个时候就可以用 FactoryBean 来创建 Bean。\n\nFactoryBean 是很常见的，例如 Spring 集成 MyBatis 时用 SqlSessionFactoryBean 来创建 SqlSession。\n\n## 实现FactoryBean接口的类\n\n```java\npackage example.spring.factory;\n\nimport example.spring.beans.Dome;\nimport org.springframework.beans.factory.FactoryBean;\n\npublic class DomeFactoryBean implements FactoryBean<Dome> {\n    private String name;\n    private String message;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    @Override\n    public boolean isSingleton() {\n        return false;\n    }\n\n    @Override\n    public Dome getObject() throws Exception {\n        Dome dome = new Dome();\n        //可以添加业务逻辑\n        dome.setName(name);\n        dome.setMessage(message);\n        return dome;\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return null;\n    }\n}\n\n```\n\n## 配置bean\n\n和普通bean配置一样，只不过，他返回的是要生成的类，而不是这里配置的工厂类\n\n```xml\n<bean id=\"domeFactoryBean\" class=\"example.spring.factory.DomeFactoryBean\">\n        <property name=\"name\" value=\"tomBean\"></property>\n        <property name=\"message\" value=\"factory create dome\"></property>\n    </bean>\n```\n\n## 测试\n\n```java\npackage example.spring.test;\n\nimport example.spring.beans.Dome;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\npublic class DateFormatTest{\n\n\n    public static void main(String[] args) {\n        ApplicationContext ac = new ClassPathXmlApplicationContext(\"config/application.xml\");\n        Dome dome = (Dome) ac.getBean(\"domeFactoryBean\");\n        System.out.println(dome);\n\n    }\n}\n\n```\n\n结果\n\n>Dome{name='tomBean', message='factory create dome', adds=null}\n\n","slug":"spring-factoryBean","published":1,"updated":"2022-11-24T13:38:45.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1fd001i4ovkac0k80gm","content":"<p>在spring中，创建bean的方式有三种，前面已经介绍了使用全类名的方式，在applicationContext.xml中配置bean。下面介绍另外两种工厂方法和factory</p>\n<h1 id=\"工厂方法\"><a href=\"#工厂方法\" class=\"headerlink\" title=\"工厂方法\"></a>工厂方法</h1><h2 id=\"静态工厂方法\"><a href=\"#静态工厂方法\" class=\"headerlink\" title=\"静态工厂方法\"></a>静态工厂方法</h2><p>静态工厂是用来创建bean的（可以通过spring配置，把工厂配置好，我们直接从工厂里获取bean）</p>\n<a id=\"more\"></a>\n<h3 id=\"先创建一个工厂类\"><a href=\"#先创建一个工厂类\" class=\"headerlink\" title=\"先创建一个工厂类\"></a>先创建一个工厂类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Dome;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DomeFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Dome <span class=\"title\">getDomeInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Dome dome = <span class=\"keyword\">new</span> Dome();</span><br><span class=\"line\">        <span class=\"comment\">//这里可以添加复杂的逻辑</span></span><br><span class=\"line\">        dome.setName(<span class=\"string\">\"factory\"</span>);</span><br><span class=\"line\">        dome.setMessage(<span class=\"string\">\"create object\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dome;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明工厂bean\"><a href=\"#声明工厂bean\" class=\"headerlink\" title=\"声明工厂bean\"></a>声明工厂bean</h3><p>要声明通过静态工厂方法创建的<strong>bean</strong>，需要在bean标签的class属性里制定拥有该工厂方法的类。同时在factory-method属性里制定创建对象的工厂方法名称，最后使用<constrctor-arg>标签为该方法参数</constrctor-arg></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:util</span>=<span class=\"string\">\"http://www.springframework.org/schema/util\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dateFormat\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"java.text.DateFormat\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getDateInstance\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"domeFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.factory.DomeFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getDomeInstance\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Dome;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.DateFormat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateFormatTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext ac = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"config/application.xml\"</span>);</span><br><span class=\"line\">        DateFormat df = (DateFormat) ac.getBean(<span class=\"string\">\"dateFormat\"</span>);</span><br><span class=\"line\">        System.out.println(df);</span><br><span class=\"line\"></span><br><span class=\"line\">        Dome domeFactory = (Dome) ac.getBean(<span class=\"string\">\"domeFactory\"</span>);</span><br><span class=\"line\">        System.out.println(domeFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3><blockquote>\n<p>   java.text.SimpleDateFormat@ef7951d7<br>   Dome{name=’factory’, message=’create object’, adds=null}</p>\n</blockquote>\n<h1 id=\"FactoryBean\"><a href=\"#FactoryBean\" class=\"headerlink\" title=\"FactoryBean\"></a>FactoryBean</h1><p>FactoryBean 是用来创建 Bean 的工厂，实现 <code>FactoryBean 接口</code> 的类就可以用来创建其他 Bean 了，在 Bean Configuration File 里的 bean标签 里定义要生成的 Bean。</p>\n<p>FactoryBean 命名规范：<code>Bean 的类名</code> 后跟着 <code>FactoryBean</code>，例如创建 Dome的 FactoryBean 的类名应该为 DomeFactoryBean。</p>\n<p>如果 Bean 的创建不只是简单的 setter, constructor 注入，而是有其他的逻辑，这个时候就可以用 FactoryBean 来创建 Bean。</p>\n<p>FactoryBean 是很常见的，例如 Spring 集成 MyBatis 时用 SqlSessionFactoryBean 来创建 SqlSession。</p>\n<h2 id=\"实现FactoryBean接口的类\"><a href=\"#实现FactoryBean接口的类\" class=\"headerlink\" title=\"实现FactoryBean接口的类\"></a>实现FactoryBean接口的类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Dome;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DomeFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">FactoryBean</span>&lt;<span class=\"title\">Dome</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMessage</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSingleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Dome <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Dome dome = <span class=\"keyword\">new</span> Dome();</span><br><span class=\"line\">        <span class=\"comment\">//可以添加业务逻辑</span></span><br><span class=\"line\">        dome.setName(name);</span><br><span class=\"line\">        dome.setMessage(message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dome;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置bean\"><a href=\"#配置bean\" class=\"headerlink\" title=\"配置bean\"></a>配置bean</h2><p>和普通bean配置一样，只不过，他返回的是要生成的类，而不是这里配置的工厂类</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"domeFactoryBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.factory.DomeFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"tomBean\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"factory create dome\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Dome;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateFormatTest</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext ac = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"config/application.xml\"</span>);</span><br><span class=\"line\">        Dome dome = (Dome) ac.getBean(<span class=\"string\">\"domeFactoryBean\"</span>);</span><br><span class=\"line\">        System.out.println(dome);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<blockquote>\n<p>Dome{name=’tomBean’, message=’factory create dome’, adds=null}</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>在spring中，创建bean的方式有三种，前面已经介绍了使用全类名的方式，在applicationContext.xml中配置bean。下面介绍另外两种工厂方法和factory</p>\n<h1 id=\"工厂方法\"><a href=\"#工厂方法\" class=\"headerlink\" title=\"工厂方法\"></a>工厂方法</h1><h2 id=\"静态工厂方法\"><a href=\"#静态工厂方法\" class=\"headerlink\" title=\"静态工厂方法\"></a>静态工厂方法</h2><p>静态工厂是用来创建bean的（可以通过spring配置，把工厂配置好，我们直接从工厂里获取bean）</p>","more":"<h3 id=\"先创建一个工厂类\"><a href=\"#先创建一个工厂类\" class=\"headerlink\" title=\"先创建一个工厂类\"></a>先创建一个工厂类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Dome;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DomeFactory</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Dome <span class=\"title\">getDomeInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Dome dome = <span class=\"keyword\">new</span> Dome();</span><br><span class=\"line\">        <span class=\"comment\">//这里可以添加复杂的逻辑</span></span><br><span class=\"line\">        dome.setName(<span class=\"string\">\"factory\"</span>);</span><br><span class=\"line\">        dome.setMessage(<span class=\"string\">\"create object\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dome;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明工厂bean\"><a href=\"#声明工厂bean\" class=\"headerlink\" title=\"声明工厂bean\"></a>声明工厂bean</h3><p>要声明通过静态工厂方法创建的<strong>bean</strong>，需要在bean标签的class属性里制定拥有该工厂方法的类。同时在factory-method属性里制定创建对象的工厂方法名称，最后使用<constrctor-arg>标签为该方法参数</constrctor-arg></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:util</span>=<span class=\"string\">\"http://www.springframework.org/schema/util\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dateFormat\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"java.text.DateFormat\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getDateInstance\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"domeFactory\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.factory.DomeFactory\"</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">\"getDomeInstance\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Dome;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.DateFormat;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateFormatTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext ac = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"config/application.xml\"</span>);</span><br><span class=\"line\">        DateFormat df = (DateFormat) ac.getBean(<span class=\"string\">\"dateFormat\"</span>);</span><br><span class=\"line\">        System.out.println(df);</span><br><span class=\"line\"></span><br><span class=\"line\">        Dome domeFactory = (Dome) ac.getBean(<span class=\"string\">\"domeFactory\"</span>);</span><br><span class=\"line\">        System.out.println(domeFactory);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3><blockquote>\n<p>   java.text.SimpleDateFormat@ef7951d7<br>   Dome{name=’factory’, message=’create object’, adds=null}</p>\n</blockquote>\n<h1 id=\"FactoryBean\"><a href=\"#FactoryBean\" class=\"headerlink\" title=\"FactoryBean\"></a>FactoryBean</h1><p>FactoryBean 是用来创建 Bean 的工厂，实现 <code>FactoryBean 接口</code> 的类就可以用来创建其他 Bean 了，在 Bean Configuration File 里的 bean标签 里定义要生成的 Bean。</p>\n<p>FactoryBean 命名规范：<code>Bean 的类名</code> 后跟着 <code>FactoryBean</code>，例如创建 Dome的 FactoryBean 的类名应该为 DomeFactoryBean。</p>\n<p>如果 Bean 的创建不只是简单的 setter, constructor 注入，而是有其他的逻辑，这个时候就可以用 FactoryBean 来创建 Bean。</p>\n<p>FactoryBean 是很常见的，例如 Spring 集成 MyBatis 时用 SqlSessionFactoryBean 来创建 SqlSession。</p>\n<h2 id=\"实现FactoryBean接口的类\"><a href=\"#实现FactoryBean接口的类\" class=\"headerlink\" title=\"实现FactoryBean接口的类\"></a>实现FactoryBean接口的类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.factory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Dome;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DomeFactoryBean</span> <span class=\"keyword\">implements</span> <span class=\"title\">FactoryBean</span>&lt;<span class=\"title\">Dome</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMessage</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isSingleton</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Dome <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Dome dome = <span class=\"keyword\">new</span> Dome();</span><br><span class=\"line\">        <span class=\"comment\">//可以添加业务逻辑</span></span><br><span class=\"line\">        dome.setName(name);</span><br><span class=\"line\">        dome.setMessage(message);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dome;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置bean\"><a href=\"#配置bean\" class=\"headerlink\" title=\"配置bean\"></a>配置bean</h2><p>和普通bean配置一样，只不过，他返回的是要生成的类，而不是这里配置的工厂类</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"domeFactoryBean\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.factory.DomeFactoryBean\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"tomBean\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"factory create dome\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Dome;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DateFormatTest</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        ApplicationContext ac = <span class=\"keyword\">new</span> ClassPathXmlApplicationContext(<span class=\"string\">\"config/application.xml\"</span>);</span><br><span class=\"line\">        Dome dome = (Dome) ac.getBean(<span class=\"string\">\"domeFactoryBean\"</span>);</span><br><span class=\"line\">        System.out.println(dome);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<blockquote>\n<p>Dome{name=’tomBean’, message=’factory create dome’, adds=null}</p>\n</blockquote>"},{"title":"IDEA springboot 修改后自动编译部署","date":"2020-02-13T03:24:41.000Z","_content":"\n# 需求\n\n​\t在开发阶段，会经常修改代码，每次修改后都要重启应用才能看到效果，非常麻烦。\n\n# 解决\n\n1. 引入依赖\n\n   ```xml\n           <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-devtools</artifactId>\n               <optional>true</optional> <!-- 为true的时候才会生效 -->\n               <scope>runtime</scope>\n           </dependency>\n   \n   <!-- 引入插件 -->\n   \t<build>\n           <plugins>\n               <plugin>\n                   <groupId>org.springframework.boot</groupId>\n                   <artifactId>spring-boot-maven-plugin</artifactId>\n                   <configuration>\n                       <fork>true</fork>\n                       <addResources>true</addResources>\n                   </configuration>\n               </plugin>\n           </plugins>\n       </build>\n   ```\n\n   \n\n2. 修改IDEA配置\n\n   1.打开Settings(Ctrl+Shift+A)---》Build,Execution,Deployment --->compiler  \n\n   2.勾选 Build project automatically \n\n   3.apply\n\n3. 重启IDEA\n\n4. 测试","source":"_posts/springboot-automake.md","raw":"---\ntitle: IDEA springboot 修改后自动编译部署\ndate: 2020-02-13 11:24:41\ntags: springboot\n---\n\n# 需求\n\n​\t在开发阶段，会经常修改代码，每次修改后都要重启应用才能看到效果，非常麻烦。\n\n# 解决\n\n1. 引入依赖\n\n   ```xml\n           <dependency>\n               <groupId>org.springframework.boot</groupId>\n               <artifactId>spring-boot-devtools</artifactId>\n               <optional>true</optional> <!-- 为true的时候才会生效 -->\n               <scope>runtime</scope>\n           </dependency>\n   \n   <!-- 引入插件 -->\n   \t<build>\n           <plugins>\n               <plugin>\n                   <groupId>org.springframework.boot</groupId>\n                   <artifactId>spring-boot-maven-plugin</artifactId>\n                   <configuration>\n                       <fork>true</fork>\n                       <addResources>true</addResources>\n                   </configuration>\n               </plugin>\n           </plugins>\n       </build>\n   ```\n\n   \n\n2. 修改IDEA配置\n\n   1.打开Settings(Ctrl+Shift+A)---》Build,Execution,Deployment --->compiler  \n\n   2.勾选 Build project automatically \n\n   3.apply\n\n3. 重启IDEA\n\n4. 测试","slug":"springboot-automake","published":1,"updated":"2022-11-24T13:38:45.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1ff001l4ovk73h5yu5j","content":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>​    在开发阶段，会经常修改代码，每次修改后都要重启应用才能看到效果，非常麻烦。</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><ol>\n<li><p>引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span> <span class=\"comment\">&lt;!-- 为true的时候才会生效 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入插件 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">fork</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">fork</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">addResources</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">addResources</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>修改IDEA配置</p>\n<p>1.打开Settings(Ctrl+Shift+A)—》Build,Execution,Deployment —&gt;compiler  </p>\n<p>2.勾选 Build project automatically </p>\n<p>3.apply</p>\n</li>\n<li><p>重启IDEA</p>\n</li>\n<li><p>测试</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h1><p>​    在开发阶段，会经常修改代码，每次修改后都要重启应用才能看到效果，非常麻烦。</p>\n<h1 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h1><ol>\n<li><p>引入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-devtools<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span> <span class=\"comment\">&lt;!-- 为true的时候才会生效 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入插件 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">fork</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">fork</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">addResources</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">addResources</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>修改IDEA配置</p>\n<p>1.打开Settings(Ctrl+Shift+A)—》Build,Execution,Deployment —&gt;compiler  </p>\n<p>2.勾选 Build project automatically </p>\n<p>3.apply</p>\n</li>\n<li><p>重启IDEA</p>\n</li>\n<li><p>测试</p>\n</li>\n</ol>\n"},{"title":"spring tip","date":"2018-06-29T01:45:17.000Z","_content":"\n# 导入jar\n\n```xml\ndependencies {\n\n    compile(\n            \"org.springframework:spring-webmvc:${versions.spring}\",\n            \"org.springframework:spring-context-support:${versions.spring}\",\n            \"org.springframework:spring-jdbc:${versions.spring}\"\n    )\n    testCompile group: 'junit', name: 'junit', version: '4.11'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n    testCompile(\"org.springframework:spring-test:${versions.spring}\")\n}\n\n```\n\n<!-- more -->\n\n>    1.   org.springframework:spring-aop:5.0.2.RELEASE\n>    2.   spring-beans:\n>    3.   spring-context\n>    4.   spring-context-support\n>    5.   spring-core\n>    6.   spring-expression\n>    7.   spring-jcl\n>    8.   spring-jdbc\n>    9.   spring-test\n>    10.   spring-tx\n>    11.   spring-web\n>    12.   spring-webmvc\n>\n>\n\n# 创建application.xml\n\nspring的主配置文件，现在大部分都是用注解开发了，因此该配置文件并不主要用来配置bean的生成，可以打开注解扫描，配置系统其它主要配置项，导入其它模块配置文件等。总之作为一个主导整个程序的上下文。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n\n\n\n    <context:property-placeholder location=\"classpath:config/config.properties\"></context:property-placeholder>\n\n    <bean id=\"domeService\" class=\"example.spring.service.impl.DomeServiceImpl\">\n    </bean>\n    <!-- 1.属性注入 -->\n    <bean id=\"dome\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\" value=\"${uname}\"></property>\n        <property name=\"message\" value=\"${pwd}\"></property>\n    </bean>\n    <!-- 1.构造方法注入 -->\n    <bean id=\"dome1\" class=\"example.spring.beans.Dome\">\n        <constructor-arg name=\"name\" value=\"好好\"></constructor-arg>\n        <constructor-arg name=\"message\" value=\"好好\"></constructor-arg>\n    </bean>\n\n    <bean id=\"dome3\" class=\"example.spring.beans.Dome\">\n        <constructor-arg value=\"吃饭\" index=\"1\"></constructor-arg>\n        <constructor-arg value=\"好好\" index=\"0\"></constructor-arg>\n    </bean>\n\n    <!-- 当字面值有特殊字符的时候，需要使用<![CDATA[]]>，但是需要使用value子标签 -->\n    <bean id=\"dome4\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\">\n            <value><![CDATA[<张高峰>]]></value>\n        </property>\n        <property name=\"message\" value=\"测试\"></property>\n    </bean>\n    <bean id=\"dome5\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\" value=\"张高峰\"></property>\n        <property name=\"message\" value=\"测试\"></property>\n        <property name=\"adds\">\n            <list>\n                <value type=\"java.lang.String\">add1</value>\n                <value type=\"java.lang.String\">add2</value>\n                <value type=\"java.lang.String\">add3</value>\n            </list>\n        </property>\n    </bean>\n</beans>\n```\n\n## 属性注入\n\n```xml\n\t <!-- 1.属性注入 -->\n    <bean id=\"dome\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\" value=\"gaofeng\"></property>\n        <property name=\"message\" value=\"say hello\"></property>\n    </bean>\n    <!-- 当字面值有特殊字符的时候，需要使用<![CDATA[]]>，但是需要使用value子标签 -->\n    <bean id=\"dome4\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\">\n            <value><![CDATA[<张高峰>]]></value>\n        </property>\n        <property name=\"message\" value=\"测试\"></property>\n    </bean>\n\t<!-- 当有list属性或者数组属性时，可以使用list标签注入 -->\n  \t<bean id=\"dome5\" class=\"example.spring.beans.Dome\">\n          <property name=\"name\" value=\"张高峰\"></property>\n          <property name=\"message\" value=\"测试\"></property>\n          <property name=\"adds\">\n              <list>\n                  <value type=\"java.lang.String\">add1</value>\n                  <value type=\"java.lang.String\">add2</value>\n                  <value type=\"java.lang.String\">add3</value>\n              </list>\n          </property>\n      </bean>\n```\n\n##  构造器注入\n\n```xml\n \t<!-- 1.构造方法注入 -->\n    <bean id=\"dome1\" class=\"example.spring.beans.Dome\">\n        <constructor-arg name=\"name\" value=\"好好\"></constructor-arg>\n        <constructor-arg name=\"message\" value=\"好好\"></constructor-arg>\n    </bean>\n\n    <bean id=\"dome3\" class=\"example.spring.beans.Dome\">\n        <constructor-arg value=\"吃饭\" index=\"1\"></constructor-arg>\n        <constructor-arg value=\"好好\" index=\"0\"></constructor-arg>\n    </bean>\n\n```\n\n## 引入外部属性文件\n\n```xml\n\t<context:property-placeholder location=\"classpath:config/config.properties\">\t\t\t\t</context:property-placeholder>\n\t<bean id=\"dome\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\" value=\"${uname}\"></property>\n        <property name=\"message\" value=\"${pwd}\"></property>\n    </bean>\t\n\n```\n\n## ref注入\n\n```xml\n\t<bean id=\"domeService\" class=\"example.spring.service.impl.DomeServiceImpl\">\n        <property name=\"dome\" ref=\"dome\"></property>\n    </bean>\n    <!-- 1.属性注入 -->\n    <bean id=\"dome\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\" value=\"${uname}\"></property>\n        <property name=\"message\" value=\"${pwd}\"></property>\n    </bean>\n```\n\n## p标签\n\n引入p标签命名空间\n\n```xml\n\t<bean id=\"dome\" class=\"example.spring.beans.Dome\" p:name=\"jom\" p:message=\"a boy\"></bean>\n```\n\n## 作用域创建实例\n\n有四个作用域的值\n\n| 作用域       | 说明                    |\n| --------- | --------------------- |\n| singleton | 默认，单例                 |\n| request   | 调用获取实例方法时，每次请求创建一个实例  |\n| session   | 调用获取实例方法时，每次会话创建一个实例  |\n| prototype | 调用获取实例方法时，每次都创建一个新的实例 |\n\n```xml\n\t<bean id=\"dome5\" class=\"example.spring.beans.Dome\" scope=\"prototype\">\n        <property name=\"name\" value=\"张高峰\"></property>\n        <property name=\"message\" value=\"测试\"></property>\n    </bean>\n```\n\n## 自动装配\n\n自动装配使用bean标签的autowrie属性，该属性提供了四个值\n\n| 值           | 作用                                       |\n| ----------- | ---------------------------------------- |\n| byName      | 根据属性名字自动装配                               |\n| byType      | 根据属性类型自动装配，当根据类型自动装配时，如果上下文中有两个同一类型的bean时，会报异常。 |\n| constructor | 根据构造函数自动装配                               |\n| default     | 默认自动装配                                   |\n| no          | 不执行自动装配                                  |\n\n```xml\n\t<bean id=\"domeService\" class=\"example.spring.service.impl.DomeServiceImpl\" \t\t\t\t\t\t\tautowire=\"byName\">\n        <property name=\"dome\" ref=\"dome\"></property>\n    </bean>\n```\n\n在这里使用自动装配的功能，当只需要个别属性需要自动装配的时候，就显的不够灵活了。\n\n## 初始化方法，销毁方法\n\n当加载Spring容器的时候，会自动创建所有bean实例。每个bean被创建后，都可以设置初始化方法和销毁的时候调用的方法，使用bean标签的**init-method**,**destory-method**属性\n\n```xml\n\t<bean id=\"dome\" class=\"example.spring.beans.Dome\" init-method=\"a\" destroy-method=\"b\">\n        <property name=\"name\" value=\"${uname}\"></property>\n        <property name=\"message\" value=\"${pwd}\"></property>\n    </bean>\n```\n\n## 后置处理器\n\nspring提供的后置处理器，允许在调用初始化方法前后对Bean进行额外的处理。\n\n比如：当spring容器实例化Dome对象完成后，调用初始化方法的前后，对Dome对象进行正确性判断，或者改变Dome对象的值等。\n\n后置处理器，不是针对某一个bean的，是真多spring容器中的所有bean，都要经过后置处理器的处理\n\n可以通过实现BeanPostProcessor接口创建一个后置处理器\n\n```java\npackage example.spring.postProcessor;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\n\npublic class MyDomePostProcessor implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n\n        System.out.println(\"执行\"+beanName+\" 对象初始化方法之前\");\n        return bean;\n\n    }\n\n    /**\n     *\n     * @param bean 初始化的类\n     * @param beanName 初始化对象的名字\n     * @return\n     * @throws BeansException\n     */\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println(\"执行\"+beanName+\" 对象初始化方法之后\");\n        return bean;\n    }\n}\n\n```\n\n在spring配置文件中配置后置处理器的bean\n\n```xml\n<!-- 后置处理器 -->\n    <bean id=\"domePostProcessor\" class=\"example.spring.postProcessor.MyDomePostProcessor\"></bean>\n```\n\n测试\n\n```java\n\t\tpackage example.spring.test;\n\n\nimport example.spring.beans.Dome;\nimport example.spring.service.DomeService;\nimport example.spring.service.impl.DomeServiceImpl;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class DomeTest {\n\n    public static void main(String[] args) {\n\n        //加载xml，获取spring上下文容器\n        //当初始化spring容器的时候，就会创建好所有的单例对象\n        ApplicationContext ap = new  ClassPathXmlApplicationContext(\"config/application.xml\");\n        Dome d1 = (Dome) ap.getBean(\"dome\");\n\n\n    }\n}\n\n```\n\n输出\n\n>    create Dome\n>    执行dome 对象初始化方法之前\n>    class create\n>    执行dome 对象初始化方法之后\n\n","source":"_posts/spring-tip.md","raw":"---\ntitle: spring tip\ndate: 2018-06-29 09:45:17\ntags: spring\n---\n\n# 导入jar\n\n```xml\ndependencies {\n\n    compile(\n            \"org.springframework:spring-webmvc:${versions.spring}\",\n            \"org.springframework:spring-context-support:${versions.spring}\",\n            \"org.springframework:spring-jdbc:${versions.spring}\"\n    )\n    testCompile group: 'junit', name: 'junit', version: '4.11'\n    testCompile group: 'junit', name: 'junit', version: '4.12'\n    testCompile(\"org.springframework:spring-test:${versions.spring}\")\n}\n\n```\n\n<!-- more -->\n\n>    1.   org.springframework:spring-aop:5.0.2.RELEASE\n>    2.   spring-beans:\n>    3.   spring-context\n>    4.   spring-context-support\n>    5.   spring-core\n>    6.   spring-expression\n>    7.   spring-jcl\n>    8.   spring-jdbc\n>    9.   spring-test\n>    10.   spring-tx\n>    11.   spring-web\n>    12.   spring-webmvc\n>\n>\n\n# 创建application.xml\n\nspring的主配置文件，现在大部分都是用注解开发了，因此该配置文件并不主要用来配置bean的生成，可以打开注解扫描，配置系统其它主要配置项，导入其它模块配置文件等。总之作为一个主导整个程序的上下文。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\">\n\n\n\n    <context:property-placeholder location=\"classpath:config/config.properties\"></context:property-placeholder>\n\n    <bean id=\"domeService\" class=\"example.spring.service.impl.DomeServiceImpl\">\n    </bean>\n    <!-- 1.属性注入 -->\n    <bean id=\"dome\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\" value=\"${uname}\"></property>\n        <property name=\"message\" value=\"${pwd}\"></property>\n    </bean>\n    <!-- 1.构造方法注入 -->\n    <bean id=\"dome1\" class=\"example.spring.beans.Dome\">\n        <constructor-arg name=\"name\" value=\"好好\"></constructor-arg>\n        <constructor-arg name=\"message\" value=\"好好\"></constructor-arg>\n    </bean>\n\n    <bean id=\"dome3\" class=\"example.spring.beans.Dome\">\n        <constructor-arg value=\"吃饭\" index=\"1\"></constructor-arg>\n        <constructor-arg value=\"好好\" index=\"0\"></constructor-arg>\n    </bean>\n\n    <!-- 当字面值有特殊字符的时候，需要使用<![CDATA[]]>，但是需要使用value子标签 -->\n    <bean id=\"dome4\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\">\n            <value><![CDATA[<张高峰>]]></value>\n        </property>\n        <property name=\"message\" value=\"测试\"></property>\n    </bean>\n    <bean id=\"dome5\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\" value=\"张高峰\"></property>\n        <property name=\"message\" value=\"测试\"></property>\n        <property name=\"adds\">\n            <list>\n                <value type=\"java.lang.String\">add1</value>\n                <value type=\"java.lang.String\">add2</value>\n                <value type=\"java.lang.String\">add3</value>\n            </list>\n        </property>\n    </bean>\n</beans>\n```\n\n## 属性注入\n\n```xml\n\t <!-- 1.属性注入 -->\n    <bean id=\"dome\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\" value=\"gaofeng\"></property>\n        <property name=\"message\" value=\"say hello\"></property>\n    </bean>\n    <!-- 当字面值有特殊字符的时候，需要使用<![CDATA[]]>，但是需要使用value子标签 -->\n    <bean id=\"dome4\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\">\n            <value><![CDATA[<张高峰>]]></value>\n        </property>\n        <property name=\"message\" value=\"测试\"></property>\n    </bean>\n\t<!-- 当有list属性或者数组属性时，可以使用list标签注入 -->\n  \t<bean id=\"dome5\" class=\"example.spring.beans.Dome\">\n          <property name=\"name\" value=\"张高峰\"></property>\n          <property name=\"message\" value=\"测试\"></property>\n          <property name=\"adds\">\n              <list>\n                  <value type=\"java.lang.String\">add1</value>\n                  <value type=\"java.lang.String\">add2</value>\n                  <value type=\"java.lang.String\">add3</value>\n              </list>\n          </property>\n      </bean>\n```\n\n##  构造器注入\n\n```xml\n \t<!-- 1.构造方法注入 -->\n    <bean id=\"dome1\" class=\"example.spring.beans.Dome\">\n        <constructor-arg name=\"name\" value=\"好好\"></constructor-arg>\n        <constructor-arg name=\"message\" value=\"好好\"></constructor-arg>\n    </bean>\n\n    <bean id=\"dome3\" class=\"example.spring.beans.Dome\">\n        <constructor-arg value=\"吃饭\" index=\"1\"></constructor-arg>\n        <constructor-arg value=\"好好\" index=\"0\"></constructor-arg>\n    </bean>\n\n```\n\n## 引入外部属性文件\n\n```xml\n\t<context:property-placeholder location=\"classpath:config/config.properties\">\t\t\t\t</context:property-placeholder>\n\t<bean id=\"dome\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\" value=\"${uname}\"></property>\n        <property name=\"message\" value=\"${pwd}\"></property>\n    </bean>\t\n\n```\n\n## ref注入\n\n```xml\n\t<bean id=\"domeService\" class=\"example.spring.service.impl.DomeServiceImpl\">\n        <property name=\"dome\" ref=\"dome\"></property>\n    </bean>\n    <!-- 1.属性注入 -->\n    <bean id=\"dome\" class=\"example.spring.beans.Dome\">\n        <property name=\"name\" value=\"${uname}\"></property>\n        <property name=\"message\" value=\"${pwd}\"></property>\n    </bean>\n```\n\n## p标签\n\n引入p标签命名空间\n\n```xml\n\t<bean id=\"dome\" class=\"example.spring.beans.Dome\" p:name=\"jom\" p:message=\"a boy\"></bean>\n```\n\n## 作用域创建实例\n\n有四个作用域的值\n\n| 作用域       | 说明                    |\n| --------- | --------------------- |\n| singleton | 默认，单例                 |\n| request   | 调用获取实例方法时，每次请求创建一个实例  |\n| session   | 调用获取实例方法时，每次会话创建一个实例  |\n| prototype | 调用获取实例方法时，每次都创建一个新的实例 |\n\n```xml\n\t<bean id=\"dome5\" class=\"example.spring.beans.Dome\" scope=\"prototype\">\n        <property name=\"name\" value=\"张高峰\"></property>\n        <property name=\"message\" value=\"测试\"></property>\n    </bean>\n```\n\n## 自动装配\n\n自动装配使用bean标签的autowrie属性，该属性提供了四个值\n\n| 值           | 作用                                       |\n| ----------- | ---------------------------------------- |\n| byName      | 根据属性名字自动装配                               |\n| byType      | 根据属性类型自动装配，当根据类型自动装配时，如果上下文中有两个同一类型的bean时，会报异常。 |\n| constructor | 根据构造函数自动装配                               |\n| default     | 默认自动装配                                   |\n| no          | 不执行自动装配                                  |\n\n```xml\n\t<bean id=\"domeService\" class=\"example.spring.service.impl.DomeServiceImpl\" \t\t\t\t\t\t\tautowire=\"byName\">\n        <property name=\"dome\" ref=\"dome\"></property>\n    </bean>\n```\n\n在这里使用自动装配的功能，当只需要个别属性需要自动装配的时候，就显的不够灵活了。\n\n## 初始化方法，销毁方法\n\n当加载Spring容器的时候，会自动创建所有bean实例。每个bean被创建后，都可以设置初始化方法和销毁的时候调用的方法，使用bean标签的**init-method**,**destory-method**属性\n\n```xml\n\t<bean id=\"dome\" class=\"example.spring.beans.Dome\" init-method=\"a\" destroy-method=\"b\">\n        <property name=\"name\" value=\"${uname}\"></property>\n        <property name=\"message\" value=\"${pwd}\"></property>\n    </bean>\n```\n\n## 后置处理器\n\nspring提供的后置处理器，允许在调用初始化方法前后对Bean进行额外的处理。\n\n比如：当spring容器实例化Dome对象完成后，调用初始化方法的前后，对Dome对象进行正确性判断，或者改变Dome对象的值等。\n\n后置处理器，不是针对某一个bean的，是真多spring容器中的所有bean，都要经过后置处理器的处理\n\n可以通过实现BeanPostProcessor接口创建一个后置处理器\n\n```java\npackage example.spring.postProcessor;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\n\npublic class MyDomePostProcessor implements BeanPostProcessor {\n\n    @Override\n    public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n\n        System.out.println(\"执行\"+beanName+\" 对象初始化方法之前\");\n        return bean;\n\n    }\n\n    /**\n     *\n     * @param bean 初始化的类\n     * @param beanName 初始化对象的名字\n     * @return\n     * @throws BeansException\n     */\n    @Override\n    public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n        System.out.println(\"执行\"+beanName+\" 对象初始化方法之后\");\n        return bean;\n    }\n}\n\n```\n\n在spring配置文件中配置后置处理器的bean\n\n```xml\n<!-- 后置处理器 -->\n    <bean id=\"domePostProcessor\" class=\"example.spring.postProcessor.MyDomePostProcessor\"></bean>\n```\n\n测试\n\n```java\n\t\tpackage example.spring.test;\n\n\nimport example.spring.beans.Dome;\nimport example.spring.service.DomeService;\nimport example.spring.service.impl.DomeServiceImpl;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class DomeTest {\n\n    public static void main(String[] args) {\n\n        //加载xml，获取spring上下文容器\n        //当初始化spring容器的时候，就会创建好所有的单例对象\n        ApplicationContext ap = new  ClassPathXmlApplicationContext(\"config/application.xml\");\n        Dome d1 = (Dome) ap.getBean(\"dome\");\n\n\n    }\n}\n\n```\n\n输出\n\n>    create Dome\n>    执行dome 对象初始化方法之前\n>    class create\n>    执行dome 对象初始化方法之后\n\n","slug":"spring-tip","published":1,"updated":"2022-11-24T13:38:45.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1fg001n4ovk8ixu508s","content":"<h1 id=\"导入jar\"><a href=\"#导入jar\" class=\"headerlink\" title=\"导入jar\"></a>导入jar</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    compile(</span><br><span class=\"line\">            \"org.springframework:spring-webmvc:$&#123;versions.spring&#125;\",</span><br><span class=\"line\">            \"org.springframework:spring-context-support:$&#123;versions.spring&#125;\",</span><br><span class=\"line\">            \"org.springframework:spring-jdbc:$&#123;versions.spring&#125;\"</span><br><span class=\"line\">    )</span><br><span class=\"line\">    testCompile group: 'junit', name: 'junit', version: '4.11'</span><br><span class=\"line\">    testCompile group: 'junit', name: 'junit', version: '4.12'</span><br><span class=\"line\">    testCompile(\"org.springframework:spring-test:$&#123;versions.spring&#125;\")</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<ol>\n<li>org.springframework:spring-aop:5.0.2.RELEASE</li>\n<li>spring-beans:</li>\n<li>spring-context</li>\n<li>spring-context-support</li>\n<li>spring-core</li>\n<li>spring-expression</li>\n<li>spring-jcl</li>\n<li>spring-jdbc</li>\n<li>spring-test</li>\n<li>spring-tx</li>\n<li>spring-web</li>\n<li>spring-webmvc</li>\n</ol>\n</blockquote>\n<h1 id=\"创建application-xml\"><a href=\"#创建application-xml\" class=\"headerlink\" title=\"创建application.xml\"></a>创建application.xml</h1><p>spring的主配置文件，现在大部分都是用注解开发了，因此该配置文件并不主要用来配置bean的生成，可以打开注解扫描，配置系统其它主要配置项，导入其它模块配置文件等。总之作为一个主导整个程序的上下文。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:util</span>=<span class=\"string\">\"http://www.springframework.org/schema/util\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:config/config.properties\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:property-placeholder</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"domeService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.service.impl.DomeServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 1.属性注入 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;pwd&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 1.构造方法注入 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"好好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"好好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"吃饭\"</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"好好\"</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 当字面值有特殊字符的时候，需要使用&lt;![CDATA[]]&gt;，但是需要使用value子标签 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome4\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>&lt;![CDATA[&lt;张高峰&gt;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"测试\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome5\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"张高峰\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"测试\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"adds\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span>&gt;</span>add1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span>&gt;</span>add2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span>&gt;</span>add3<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"属性注入\"><a href=\"#属性注入\" class=\"headerlink\" title=\"属性注入\"></a>属性注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 1.属性注入 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"gaofeng\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"say hello\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 当字面值有特殊字符的时候，需要使用&lt;![CDATA[]]&gt;，但是需要使用value子标签 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome4\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>&lt;![CDATA[&lt;张高峰&gt;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"测试\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 当有list属性或者数组属性时，可以使用list标签注入 --&gt;</span></span><br><span class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome5\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"张高峰\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"测试\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"adds\"</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">value</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span>&gt;</span>add1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">value</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span>&gt;</span>add2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">value</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span>&gt;</span>add3<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"构造器注入\"><a href=\"#构造器注入\" class=\"headerlink\" title=\"构造器注入\"></a>构造器注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 1.构造方法注入 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"好好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"好好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"吃饭\"</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"好好\"</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"引入外部属性文件\"><a href=\"#引入外部属性文件\" class=\"headerlink\" title=\"引入外部属性文件\"></a>引入外部属性文件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:config/config.properties\"</span>&gt;</span>\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">context:property-placeholder</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;pwd&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"ref注入\"><a href=\"#ref注入\" class=\"headerlink\" title=\"ref注入\"></a>ref注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"domeService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.service.impl.DomeServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dome\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 1.属性注入 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;pwd&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"p标签\"><a href=\"#p标签\" class=\"headerlink\" title=\"p标签\"></a>p标签</h2><p>引入p标签命名空间</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span> <span class=\"attr\">p:name</span>=<span class=\"string\">\"jom\"</span> <span class=\"attr\">p:message</span>=<span class=\"string\">\"a boy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"作用域创建实例\"><a href=\"#作用域创建实例\" class=\"headerlink\" title=\"作用域创建实例\"></a>作用域创建实例</h2><p>有四个作用域的值</p>\n<table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>singleton</td>\n<td>默认，单例</td>\n</tr>\n<tr>\n<td>request</td>\n<td>调用获取实例方法时，每次请求创建一个实例</td>\n</tr>\n<tr>\n<td>session</td>\n<td>调用获取实例方法时，每次会话创建一个实例</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>调用获取实例方法时，每次都创建一个新的实例</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome5\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"张高峰\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"测试\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"自动装配\"><a href=\"#自动装配\" class=\"headerlink\" title=\"自动装配\"></a>自动装配</h2><p>自动装配使用bean标签的autowrie属性，该属性提供了四个值</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byName</td>\n<td>根据属性名字自动装配</td>\n</tr>\n<tr>\n<td>byType</td>\n<td>根据属性类型自动装配，当根据类型自动装配时，如果上下文中有两个同一类型的bean时，会报异常。</td>\n</tr>\n<tr>\n<td>constructor</td>\n<td>根据构造函数自动装配</td>\n</tr>\n<tr>\n<td>default</td>\n<td>默认自动装配</td>\n</tr>\n<tr>\n<td>no</td>\n<td>不执行自动装配</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"domeService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.service.impl.DomeServiceImpl\"</span> \t\t\t\t\t\t\t<span class=\"attr\">autowire</span>=<span class=\"string\">\"byName\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dome\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在这里使用自动装配的功能，当只需要个别属性需要自动装配的时候，就显的不够灵活了。</p>\n<h2 id=\"初始化方法，销毁方法\"><a href=\"#初始化方法，销毁方法\" class=\"headerlink\" title=\"初始化方法，销毁方法\"></a>初始化方法，销毁方法</h2><p>当加载Spring容器的时候，会自动创建所有bean实例。每个bean被创建后，都可以设置初始化方法和销毁的时候调用的方法，使用bean标签的<strong>init-method</strong>,<strong>destory-method</strong>属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span> <span class=\"attr\">init-method</span>=<span class=\"string\">\"a\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"b\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;pwd&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"后置处理器\"><a href=\"#后置处理器\" class=\"headerlink\" title=\"后置处理器\"></a>后置处理器</h2><p>spring提供的后置处理器，允许在调用初始化方法前后对Bean进行额外的处理。</p>\n<p>比如：当spring容器实例化Dome对象完成后，调用初始化方法的前后，对Dome对象进行正确性判断，或者改变Dome对象的值等。</p>\n<p>后置处理器，不是针对某一个bean的，是真多spring容器中的所有bean，都要经过后置处理器的处理</p>\n<p>可以通过实现BeanPostProcessor接口创建一个后置处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.postProcessor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDomePostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanPostProcessor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行\"</span>+beanName+<span class=\"string\">\" 对象初始化方法之前\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> bean 初始化的类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> beanName 初始化对象的名字</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> BeansException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行\"</span>+beanName+<span class=\"string\">\" 对象初始化方法之后\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在spring配置文件中配置后置处理器的bean</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 后置处理器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"domePostProcessor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.postProcessor.MyDomePostProcessor\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"keyword\">package</span> example.spring.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Dome;</span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.service.DomeService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.service.impl.DomeServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DomeTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加载xml，获取spring上下文容器</span></span><br><span class=\"line\">        <span class=\"comment\">//当初始化spring容器的时候，就会创建好所有的单例对象</span></span><br><span class=\"line\">        ApplicationContext ap = <span class=\"keyword\">new</span>  ClassPathXmlApplicationContext(<span class=\"string\">\"config/application.xml\"</span>);</span><br><span class=\"line\">        Dome d1 = (Dome) ap.getBean(<span class=\"string\">\"dome\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<blockquote>\n<p>   create Dome<br>   执行dome 对象初始化方法之前<br>   class create<br>   执行dome 对象初始化方法之后</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h1 id=\"导入jar\"><a href=\"#导入jar\" class=\"headerlink\" title=\"导入jar\"></a>导入jar</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    compile(</span><br><span class=\"line\">            \"org.springframework:spring-webmvc:$&#123;versions.spring&#125;\",</span><br><span class=\"line\">            \"org.springframework:spring-context-support:$&#123;versions.spring&#125;\",</span><br><span class=\"line\">            \"org.springframework:spring-jdbc:$&#123;versions.spring&#125;\"</span><br><span class=\"line\">    )</span><br><span class=\"line\">    testCompile group: 'junit', name: 'junit', version: '4.11'</span><br><span class=\"line\">    testCompile group: 'junit', name: 'junit', version: '4.12'</span><br><span class=\"line\">    testCompile(\"org.springframework:spring-test:$&#123;versions.spring&#125;\")</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<ol>\n<li>org.springframework:spring-aop:5.0.2.RELEASE</li>\n<li>spring-beans:</li>\n<li>spring-context</li>\n<li>spring-context-support</li>\n<li>spring-core</li>\n<li>spring-expression</li>\n<li>spring-jcl</li>\n<li>spring-jdbc</li>\n<li>spring-test</li>\n<li>spring-tx</li>\n<li>spring-web</li>\n<li>spring-webmvc</li>\n</ol>\n</blockquote>\n<h1 id=\"创建application-xml\"><a href=\"#创建application-xml\" class=\"headerlink\" title=\"创建application.xml\"></a>创建application.xml</h1><p>spring的主配置文件，现在大部分都是用注解开发了，因此该配置文件并不主要用来配置bean的生成，可以打开注解扫描，配置系统其它主要配置项，导入其它模块配置文件等。总之作为一个主导整个程序的上下文。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span> <span class=\"attr\">xmlns:util</span>=<span class=\"string\">\"http://www.springframework.org/schema/util\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">\"http://www.springframework.org/schema/context\"</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:config/config.properties\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">context:property-placeholder</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"domeService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.service.impl.DomeServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 1.属性注入 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;pwd&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 1.构造方法注入 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"好好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"好好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"吃饭\"</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"好好\"</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 当字面值有特殊字符的时候，需要使用&lt;![CDATA[]]&gt;，但是需要使用value子标签 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome4\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>&lt;![CDATA[&lt;张高峰&gt;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"测试\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome5\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"张高峰\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"测试\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"adds\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span>&gt;</span>add1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span>&gt;</span>add2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">value</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span>&gt;</span>add3<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"属性注入\"><a href=\"#属性注入\" class=\"headerlink\" title=\"属性注入\"></a>属性注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">&lt;!-- 1.属性注入 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"gaofeng\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"say hello\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 当字面值有特殊字符的时候，需要使用&lt;![CDATA[]]&gt;，但是需要使用value子标签 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome4\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span>&gt;</span></span><br><span class=\"line\">           <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>&lt;![CDATA[&lt;张高峰&gt;]]&gt;<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"测试\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 当有list属性或者数组属性时，可以使用list标签注入 --&gt;</span></span><br><span class=\"line\"> \t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome5\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"张高峰\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"测试\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"adds\"</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">value</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span>&gt;</span>add1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">value</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span>&gt;</span>add2<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">                 <span class=\"tag\">&lt;<span class=\"name\">value</span> <span class=\"attr\">type</span>=<span class=\"string\">\"java.lang.String\"</span>&gt;</span>add3<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">             <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">         <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"构造器注入\"><a href=\"#构造器注入\" class=\"headerlink\" title=\"构造器注入\"></a>构造器注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 1.构造方法注入 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome1\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"好好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"好好\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome3\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"吃饭\"</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"好好\"</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"引入外部属性文件\"><a href=\"#引入外部属性文件\" class=\"headerlink\" title=\"引入外部属性文件\"></a>引入外部属性文件</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:property-placeholder</span> <span class=\"attr\">location</span>=<span class=\"string\">\"classpath:config/config.properties\"</span>&gt;</span>\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">context:property-placeholder</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;pwd&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"ref注入\"><a href=\"#ref注入\" class=\"headerlink\" title=\"ref注入\"></a>ref注入</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"domeService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.service.impl.DomeServiceImpl\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dome\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">   <span class=\"comment\">&lt;!-- 1.属性注入 --&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;pwd&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"p标签\"><a href=\"#p标签\" class=\"headerlink\" title=\"p标签\"></a>p标签</h2><p>引入p标签命名空间</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span> <span class=\"attr\">p:name</span>=<span class=\"string\">\"jom\"</span> <span class=\"attr\">p:message</span>=<span class=\"string\">\"a boy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"作用域创建实例\"><a href=\"#作用域创建实例\" class=\"headerlink\" title=\"作用域创建实例\"></a>作用域创建实例</h2><p>有四个作用域的值</p>\n<table>\n<thead>\n<tr>\n<th>作用域</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>singleton</td>\n<td>默认，单例</td>\n</tr>\n<tr>\n<td>request</td>\n<td>调用获取实例方法时，每次请求创建一个实例</td>\n</tr>\n<tr>\n<td>session</td>\n<td>调用获取实例方法时，每次会话创建一个实例</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>调用获取实例方法时，每次都创建一个新的实例</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome5\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span> <span class=\"attr\">scope</span>=<span class=\"string\">\"prototype\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"张高峰\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"测试\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"自动装配\"><a href=\"#自动装配\" class=\"headerlink\" title=\"自动装配\"></a>自动装配</h2><p>自动装配使用bean标签的autowrie属性，该属性提供了四个值</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byName</td>\n<td>根据属性名字自动装配</td>\n</tr>\n<tr>\n<td>byType</td>\n<td>根据属性类型自动装配，当根据类型自动装配时，如果上下文中有两个同一类型的bean时，会报异常。</td>\n</tr>\n<tr>\n<td>constructor</td>\n<td>根据构造函数自动装配</td>\n</tr>\n<tr>\n<td>default</td>\n<td>默认自动装配</td>\n</tr>\n<tr>\n<td>no</td>\n<td>不执行自动装配</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"domeService\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.service.impl.DomeServiceImpl\"</span> \t\t\t\t\t\t\t<span class=\"attr\">autowire</span>=<span class=\"string\">\"byName\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dome\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在这里使用自动装配的功能，当只需要个别属性需要自动装配的时候，就显的不够灵活了。</p>\n<h2 id=\"初始化方法，销毁方法\"><a href=\"#初始化方法，销毁方法\" class=\"headerlink\" title=\"初始化方法，销毁方法\"></a>初始化方法，销毁方法</h2><p>当加载Spring容器的时候，会自动创建所有bean实例。每个bean被创建后，都可以设置初始化方法和销毁的时候调用的方法，使用bean标签的<strong>init-method</strong>,<strong>destory-method</strong>属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dome\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.beans.Dome\"</span> <span class=\"attr\">init-method</span>=<span class=\"string\">\"a\"</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">\"b\"</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"name\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"$&#123;pwd&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"后置处理器\"><a href=\"#后置处理器\" class=\"headerlink\" title=\"后置处理器\"></a>后置处理器</h2><p>spring提供的后置处理器，允许在调用初始化方法前后对Bean进行额外的处理。</p>\n<p>比如：当spring容器实例化Dome对象完成后，调用初始化方法的前后，对Dome对象进行正确性判断，或者改变Dome对象的值等。</p>\n<p>后置处理器，不是针对某一个bean的，是真多spring容器中的所有bean，都要经过后置处理器的处理</p>\n<p>可以通过实现BeanPostProcessor接口创建一个后置处理器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> example.spring.postProcessor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyDomePostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanPostProcessor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行\"</span>+beanName+<span class=\"string\">\" 对象初始化方法之前\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> bean 初始化的类</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> beanName 初始化对象的名字</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> BeansException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行\"</span>+beanName+<span class=\"string\">\" 对象初始化方法之后\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在spring配置文件中配置后置处理器的bean</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 后置处理器 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"domePostProcessor\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"example.spring.postProcessor.MyDomePostProcessor\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t<span class=\"keyword\">package</span> example.spring.test;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.beans.Dome;</span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.service.DomeService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> example.spring.service.impl.DomeServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DomeTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//加载xml，获取spring上下文容器</span></span><br><span class=\"line\">        <span class=\"comment\">//当初始化spring容器的时候，就会创建好所有的单例对象</span></span><br><span class=\"line\">        ApplicationContext ap = <span class=\"keyword\">new</span>  ClassPathXmlApplicationContext(<span class=\"string\">\"config/application.xml\"</span>);</span><br><span class=\"line\">        Dome d1 = (Dome) ap.getBean(<span class=\"string\">\"dome\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<blockquote>\n<p>   create Dome<br>   执行dome 对象初始化方法之前<br>   class create<br>   执行dome 对象初始化方法之后</p>\n</blockquote>"},{"title":"Spring接受请求的输入","date":"2018-09-18T02:06:08.000Z","_content":"\n# Spring MVC接受请求的输入\n\nspringmvc允许以多种方式将客户端的数据传递到控制器的处理方法中，包括\n\n​\t查询参数（Query Parameter）\n\n​\t表单参数（Form Parameter）\n\n​\t路径变量（Path Variable）\n\n<!-- more -->\n\n# 查询参数\n\n```java\n/**\n\t * 查询参数\n\t * 1.可以处理get或者post请求中的查询参数，例如  query?uname=张高峰&pass=123456;或者post表单中的参数。\n\t * 2.使用@RequestParam注解映射参数：当连接中的查询参数和方法中的形参名称不一致时，需要使用name属性说明；required属性表示是否必须。\n\t * 3.该注解可以试着默认值\n\t * @param uname\n\t * @param pass\n\t * @param model\n\t * @return\n\t */\n\t@RequestMapping(value = \"/query\", method = RequestMethod.GET)\n\tpublic String queryParameter(@RequestParam(name = \"uname\", defaultValue = \"peak\", required = false) String uname,\n\t\t\t@RequestParam String pass, Model model) {\n\n\t\tmodel.addAttribute(\"uname\", uname);\n\t\tmodel.addAttribute(\"pass\", pass);\n\n\t\treturn \"query\";\n\t}\n```\n\n>    http://localhost/spittr/param/query?uname=gaofeng&pass=123 \n>\n>    页面输出：gaofeng======123\n\n>    当不给uname设定值的时候\n>\n>    http://localhost/spittr/param/query?uname=&pass=123\n>\n>    页面输出：peak=====123 //会使用设置的默认值\n\n>http://localhost/spittr/param/query?uname=gaofeng\n>\n>页面报错：HTTP Status 400 - Required String parameter 'pass' is not present\n\n# 路径参数\n\n```java\n/**\n\t * 路径参数 1.该种类型的参数也可以使用@RequestParameter注解\n\t * 2.建议使用@PathVariable，路径参数需要用大括号括起来，作为占位符；当连接中的路径参数和方法中的形参名称不一致时，需要使用name属性说明\n\t * \n\t * @param uid\n\t * @param account\n\t * @param model\n\t * @return\n\t */\n\t@RequestMapping(value = \"/pathparam/{userId}/{account}\", method = RequestMethod.GET)\n\tpublic String pathParameter(@PathVariable(name = \"userId\") Long uid, @PathVariable String account, Model model) {\n\t\tmodel.addAttribute(\"uid\", uid);\n\t\tmodel.addAttribute(\"account\", account);\n\t\treturn \"pathParam\";\n\t}\n\n    // 还支持正则表达式的方式\n    @RequestMapping(\"/regex/{text:[a-z]+}-{number:\\\\d+}\")\n    @ResponseBody\n    public String three(@PathVariable String text, @PathVariable Integer number) {\n        return \"Text: \" + text + \", Number: \" + number;\n    }\n  \n    // 路径中有 . 时需要用正则，如 http://localhost:8080//question-img/GYYK034C/Aimage002.jpg\n    @GetMapping(\"/question-img/{subjectCode}/{imageName:.+}\")\n    public void readQuestionImage(@PathVariable String subjectCode, @PathVariable String imageName) {\n        ...\n    }\n```\n\n>    http://localhost/spittr/param/pathparam/123/zhanggf\n>\n>    页面输出：123=====zhanggf\n\n# 表单数据\n\n```java\n/**\n\t * 表单数据，可以使用@ModelAttribute注解做映射，匹配页面上相同名称的表单元素，如果有则映射，如果没有则不管。该注解可以省略。\n\t * @param spittle\n\t * @param model\n\t * @return\n\t */\n\t@RequestMapping(value = \"/reg\", method = RequestMethod.POST)\n\tpublic String regSave(@ModelAttribute Spittle spittle, Model model) {\n\t\tmodel.addAttribute(\"spi\", spittle);\n\t\tSystem.out.println(spittle.toString());\n\t\treturn \"redirect:success\";\n\t}\n```\n\n```html\n\t<form method=\"post\">\n\t\tmessage:<input type=\"text\" name=\"message\"></br>\n\t\tlatitude:<input type=\"text\" name=\"latitude\"></br>\n\t\tlongitude:<input type=\"text\" name=\"longitude\"></br>\n\t\t<button type=\"submit\">reg</button>\n\t</form>\n```\n\n>    Spittle [id=0, message=斯蒂芬斯蒂芬, time=null, latitude=3.0, longitude=4.0]\n\n自动映射了。","source":"_posts/springparam.md","raw":"---\ntitle: Spring接受请求的输入\ndate: 2018-09-18 10:06:08\ntags: springmvc\n---\n\n# Spring MVC接受请求的输入\n\nspringmvc允许以多种方式将客户端的数据传递到控制器的处理方法中，包括\n\n​\t查询参数（Query Parameter）\n\n​\t表单参数（Form Parameter）\n\n​\t路径变量（Path Variable）\n\n<!-- more -->\n\n# 查询参数\n\n```java\n/**\n\t * 查询参数\n\t * 1.可以处理get或者post请求中的查询参数，例如  query?uname=张高峰&pass=123456;或者post表单中的参数。\n\t * 2.使用@RequestParam注解映射参数：当连接中的查询参数和方法中的形参名称不一致时，需要使用name属性说明；required属性表示是否必须。\n\t * 3.该注解可以试着默认值\n\t * @param uname\n\t * @param pass\n\t * @param model\n\t * @return\n\t */\n\t@RequestMapping(value = \"/query\", method = RequestMethod.GET)\n\tpublic String queryParameter(@RequestParam(name = \"uname\", defaultValue = \"peak\", required = false) String uname,\n\t\t\t@RequestParam String pass, Model model) {\n\n\t\tmodel.addAttribute(\"uname\", uname);\n\t\tmodel.addAttribute(\"pass\", pass);\n\n\t\treturn \"query\";\n\t}\n```\n\n>    http://localhost/spittr/param/query?uname=gaofeng&pass=123 \n>\n>    页面输出：gaofeng======123\n\n>    当不给uname设定值的时候\n>\n>    http://localhost/spittr/param/query?uname=&pass=123\n>\n>    页面输出：peak=====123 //会使用设置的默认值\n\n>http://localhost/spittr/param/query?uname=gaofeng\n>\n>页面报错：HTTP Status 400 - Required String parameter 'pass' is not present\n\n# 路径参数\n\n```java\n/**\n\t * 路径参数 1.该种类型的参数也可以使用@RequestParameter注解\n\t * 2.建议使用@PathVariable，路径参数需要用大括号括起来，作为占位符；当连接中的路径参数和方法中的形参名称不一致时，需要使用name属性说明\n\t * \n\t * @param uid\n\t * @param account\n\t * @param model\n\t * @return\n\t */\n\t@RequestMapping(value = \"/pathparam/{userId}/{account}\", method = RequestMethod.GET)\n\tpublic String pathParameter(@PathVariable(name = \"userId\") Long uid, @PathVariable String account, Model model) {\n\t\tmodel.addAttribute(\"uid\", uid);\n\t\tmodel.addAttribute(\"account\", account);\n\t\treturn \"pathParam\";\n\t}\n\n    // 还支持正则表达式的方式\n    @RequestMapping(\"/regex/{text:[a-z]+}-{number:\\\\d+}\")\n    @ResponseBody\n    public String three(@PathVariable String text, @PathVariable Integer number) {\n        return \"Text: \" + text + \", Number: \" + number;\n    }\n  \n    // 路径中有 . 时需要用正则，如 http://localhost:8080//question-img/GYYK034C/Aimage002.jpg\n    @GetMapping(\"/question-img/{subjectCode}/{imageName:.+}\")\n    public void readQuestionImage(@PathVariable String subjectCode, @PathVariable String imageName) {\n        ...\n    }\n```\n\n>    http://localhost/spittr/param/pathparam/123/zhanggf\n>\n>    页面输出：123=====zhanggf\n\n# 表单数据\n\n```java\n/**\n\t * 表单数据，可以使用@ModelAttribute注解做映射，匹配页面上相同名称的表单元素，如果有则映射，如果没有则不管。该注解可以省略。\n\t * @param spittle\n\t * @param model\n\t * @return\n\t */\n\t@RequestMapping(value = \"/reg\", method = RequestMethod.POST)\n\tpublic String regSave(@ModelAttribute Spittle spittle, Model model) {\n\t\tmodel.addAttribute(\"spi\", spittle);\n\t\tSystem.out.println(spittle.toString());\n\t\treturn \"redirect:success\";\n\t}\n```\n\n```html\n\t<form method=\"post\">\n\t\tmessage:<input type=\"text\" name=\"message\"></br>\n\t\tlatitude:<input type=\"text\" name=\"latitude\"></br>\n\t\tlongitude:<input type=\"text\" name=\"longitude\"></br>\n\t\t<button type=\"submit\">reg</button>\n\t</form>\n```\n\n>    Spittle [id=0, message=斯蒂芬斯蒂芬, time=null, latitude=3.0, longitude=4.0]\n\n自动映射了。","slug":"springparam","published":1,"updated":"2022-11-24T13:38:45.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1fi001q4ovkc3ajuc3j","content":"<h1 id=\"Spring-MVC接受请求的输入\"><a href=\"#Spring-MVC接受请求的输入\" class=\"headerlink\" title=\"Spring MVC接受请求的输入\"></a>Spring MVC接受请求的输入</h1><p>springmvc允许以多种方式将客户端的数据传递到控制器的处理方法中，包括</p>\n<p>​    查询参数（Query Parameter）</p>\n<p>​    表单参数（Form Parameter）</p>\n<p>​    路径变量（Path Variable）</p>\n<a id=\"more\"></a>\n<h1 id=\"查询参数\"><a href=\"#查询参数\" class=\"headerlink\" title=\"查询参数\"></a>查询参数</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 查询参数</span></span><br><span class=\"line\"><span class=\"comment\">\t * 1.可以处理get或者post请求中的查询参数，例如  query?uname=张高峰&amp;pass=123456;或者post表单中的参数。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 2.使用<span class=\"doctag\">@RequestParam</span>注解映射参数：当连接中的查询参数和方法中的形参名称不一致时，需要使用name属性说明；required属性表示是否必须。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 3.该注解可以试着默认值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> uname</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> pass</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/query\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">queryParameter</span><span class=\"params\">(@RequestParam(name = <span class=\"string\">\"uname\"</span>, defaultValue = <span class=\"string\">\"peak\"</span>, required = <span class=\"keyword\">false</span>)</span> String uname,</span></span><br><span class=\"line\"><span class=\"function\">\t\t\t@RequestParam String pass, Model model) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"uname\"</span>, uname);</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"pass\"</span>, pass);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"query\"</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   <a href=\"http://localhost/spittr/param/query?uname=gaofeng&amp;pass=123\" target=\"_blank\" rel=\"noopener\">http://localhost/spittr/param/query?uname=gaofeng&amp;pass=123</a> </p>\n<p>   页面输出：gaofeng======123</p>\n</blockquote>\n<blockquote>\n<p>   当不给uname设定值的时候</p>\n<p>   <a href=\"http://localhost/spittr/param/query?uname=&amp;pass=123\" target=\"_blank\" rel=\"noopener\">http://localhost/spittr/param/query?uname=&amp;pass=123</a></p>\n<p>   页面输出：peak=====123 //会使用设置的默认值</p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://localhost/spittr/param/query?uname=gaofeng\" target=\"_blank\" rel=\"noopener\">http://localhost/spittr/param/query?uname=gaofeng</a></p>\n<p>页面报错：HTTP Status 400 - Required String parameter ‘pass’ is not present</p>\n</blockquote>\n<h1 id=\"路径参数\"><a href=\"#路径参数\" class=\"headerlink\" title=\"路径参数\"></a>路径参数</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 路径参数 1.该种类型的参数也可以使用<span class=\"doctag\">@RequestParameter</span>注解</span></span><br><span class=\"line\"><span class=\"comment\">\t * 2.建议使用<span class=\"doctag\">@PathVariable</span>，路径参数需要用大括号括起来，作为占位符；当连接中的路径参数和方法中的形参名称不一致时，需要使用name属性说明</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> uid</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> account</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/pathparam/&#123;userId&#125;/&#123;account&#125;\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">pathParameter</span><span class=\"params\">(@PathVariable(name = <span class=\"string\">\"userId\"</span>)</span> Long uid, @PathVariable String account, Model model) </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"uid\"</span>, uid);</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"account\"</span>, account);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"pathParam\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 还支持正则表达式的方式</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/regex/&#123;text:[a-z]+&#125;-&#123;number:\\\\d+&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">three</span><span class=\"params\">(@PathVariable String text, @PathVariable Integer number)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Text: \"</span> + text + <span class=\"string\">\", Number: \"</span> + number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 路径中有 . 时需要用正则，如 http://localhost:8080//question-img/GYYK034C/Aimage002.jpg</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/question-img/&#123;subjectCode&#125;/&#123;imageName:.+&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readQuestionImage</span><span class=\"params\">(@PathVariable String subjectCode, @PathVariable String imageName)</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   <a href=\"http://localhost/spittr/param/pathparam/123/zhanggf\" target=\"_blank\" rel=\"noopener\">http://localhost/spittr/param/pathparam/123/zhanggf</a></p>\n<p>   页面输出：123=====zhanggf</p>\n</blockquote>\n<h1 id=\"表单数据\"><a href=\"#表单数据\" class=\"headerlink\" title=\"表单数据\"></a>表单数据</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 表单数据，可以使用<span class=\"doctag\">@ModelAttribute</span>注解做映射，匹配页面上相同名称的表单元素，如果有则映射，如果没有则不管。该注解可以省略。</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> spittle</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/reg\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">regSave</span><span class=\"params\">(@ModelAttribute Spittle spittle, Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"spi\"</span>, spittle);</span><br><span class=\"line\">\t\tSystem.out.println(spittle.toString());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"redirect:success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\tmessage:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\tlatitude:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"latitude\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\tlongitude:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"longitude\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>reg<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   Spittle [id=0, message=斯蒂芬斯蒂芬, time=null, latitude=3.0, longitude=4.0]</p>\n</blockquote>\n<p>自动映射了。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Spring-MVC接受请求的输入\"><a href=\"#Spring-MVC接受请求的输入\" class=\"headerlink\" title=\"Spring MVC接受请求的输入\"></a>Spring MVC接受请求的输入</h1><p>springmvc允许以多种方式将客户端的数据传递到控制器的处理方法中，包括</p>\n<p>​    查询参数（Query Parameter）</p>\n<p>​    表单参数（Form Parameter）</p>\n<p>​    路径变量（Path Variable）</p>","more":"<h1 id=\"查询参数\"><a href=\"#查询参数\" class=\"headerlink\" title=\"查询参数\"></a>查询参数</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 查询参数</span></span><br><span class=\"line\"><span class=\"comment\">\t * 1.可以处理get或者post请求中的查询参数，例如  query?uname=张高峰&amp;pass=123456;或者post表单中的参数。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 2.使用<span class=\"doctag\">@RequestParam</span>注解映射参数：当连接中的查询参数和方法中的形参名称不一致时，需要使用name属性说明；required属性表示是否必须。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 3.该注解可以试着默认值</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> uname</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> pass</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/query\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">queryParameter</span><span class=\"params\">(@RequestParam(name = <span class=\"string\">\"uname\"</span>, defaultValue = <span class=\"string\">\"peak\"</span>, required = <span class=\"keyword\">false</span>)</span> String uname,</span></span><br><span class=\"line\"><span class=\"function\">\t\t\t@RequestParam String pass, Model model) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"uname\"</span>, uname);</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"pass\"</span>, pass);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"query\"</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   <a href=\"http://localhost/spittr/param/query?uname=gaofeng&amp;pass=123\" target=\"_blank\" rel=\"noopener\">http://localhost/spittr/param/query?uname=gaofeng&amp;pass=123</a> </p>\n<p>   页面输出：gaofeng======123</p>\n</blockquote>\n<blockquote>\n<p>   当不给uname设定值的时候</p>\n<p>   <a href=\"http://localhost/spittr/param/query?uname=&amp;pass=123\" target=\"_blank\" rel=\"noopener\">http://localhost/spittr/param/query?uname=&amp;pass=123</a></p>\n<p>   页面输出：peak=====123 //会使用设置的默认值</p>\n</blockquote>\n<blockquote>\n<p><a href=\"http://localhost/spittr/param/query?uname=gaofeng\" target=\"_blank\" rel=\"noopener\">http://localhost/spittr/param/query?uname=gaofeng</a></p>\n<p>页面报错：HTTP Status 400 - Required String parameter ‘pass’ is not present</p>\n</blockquote>\n<h1 id=\"路径参数\"><a href=\"#路径参数\" class=\"headerlink\" title=\"路径参数\"></a>路径参数</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 路径参数 1.该种类型的参数也可以使用<span class=\"doctag\">@RequestParameter</span>注解</span></span><br><span class=\"line\"><span class=\"comment\">\t * 2.建议使用<span class=\"doctag\">@PathVariable</span>，路径参数需要用大括号括起来，作为占位符；当连接中的路径参数和方法中的形参名称不一致时，需要使用name属性说明</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> uid</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> account</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/pathparam/&#123;userId&#125;/&#123;account&#125;\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">pathParameter</span><span class=\"params\">(@PathVariable(name = <span class=\"string\">\"userId\"</span>)</span> Long uid, @PathVariable String account, Model model) </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"uid\"</span>, uid);</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"account\"</span>, account);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"pathParam\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 还支持正则表达式的方式</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/regex/&#123;text:[a-z]+&#125;-&#123;number:\\\\d+&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">three</span><span class=\"params\">(@PathVariable String text, @PathVariable Integer number)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Text: \"</span> + text + <span class=\"string\">\", Number: \"</span> + number;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 路径中有 . 时需要用正则，如 http://localhost:8080//question-img/GYYK034C/Aimage002.jpg</span></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/question-img/&#123;subjectCode&#125;/&#123;imageName:.+&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readQuestionImage</span><span class=\"params\">(@PathVariable String subjectCode, @PathVariable String imageName)</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   <a href=\"http://localhost/spittr/param/pathparam/123/zhanggf\" target=\"_blank\" rel=\"noopener\">http://localhost/spittr/param/pathparam/123/zhanggf</a></p>\n<p>   页面输出：123=====zhanggf</p>\n</blockquote>\n<h1 id=\"表单数据\"><a href=\"#表单数据\" class=\"headerlink\" title=\"表单数据\"></a>表单数据</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 表单数据，可以使用<span class=\"doctag\">@ModelAttribute</span>注解做映射，匹配页面上相同名称的表单元素，如果有则映射，如果没有则不管。该注解可以省略。</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> spittle</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/reg\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">regSave</span><span class=\"params\">(@ModelAttribute Spittle spittle, Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tmodel.addAttribute(<span class=\"string\">\"spi\"</span>, spittle);</span><br><span class=\"line\">\t\tSystem.out.println(spittle.toString());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"redirect:success\"</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\tmessage:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"message\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\tlatitude:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"latitude\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\tlongitude:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"longitude\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span>&gt;</span>reg<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   Spittle [id=0, message=斯蒂芬斯蒂芬, time=null, latitude=3.0, longitude=4.0]</p>\n</blockquote>\n<p>自动映射了。</p>"},{"title":"springmvc+thymeleaf+layui表单提交以及json对象与实体对象的映射","date":"2017-12-21T01:32:03.000Z","_content":"\n# 背景\n\n最近自己在项目的时候遇到了一个问题，视图解析使用的是`thymeleaf`，前端框架使用了`layui`。在做表单提交的时候在传输json对象的时候，到后端的时候实体映射没有成功。后来测试发现`JSON.stringify` 和`Content-Type`的关系。\n\n<!-- more -->\n\n# FastJson\n\n我使用的是`FastJson`操作json对象\n\npom.xml\n\n```xml\n<dependency>\n\t<groupId>com.alibaba</groupId>\n\t<artifactId>fastjson</artifactId>\n\t<version>1.2.41</version>\n</dependency>\n```\n\nspring-servlet.xml\n\n```xml\n<!-- 注解映射支持 -->\n<mvc:annotation-driven>\n\t<mvc:message-converters>\n\t<!-- StringHttpMessageConverter 编码为UTF-8，防止乱码 -->\n\t\t<bean class=\"org.springframework.http.converter.StringHttpMessageConverter\">\n\t\t\t<constructor-arg value=\"UTF-8\" />\n\t\t\t<property name=\"supportedMediaTypes\">\n\t\t\t\t<list>\n\t\t\t\t\t<bean class=\"org.springframework.http.MediaType\">\n\t\t\t\t\t\t<constructor-arg index=\"0\" value=\"text\" />\n\t\t\t\t\t\t<constructor-arg index=\"1\" value=\"plain\" />\n\t\t\t\t\t\t<constructor-arg index=\"2\" value=\"UTF-8\" />\n\t\t\t\t\t</bean>\n\t\t\t\t\t<bean class=\"org.springframework.http.MediaType\">\n\t\t\t\t\t\t<constructor-arg index=\"0\" value=\"*\" />\n\t\t\t\t\t\t<constructor-arg index=\"1\" value=\"*\" />\n\t\t\t\t\t\t<constructor-arg index=\"2\" value=\"UTF-8\" />\n\t\t\t\t\t</bean>\n\t\t\t\t</list>\n\t\t\t</property>\n\t\t</bean>\n\t\t<!-- FastJson -->\n\t\t<bean class=\"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4\">\n\t\t\t<property name=\"supportedMediaTypes\">\n\t\t\t\t<list>\n\t\t\t\t\t<value>text/html;charset=UTF-8</value>\n\t\t\t\t\t<value>application/json;charset=UTF-8</value>\n\t\t\t\t</list>\n\t\t\t</property>\n\t\t\t<property name=\"fastJsonConfig\">\n\t\t\t\t<bean class=\"com.alibaba.fastjson.support.config.FastJsonConfig\">\n\t\t\t\t\t<property name=\"features\">\n\t\t\t\t\t\t<list>\n\t\t\t\t\t\t\t<value>AllowArbitraryCommas</value>\n\t\t\t\t\t\t\t<value>AllowUnQuotedFieldNames</value>\n\t\t\t\t\t\t\t<value>DisableCircularReferenceDetect</value>\n\t\t\t\t\t\t</list>\n\t\t\t\t\t</property>\n\t\t\t\t\t<property name=\"dateFormat\" value=\"yyyy-MM-dd HH:mm:ss\" />\n\t\t\t\t</bean>\n\t\t\t</property>\n\t\t</bean>\n\t</mvc:message-converters>\n</mvc:annotation-driven>\n```\n\n上面的配置是处理乱码，和处理json映射的。\n\n# Form表单\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta charset=\"utf-8\">\n<title>产品修改</title>\n<meta name=\"renderer\" content=\"webkit\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n<meta name=\"viewport\"\n\tcontent=\"width=device-width, initial-scale=1, maximum-scale=1\">\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n<meta name=\"format-detection\" content=\"telephone=no\">\n<link rel=\"stylesheet\" th:href=\"@{/static/layui/css/layui.css}\"\n\thref=\"/static/layui/css/layui.css\" media=\"all\" />\n<link rel=\"stylesheet\"\n\tth:href=\"@{/static/css/font_eolqem241z66flxr.css}\"\n\thref=\"/static/css/font_eolqem241z66flxr.css\" media=\"all\" />\n</head>\n<body class=\"childrenBody\">\n\t<form class=\"layui-form\" style=\"width: 80%;\">\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">产品名称</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<input type=\"text\" name=\"title\" th:value=\"${product.title}\" class=\"layui-input\" lay-verify=\"required\" placeholder=\"请输入产品名称\">\n\t\t\t\t<input type=\"hidden\" name=\"id\" th:value=\"${product.id}\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">单价</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<input type=\"text\" name=\"price\" th:value=\"${product.price}\" class=\"layui-input\" lay-verify=\"required|number\" placeholder=\"请输入产品单价\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">优惠金额</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<input type=\"text\" class=\"layui-input\" name=\"dcoupon\" th:value=\"${product.dcoupon}\" lay-verify=\"required|number\" placeholder=\"请输入优惠金额\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">区域</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<select name=\"area\" lay-filter=\"aihao\" th:value=\"${product.area}\">\n\t\t\t\t\t<option value=\"东城区\">东城区</option>\n\t\t\t\t\t<option value=\"西城区\">西城区</option>\n\t\t\t\t\t<option value=\"朝阳区\" selected=\"\">朝阳区</option>\n\t\t\t\t\t<option value=\"大兴区\">大兴区</option>\n\t\t\t\t\t<option value=\"丰台区\">丰台区</option>\n\t\t\t\t\t<option value=\"海淀区\">海淀区</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">运营商</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<select name=\"operator\" lay-filter=\"aihao\" th:value=\"product.operator\">\n\t\t\t\t\t<option value=\"移动\" th:selected=\"${product.operator=='移动'}\" selected=\"\">移动</option>\n\t\t\t\t\t<option value=\"联通\" th:selected=\"${product.operator=='联通'}\">联通</option>\n\t\t\t\t\t<option value=\"电信\" th:selected=\"${product.operator=='电信'}\">电信</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">产品类型</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<select name=\"type\" lay-filter=\"aihao\" th:value=\"product.type\">\n\t\t\t\t\t<option value=\"1\" th:selected=\"${product.type==1}\" selected=\"\">年付</option>\n\t\t\t\t\t<option value=\"2\" th:selected=\"${product.type==2}\">季付</option>\n\t\t\t\t\t<option value=\"3\" th:selected=\"${product.type==3}\">月付</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">产品状态</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<select name=\"status\" lay-filter=\"aihao\" th:value=\"product.status\">\n\t\t\t\t\t<option value=\"0\" th:selected=\"${product.status==0}\" selected=\"\">在用</option>\n\t\t\t\t\t<option value=\"1\" th:selected=\"${product.status==1}\">弃用</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\t\t\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">产品描述</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<textarea placeholder=\"请输入产品描述\" class=\"layui-textarea\" name=\"discounts\" th:text=\"${product.discounts}\"></textarea>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<button class=\"layui-btn\" lay-submit=\"\" lay-filter=\"addProduct\">立即提交</button>\n\t\t\t\t<button type=\"reset\" class=\"layui-btn layui-btn-primary\">重置</button>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n\t<script type=\"text/javascript\" th:src=\"@{/static/layui/layui.js}\"\n\t\tsrc=\"static/layui/layui.js\"></script>\n\t<script type=\"text/javascript\"\n\t\tth:src=\"@{/static/js/home/productEdit.js}\" src=\"linksAdd.js\"></script>\n</body>\n</html>\n```\n\n```js\nlayui.config({\n\t\t\tbase : \"js/\"\n\t\t}).use([ 'form', 'layer', 'jquery', 'layedit', 'laydate' ],\n\t\t\t\tfunction() {\n\t\t\t\t\tvar form = layui.form(), \n\t\t\t\t\t\tlayer = layui.layer, \n\t\t\t\t\t\tlaypage = layui.laypage, \n\t\t\t\t\t\tlayedit = layui.layedit, \n\t\t\t\t\t\tlaydate = layui.laydate, \n\t\t\t\t\t\t$ = layui.jquery;\n\t\t\t\t\tform.on(\"submit(addProduct)\", function(data) {\n\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\ttype : 'POST',\n\t\t\t\t\t\t\turl : '/gaofeng/home/product/productEdit',\n\t\t\t\t\t\t\tdataType : 'json',\n\t\t\t\t\t\t\tdata : data.field,\n\t\t\t\t\t\t\tasync : true,\n\t\t\t\t\t\t\tsuccess : function(result) {\n\t\t\t\t\t\t\t\tconsole.log(result.code);\n\t\t\t\t\t\t\t\tif (result.code == 0) {\n\t\t\t\t\t\t\t\t\tlayer.msg('success:保存成功', {\n\t\t\t\t\t\t\t\t\t\ticon : 1,\n\t\t\t\t\t\t\t\t\t\ttime : 1000\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\t\t\tlayer.closeAll(\"iframe\");\n\t\t\t\t\t\t\t\t \t\t//刷新父页面\n\t\t\t\t\t\t\t\t \t\tparent.location.reload();\n\t\t\t\t\t\t\t\t\t}, 800);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconsol.alert(result.code);\n\t\t\t\t\t\t\t\t\tlayer.msg('eles:保存失败！' + result.msg, {\n\t\t\t\t\t\t\t\t\t\ticon : 2,\n\t\t\t\t\t\t\t\t\t\ttime : 1000\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror : function(result, type) {\n\t\t\t\t\t\t\t\tlayer.msg('error:保存失败！', {\n\t\t\t\t\t\t\t\t\ticon : 2,\n\t\t\t\t\t\t\t\t\ttime : 1000\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconsole.log(data.field)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t})\n\n\t\t\t\t})\n\n```\n\n# controller\n\n```java\n@PostMapping(\"/productEdit\")\n@ResponseBody\npublic Result productEdit(Product product) {\n\tpservice.updateProduct(product);\n\tResult result = new Result();\n\tresult.setSuccess(true);\n\tresult.setMessage(\"保存成功\");\n\tresult.setCode(0);\n\treturn result;\n}\n```\n\nResult.java\n\n```java\npackage com.gaofeng.pojo;\n\npublic class Result {\n\n\tprivate boolean success;\n\tprivate String message;\n\tprivate Object data;\n\tprivate int code;\n\t//省略get，set方法\n}\n\n```\n\n>    如果处理ajax请求的时候，在方法上必须添加@ResponseBody注解，使用@Responsebody标识的方法表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，加上@Responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如**异步获取json数据，加上@Responsebody后，会直接返回json数据。**\n\n# 总结\n\n当我们在使用ajax向后端传输数据的时候`data : data.field`相当于直接传输json对象，经过FastJson会自动给我们封装成对象。而当我们使用了`data : JSON.stringify(data.field)`方法后，必须设置contentType: `application/json`属性。而且后端在接收实体对象的时候前面要加上@RequestBody注解\n\n\n\n​\t","source":"_posts/springmvc-json-pojo.md","raw":"---\ntitle: springmvc+thymeleaf+layui表单提交以及json对象与实体对象的映射\ndate: 2017-12-21 09:32:03\ntags: [springmvc,thymeleaf]\n---\n\n# 背景\n\n最近自己在项目的时候遇到了一个问题，视图解析使用的是`thymeleaf`，前端框架使用了`layui`。在做表单提交的时候在传输json对象的时候，到后端的时候实体映射没有成功。后来测试发现`JSON.stringify` 和`Content-Type`的关系。\n\n<!-- more -->\n\n# FastJson\n\n我使用的是`FastJson`操作json对象\n\npom.xml\n\n```xml\n<dependency>\n\t<groupId>com.alibaba</groupId>\n\t<artifactId>fastjson</artifactId>\n\t<version>1.2.41</version>\n</dependency>\n```\n\nspring-servlet.xml\n\n```xml\n<!-- 注解映射支持 -->\n<mvc:annotation-driven>\n\t<mvc:message-converters>\n\t<!-- StringHttpMessageConverter 编码为UTF-8，防止乱码 -->\n\t\t<bean class=\"org.springframework.http.converter.StringHttpMessageConverter\">\n\t\t\t<constructor-arg value=\"UTF-8\" />\n\t\t\t<property name=\"supportedMediaTypes\">\n\t\t\t\t<list>\n\t\t\t\t\t<bean class=\"org.springframework.http.MediaType\">\n\t\t\t\t\t\t<constructor-arg index=\"0\" value=\"text\" />\n\t\t\t\t\t\t<constructor-arg index=\"1\" value=\"plain\" />\n\t\t\t\t\t\t<constructor-arg index=\"2\" value=\"UTF-8\" />\n\t\t\t\t\t</bean>\n\t\t\t\t\t<bean class=\"org.springframework.http.MediaType\">\n\t\t\t\t\t\t<constructor-arg index=\"0\" value=\"*\" />\n\t\t\t\t\t\t<constructor-arg index=\"1\" value=\"*\" />\n\t\t\t\t\t\t<constructor-arg index=\"2\" value=\"UTF-8\" />\n\t\t\t\t\t</bean>\n\t\t\t\t</list>\n\t\t\t</property>\n\t\t</bean>\n\t\t<!-- FastJson -->\n\t\t<bean class=\"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4\">\n\t\t\t<property name=\"supportedMediaTypes\">\n\t\t\t\t<list>\n\t\t\t\t\t<value>text/html;charset=UTF-8</value>\n\t\t\t\t\t<value>application/json;charset=UTF-8</value>\n\t\t\t\t</list>\n\t\t\t</property>\n\t\t\t<property name=\"fastJsonConfig\">\n\t\t\t\t<bean class=\"com.alibaba.fastjson.support.config.FastJsonConfig\">\n\t\t\t\t\t<property name=\"features\">\n\t\t\t\t\t\t<list>\n\t\t\t\t\t\t\t<value>AllowArbitraryCommas</value>\n\t\t\t\t\t\t\t<value>AllowUnQuotedFieldNames</value>\n\t\t\t\t\t\t\t<value>DisableCircularReferenceDetect</value>\n\t\t\t\t\t\t</list>\n\t\t\t\t\t</property>\n\t\t\t\t\t<property name=\"dateFormat\" value=\"yyyy-MM-dd HH:mm:ss\" />\n\t\t\t\t</bean>\n\t\t\t</property>\n\t\t</bean>\n\t</mvc:message-converters>\n</mvc:annotation-driven>\n```\n\n上面的配置是处理乱码，和处理json映射的。\n\n# Form表单\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta charset=\"utf-8\">\n<title>产品修改</title>\n<meta name=\"renderer\" content=\"webkit\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n<meta name=\"viewport\"\n\tcontent=\"width=device-width, initial-scale=1, maximum-scale=1\">\n<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\">\n<meta name=\"apple-mobile-web-app-capable\" content=\"yes\">\n<meta name=\"format-detection\" content=\"telephone=no\">\n<link rel=\"stylesheet\" th:href=\"@{/static/layui/css/layui.css}\"\n\thref=\"/static/layui/css/layui.css\" media=\"all\" />\n<link rel=\"stylesheet\"\n\tth:href=\"@{/static/css/font_eolqem241z66flxr.css}\"\n\thref=\"/static/css/font_eolqem241z66flxr.css\" media=\"all\" />\n</head>\n<body class=\"childrenBody\">\n\t<form class=\"layui-form\" style=\"width: 80%;\">\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">产品名称</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<input type=\"text\" name=\"title\" th:value=\"${product.title}\" class=\"layui-input\" lay-verify=\"required\" placeholder=\"请输入产品名称\">\n\t\t\t\t<input type=\"hidden\" name=\"id\" th:value=\"${product.id}\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">单价</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<input type=\"text\" name=\"price\" th:value=\"${product.price}\" class=\"layui-input\" lay-verify=\"required|number\" placeholder=\"请输入产品单价\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">优惠金额</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<input type=\"text\" class=\"layui-input\" name=\"dcoupon\" th:value=\"${product.dcoupon}\" lay-verify=\"required|number\" placeholder=\"请输入优惠金额\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">区域</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<select name=\"area\" lay-filter=\"aihao\" th:value=\"${product.area}\">\n\t\t\t\t\t<option value=\"东城区\">东城区</option>\n\t\t\t\t\t<option value=\"西城区\">西城区</option>\n\t\t\t\t\t<option value=\"朝阳区\" selected=\"\">朝阳区</option>\n\t\t\t\t\t<option value=\"大兴区\">大兴区</option>\n\t\t\t\t\t<option value=\"丰台区\">丰台区</option>\n\t\t\t\t\t<option value=\"海淀区\">海淀区</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">运营商</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<select name=\"operator\" lay-filter=\"aihao\" th:value=\"product.operator\">\n\t\t\t\t\t<option value=\"移动\" th:selected=\"${product.operator=='移动'}\" selected=\"\">移动</option>\n\t\t\t\t\t<option value=\"联通\" th:selected=\"${product.operator=='联通'}\">联通</option>\n\t\t\t\t\t<option value=\"电信\" th:selected=\"${product.operator=='电信'}\">电信</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">产品类型</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<select name=\"type\" lay-filter=\"aihao\" th:value=\"product.type\">\n\t\t\t\t\t<option value=\"1\" th:selected=\"${product.type==1}\" selected=\"\">年付</option>\n\t\t\t\t\t<option value=\"2\" th:selected=\"${product.type==2}\">季付</option>\n\t\t\t\t\t<option value=\"3\" th:selected=\"${product.type==3}\">月付</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">产品状态</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<select name=\"status\" lay-filter=\"aihao\" th:value=\"product.status\">\n\t\t\t\t\t<option value=\"0\" th:selected=\"${product.status==0}\" selected=\"\">在用</option>\n\t\t\t\t\t<option value=\"1\" th:selected=\"${product.status==1}\">弃用</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t\t</div>\n\t\t\n\t\t<div class=\"layui-form-item\">\n\t\t\t<label class=\"layui-form-label\">产品描述</label>\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<textarea placeholder=\"请输入产品描述\" class=\"layui-textarea\" name=\"discounts\" th:text=\"${product.discounts}\"></textarea>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"layui-form-item\">\n\t\t\t<div class=\"layui-input-block\">\n\t\t\t\t<button class=\"layui-btn\" lay-submit=\"\" lay-filter=\"addProduct\">立即提交</button>\n\t\t\t\t<button type=\"reset\" class=\"layui-btn layui-btn-primary\">重置</button>\n\t\t\t</div>\n\t\t</div>\n\t</form>\n\t<script type=\"text/javascript\" th:src=\"@{/static/layui/layui.js}\"\n\t\tsrc=\"static/layui/layui.js\"></script>\n\t<script type=\"text/javascript\"\n\t\tth:src=\"@{/static/js/home/productEdit.js}\" src=\"linksAdd.js\"></script>\n</body>\n</html>\n```\n\n```js\nlayui.config({\n\t\t\tbase : \"js/\"\n\t\t}).use([ 'form', 'layer', 'jquery', 'layedit', 'laydate' ],\n\t\t\t\tfunction() {\n\t\t\t\t\tvar form = layui.form(), \n\t\t\t\t\t\tlayer = layui.layer, \n\t\t\t\t\t\tlaypage = layui.laypage, \n\t\t\t\t\t\tlayedit = layui.layedit, \n\t\t\t\t\t\tlaydate = layui.laydate, \n\t\t\t\t\t\t$ = layui.jquery;\n\t\t\t\t\tform.on(\"submit(addProduct)\", function(data) {\n\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\ttype : 'POST',\n\t\t\t\t\t\t\turl : '/gaofeng/home/product/productEdit',\n\t\t\t\t\t\t\tdataType : 'json',\n\t\t\t\t\t\t\tdata : data.field,\n\t\t\t\t\t\t\tasync : true,\n\t\t\t\t\t\t\tsuccess : function(result) {\n\t\t\t\t\t\t\t\tconsole.log(result.code);\n\t\t\t\t\t\t\t\tif (result.code == 0) {\n\t\t\t\t\t\t\t\t\tlayer.msg('success:保存成功', {\n\t\t\t\t\t\t\t\t\t\ticon : 1,\n\t\t\t\t\t\t\t\t\t\ttime : 1000\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\t\t\tlayer.closeAll(\"iframe\");\n\t\t\t\t\t\t\t\t \t\t//刷新父页面\n\t\t\t\t\t\t\t\t \t\tparent.location.reload();\n\t\t\t\t\t\t\t\t\t}, 800);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tconsol.alert(result.code);\n\t\t\t\t\t\t\t\t\tlayer.msg('eles:保存失败！' + result.msg, {\n\t\t\t\t\t\t\t\t\t\ticon : 2,\n\t\t\t\t\t\t\t\t\t\ttime : 1000\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\terror : function(result, type) {\n\t\t\t\t\t\t\t\tlayer.msg('error:保存失败！', {\n\t\t\t\t\t\t\t\t\ticon : 2,\n\t\t\t\t\t\t\t\t\ttime : 1000\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconsole.log(data.field)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t})\n\n\t\t\t\t})\n\n```\n\n# controller\n\n```java\n@PostMapping(\"/productEdit\")\n@ResponseBody\npublic Result productEdit(Product product) {\n\tpservice.updateProduct(product);\n\tResult result = new Result();\n\tresult.setSuccess(true);\n\tresult.setMessage(\"保存成功\");\n\tresult.setCode(0);\n\treturn result;\n}\n```\n\nResult.java\n\n```java\npackage com.gaofeng.pojo;\n\npublic class Result {\n\n\tprivate boolean success;\n\tprivate String message;\n\tprivate Object data;\n\tprivate int code;\n\t//省略get，set方法\n}\n\n```\n\n>    如果处理ajax请求的时候，在方法上必须添加@ResponseBody注解，使用@Responsebody标识的方法表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，加上@Responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如**异步获取json数据，加上@Responsebody后，会直接返回json数据。**\n\n# 总结\n\n当我们在使用ajax向后端传输数据的时候`data : data.field`相当于直接传输json对象，经过FastJson会自动给我们封装成对象。而当我们使用了`data : JSON.stringify(data.field)`方法后，必须设置contentType: `application/json`属性。而且后端在接收实体对象的时候前面要加上@RequestBody注解\n\n\n\n​\t","slug":"springmvc-json-pojo","published":1,"updated":"2022-11-24T13:38:45.603Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1fj001s4ovk4v3tpcdm","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近自己在项目的时候遇到了一个问题，视图解析使用的是<code>thymeleaf</code>，前端框架使用了<code>layui</code>。在做表单提交的时候在传输json对象的时候，到后端的时候实体映射没有成功。后来测试发现<code>JSON.stringify</code> 和<code>Content-Type</code>的关系。</p>\n<a id=\"more\"></a>\n<h1 id=\"FastJson\"><a href=\"#FastJson\" class=\"headerlink\" title=\"FastJson\"></a>FastJson</h1><p>我使用的是<code>FastJson</code>操作json对象</p>\n<p>pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.41<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>spring-servlet.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注解映射支持 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- StringHttpMessageConverter 编码为UTF-8，防止乱码 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.StringHttpMessageConverter\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.MediaType\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"text\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"plain\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.MediaType\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"*\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"*\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- FastJson --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>text/html;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>application/json;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fastJsonConfig\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.fastjson.support.config.FastJsonConfig\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"features\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>AllowArbitraryCommas<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>AllowUnQuotedFieldNames<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>DisableCircularReferenceDetect<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dateFormat\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的配置是处理乱码，和处理json映射的。</p>\n<h1 id=\"Form表单\"><a href=\"#Form表单\" class=\"headerlink\" title=\"Form表单\"></a>Form表单</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>产品修改<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, maximum-scale=1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/static/layui/css/layui.css&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">\"/static/layui/css/layui.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/static/css/font_eolqem241z66flxr.css&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">\"/static/css/font_eolqem241z66flxr.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">\"childrenBody\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 80%;\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>产品名称<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;product.title&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input\"</span> <span class=\"attr\">lay-verify</span>=<span class=\"string\">\"required\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入产品名称\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;product.id&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>单价<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"price\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;product.price&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input\"</span> <span class=\"attr\">lay-verify</span>=<span class=\"string\">\"required|number\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入产品单价\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>优惠金额<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dcoupon\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;product.dcoupon&#125;\"</span> <span class=\"attr\">lay-verify</span>=<span class=\"string\">\"required|number\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入优惠金额\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>区域<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"area\"</span> <span class=\"attr\">lay-filter</span>=<span class=\"string\">\"aihao\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;product.area&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"东城区\"</span>&gt;</span>东城区<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"西城区\"</span>&gt;</span>西城区<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"朝阳区\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"\"</span>&gt;</span>朝阳区<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"大兴区\"</span>&gt;</span>大兴区<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"丰台区\"</span>&gt;</span>丰台区<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"海淀区\"</span>&gt;</span>海淀区<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>运营商<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"operator\"</span> <span class=\"attr\">lay-filter</span>=<span class=\"string\">\"aihao\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"product.operator\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"移动\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.operator=='移动'&#125;\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"\"</span>&gt;</span>移动<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"联通\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.operator=='联通'&#125;\"</span>&gt;</span>联通<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"电信\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.operator=='电信'&#125;\"</span>&gt;</span>电信<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>产品类型<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"type\"</span> <span class=\"attr\">lay-filter</span>=<span class=\"string\">\"aihao\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"product.type\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.type==1&#125;\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"\"</span>&gt;</span>年付<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.type==2&#125;\"</span>&gt;</span>季付<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.type==3&#125;\"</span>&gt;</span>月付<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>产品状态<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"status\"</span> <span class=\"attr\">lay-filter</span>=<span class=\"string\">\"aihao\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"product.status\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.status==0&#125;\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"\"</span>&gt;</span>在用<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.status==1&#125;\"</span>&gt;</span>弃用<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>产品描述<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入产品描述\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-textarea\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"discounts\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;product.discounts&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-btn\"</span> <span class=\"attr\">lay-submit</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">lay-filter</span>=<span class=\"string\">\"addProduct\"</span>&gt;</span>立即提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"reset\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-btn layui-btn-primary\"</span>&gt;</span>重置<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/static/layui/layui.js&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">src</span>=<span class=\"string\">\"static/layui/layui.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/static/js/home/productEdit.js&#125;\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"linksAdd.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layui.config(&#123;</span><br><span class=\"line\">\t\t\tbase : <span class=\"string\">\"js/\"</span></span><br><span class=\"line\">\t\t&#125;).use([ <span class=\"string\">'form'</span>, <span class=\"string\">'layer'</span>, <span class=\"string\">'jquery'</span>, <span class=\"string\">'layedit'</span>, <span class=\"string\">'laydate'</span> ],</span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">var</span> form = layui.form(), </span><br><span class=\"line\">\t\t\t\t\t\tlayer = layui.layer, </span><br><span class=\"line\">\t\t\t\t\t\tlaypage = layui.laypage, </span><br><span class=\"line\">\t\t\t\t\t\tlayedit = layui.layedit, </span><br><span class=\"line\">\t\t\t\t\t\tlaydate = layui.laydate, </span><br><span class=\"line\">\t\t\t\t\t\t$ = layui.jquery;</span><br><span class=\"line\">\t\t\t\t\tform.on(<span class=\"string\">\"submit(addProduct)\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t$.ajax(&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\ttype : <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\turl : <span class=\"string\">'/gaofeng/home/product/productEdit'</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\tdataType : <span class=\"string\">'json'</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\tdata : data.field,</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">async</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\tsuccess : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"built_in\">console</span>.log(result.code);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (result.code == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tlayer.msg(<span class=\"string\">'success:保存成功'</span>, &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\ticon : <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\ttime : <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\tlayer.closeAll(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t \t\t<span class=\"comment\">//刷新父页面</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t \t\tparent.location.reload();</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&#125;, <span class=\"number\">800</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tconsol.alert(result.code);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tlayer.msg(<span class=\"string\">'eles:保存失败！'</span> + result.msg, &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\ticon : <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\ttime : <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t\terror : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, type</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\tlayer.msg(<span class=\"string\">'error:保存失败！'</span>, &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\ticon : <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\ttime : <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">console</span>.log(data.field)</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/productEdit\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">productEdit</span><span class=\"params\">(Product product)</span> </span>&#123;</span><br><span class=\"line\">\tpservice.updateProduct(product);</span><br><span class=\"line\">\tResult result = <span class=\"keyword\">new</span> Result();</span><br><span class=\"line\">\tresult.setSuccess(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\tresult.setMessage(<span class=\"string\">\"保存成功\"</span>);</span><br><span class=\"line\">\tresult.setCode(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Result.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Result</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> success;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String message;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Object data;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\">\t<span class=\"comment\">//省略get，set方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   如果处理ajax请求的时候，在方法上必须添加@ResponseBody注解，使用@Responsebody标识的方法表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，加上@Responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如<strong>异步获取json数据，加上@Responsebody后，会直接返回json数据。</strong></p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>当我们在使用ajax向后端传输数据的时候<code>data : data.field</code>相当于直接传输json对象，经过FastJson会自动给我们封装成对象。而当我们使用了<code>data : JSON.stringify(data.field)</code>方法后，必须设置contentType: <code>application/json</code>属性。而且后端在接收实体对象的时候前面要加上@RequestBody注解</p>\n<p>​    </p>\n","site":{"data":{}},"excerpt":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>最近自己在项目的时候遇到了一个问题，视图解析使用的是<code>thymeleaf</code>，前端框架使用了<code>layui</code>。在做表单提交的时候在传输json对象的时候，到后端的时候实体映射没有成功。后来测试发现<code>JSON.stringify</code> 和<code>Content-Type</code>的关系。</p>","more":"<h1 id=\"FastJson\"><a href=\"#FastJson\" class=\"headerlink\" title=\"FastJson\"></a>FastJson</h1><p>我使用的是<code>FastJson</code>操作json对象</p>\n<p>pom.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.41<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>spring-servlet.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 注解映射支持 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- StringHttpMessageConverter 编码为UTF-8，防止乱码 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.converter.StringHttpMessageConverter\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.MediaType\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"text\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"plain\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.http.MediaType\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"*\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"*\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">index</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- FastJson --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter4\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"supportedMediaTypes\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>text/html;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>application/json;charset=UTF-8<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fastJsonConfig\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"com.alibaba.fastjson.support.config.FastJsonConfig\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"features\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>AllowArbitraryCommas<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>AllowUnQuotedFieldNames<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>DisableCircularReferenceDetect<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dateFormat\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span> /&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mvc:message-converters</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>上面的配置是处理乱码，和处理json映射的。</p>\n<h1 id=\"Form表单\"><a href=\"#Form表单\" class=\"headerlink\" title=\"Form表单\"></a>Form表单</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>产品修改<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"renderer\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"webkit\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=edge,chrome=1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, initial-scale=1, maximum-scale=1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-status-bar-style\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"black\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"apple-mobile-web-app-capable\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"yes\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"format-detection\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"telephone=no\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/static/layui/css/layui.css&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">\"/static/layui/css/layui.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/static/css/font_eolqem241z66flxr.css&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">href</span>=<span class=\"string\">\"/static/css/font_eolqem241z66flxr.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">class</span>=<span class=\"string\">\"childrenBody\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 80%;\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>产品名称<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"title\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;product.title&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input\"</span> <span class=\"attr\">lay-verify</span>=<span class=\"string\">\"required\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入产品名称\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"hidden\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"id\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;product.id&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>单价<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"price\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;product.price&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input\"</span> <span class=\"attr\">lay-verify</span>=<span class=\"string\">\"required|number\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入产品单价\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>优惠金额<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dcoupon\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;product.dcoupon&#125;\"</span> <span class=\"attr\">lay-verify</span>=<span class=\"string\">\"required|number\"</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入优惠金额\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>区域<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"area\"</span> <span class=\"attr\">lay-filter</span>=<span class=\"string\">\"aihao\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"$&#123;product.area&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"东城区\"</span>&gt;</span>东城区<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"西城区\"</span>&gt;</span>西城区<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"朝阳区\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"\"</span>&gt;</span>朝阳区<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"大兴区\"</span>&gt;</span>大兴区<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"丰台区\"</span>&gt;</span>丰台区<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"海淀区\"</span>&gt;</span>海淀区<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>运营商<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"operator\"</span> <span class=\"attr\">lay-filter</span>=<span class=\"string\">\"aihao\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"product.operator\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"移动\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.operator=='移动'&#125;\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"\"</span>&gt;</span>移动<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"联通\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.operator=='联通'&#125;\"</span>&gt;</span>联通<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"电信\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.operator=='电信'&#125;\"</span>&gt;</span>电信<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>产品类型<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"type\"</span> <span class=\"attr\">lay-filter</span>=<span class=\"string\">\"aihao\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"product.type\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.type==1&#125;\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"\"</span>&gt;</span>年付<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.type==2&#125;\"</span>&gt;</span>季付<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.type==3&#125;\"</span>&gt;</span>月付<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>产品状态<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"status\"</span> <span class=\"attr\">lay-filter</span>=<span class=\"string\">\"aihao\"</span> <span class=\"attr\">th:value</span>=<span class=\"string\">\"product.status\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.status==0&#125;\"</span> <span class=\"attr\">selected</span>=<span class=\"string\">\"\"</span>&gt;</span>在用<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">th:selected</span>=<span class=\"string\">\"$&#123;product.status==1&#125;\"</span>&gt;</span>弃用<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-label\"</span>&gt;</span>产品描述<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">\"请输入产品描述\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-textarea\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"discounts\"</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;product.discounts&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-form-item\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-input-block\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-btn\"</span> <span class=\"attr\">lay-submit</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">lay-filter</span>=<span class=\"string\">\"addProduct\"</span>&gt;</span>立即提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">\"reset\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"layui-btn layui-btn-primary\"</span>&gt;</span>重置<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/static/layui/layui.js&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">src</span>=<span class=\"string\">\"static/layui/layui.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">th:src</span>=<span class=\"string\">\"@&#123;/static/js/home/productEdit.js&#125;\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"linksAdd.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">layui.config(&#123;</span><br><span class=\"line\">\t\t\tbase : <span class=\"string\">\"js/\"</span></span><br><span class=\"line\">\t\t&#125;).use([ <span class=\"string\">'form'</span>, <span class=\"string\">'layer'</span>, <span class=\"string\">'jquery'</span>, <span class=\"string\">'layedit'</span>, <span class=\"string\">'laydate'</span> ],</span><br><span class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">var</span> form = layui.form(), </span><br><span class=\"line\">\t\t\t\t\t\tlayer = layui.layer, </span><br><span class=\"line\">\t\t\t\t\t\tlaypage = layui.laypage, </span><br><span class=\"line\">\t\t\t\t\t\tlayedit = layui.layedit, </span><br><span class=\"line\">\t\t\t\t\t\tlaydate = layui.laydate, </span><br><span class=\"line\">\t\t\t\t\t\t$ = layui.jquery;</span><br><span class=\"line\">\t\t\t\t\tform.on(<span class=\"string\">\"submit(addProduct)\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t$.ajax(&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\ttype : <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\turl : <span class=\"string\">'/gaofeng/home/product/productEdit'</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\tdataType : <span class=\"string\">'json'</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\tdata : data.field,</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">async</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\tsuccess : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"built_in\">console</span>.log(result.code);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">if</span> (result.code == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tlayer.msg(<span class=\"string\">'success:保存成功'</span>, &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\ticon : <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\ttime : <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tsetTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\tlayer.closeAll(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t \t\t<span class=\"comment\">//刷新父页面</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t \t\tparent.location.reload();</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&#125;, <span class=\"number\">800</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tconsol.alert(result.code);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tlayer.msg(<span class=\"string\">'eles:保存失败！'</span> + result.msg, &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\ticon : <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\ttime : <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\t\t\terror : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result, type</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\tlayer.msg(<span class=\"string\">'error:保存失败！'</span>, &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\ticon : <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\ttime : <span class=\"number\">1000</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">console</span>.log(data.field)</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/productEdit\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">productEdit</span><span class=\"params\">(Product product)</span> </span>&#123;</span><br><span class=\"line\">\tpservice.updateProduct(product);</span><br><span class=\"line\">\tResult result = <span class=\"keyword\">new</span> Result();</span><br><span class=\"line\">\tresult.setSuccess(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\tresult.setMessage(<span class=\"string\">\"保存成功\"</span>);</span><br><span class=\"line\">\tresult.setCode(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Result.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.gaofeng.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Result</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> success;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String message;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Object data;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> code;</span><br><span class=\"line\">\t<span class=\"comment\">//省略get，set方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   如果处理ajax请求的时候，在方法上必须添加@ResponseBody注解，使用@Responsebody标识的方法表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，加上@Responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如<strong>异步获取json数据，加上@Responsebody后，会直接返回json数据。</strong></p>\n</blockquote>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>当我们在使用ajax向后端传输数据的时候<code>data : data.field</code>相当于直接传输json对象，经过FastJson会自动给我们封装成对象。而当我们使用了<code>data : JSON.stringify(data.field)</code>方法后，必须设置contentType: <code>application/json</code>属性。而且后端在接收实体对象的时候前面要加上@RequestBody注解</p>\n<p>​    </p>"},{"title":"springmvc对静态资源的处理","date":"2017-12-01T02:21:22.000Z","_content":"\n# 开场白\n\n不知道为啥，写笔记的时候总是喜欢写开场白，有点自言自语的感觉，哈哈哈。\n\n初学springmvc的时候，遇到一个坑，就是在页面引用**js**或者**css**文件的时候总是失败，后来上网查资料才明白了原因。\n\n在使用springmvc的时候，我们首先要在web.xml中配置**DispatcherServlet**，并且拦截所有URL请求\n\n```xml\n<servlet>\n\t<servlet-name>springDispatcherServlet</servlet-name>\n\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t<init-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>classpath:springmvc.xml</param-value>\n\t</init-param>\n\t<load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n\t<servlet-name>springDispatcherServlet</servlet-name>\n\t<url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n\n这样的话.js、.css、.jpg等文件的请求也都被DispatcherServlet给拦截了，可是又没有相应的处理方法，因此也就访问不到了。\n\n<!-- more -->\n\n# 修改springmvx.xml\n\nspringmvc给了很好的解决办法，这里就介绍一中我感觉最好用的办法<mvc:resource/>标签，在springmvc.xml配置文件中添加已下配置\n\n```xml\n<mvc:resources location=\"/resources/\" mapping=\"/resources/**\"></mvc:resources>\n<mvc:resources location=\"/js/\" mapping=\"/js/**\"></mvc:resources>\n<mvc:resources location=\"/css/\" mapping=\"/css/**\"></mvc:resources>\n```\n\n>    location:webapp根目录，如果要放到别的目录的话需要添加目录名称，比如要放到WEB-INF目录下，location=\"/WEB-INF/js/\" \n>\n>    mapping:这里的**表示该目录下的所有目录，包括子目录\n\n\n\n# html\n\n```html\n<link href=\"/css/style.css\" th:href=\"@{/css/style.css}\">\n```\n\n就可以了","source":"_posts/static-resource.md","raw":"---\ntitle: springmvc对静态资源的处理\ndate: 2017-12-01 10:21:22\ntags: [springmvc]\n---\n\n# 开场白\n\n不知道为啥，写笔记的时候总是喜欢写开场白，有点自言自语的感觉，哈哈哈。\n\n初学springmvc的时候，遇到一个坑，就是在页面引用**js**或者**css**文件的时候总是失败，后来上网查资料才明白了原因。\n\n在使用springmvc的时候，我们首先要在web.xml中配置**DispatcherServlet**，并且拦截所有URL请求\n\n```xml\n<servlet>\n\t<servlet-name>springDispatcherServlet</servlet-name>\n\t<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n\t<init-param>\n\t\t<param-name>contextConfigLocation</param-name>\n\t\t<param-value>classpath:springmvc.xml</param-value>\n\t</init-param>\n\t<load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n\t<servlet-name>springDispatcherServlet</servlet-name>\n\t<url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n\n这样的话.js、.css、.jpg等文件的请求也都被DispatcherServlet给拦截了，可是又没有相应的处理方法，因此也就访问不到了。\n\n<!-- more -->\n\n# 修改springmvx.xml\n\nspringmvc给了很好的解决办法，这里就介绍一中我感觉最好用的办法<mvc:resource/>标签，在springmvc.xml配置文件中添加已下配置\n\n```xml\n<mvc:resources location=\"/resources/\" mapping=\"/resources/**\"></mvc:resources>\n<mvc:resources location=\"/js/\" mapping=\"/js/**\"></mvc:resources>\n<mvc:resources location=\"/css/\" mapping=\"/css/**\"></mvc:resources>\n```\n\n>    location:webapp根目录，如果要放到别的目录的话需要添加目录名称，比如要放到WEB-INF目录下，location=\"/WEB-INF/js/\" \n>\n>    mapping:这里的**表示该目录下的所有目录，包括子目录\n\n\n\n# html\n\n```html\n<link href=\"/css/style.css\" th:href=\"@{/css/style.css}\">\n```\n\n就可以了","slug":"static-resource","published":1,"updated":"2022-11-24T13:38:45.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1fk001v4ovks3s4xynf","content":"<h1 id=\"开场白\"><a href=\"#开场白\" class=\"headerlink\" title=\"开场白\"></a>开场白</h1><p>不知道为啥，写笔记的时候总是喜欢写开场白，有点自言自语的感觉，哈哈哈。</p>\n<p>初学springmvc的时候，遇到一个坑，就是在页面引用<strong>js</strong>或者<strong>css</strong>文件的时候总是失败，后来上网查资料才明白了原因。</p>\n<p>在使用springmvc的时候，我们首先要在web.xml中配置<strong>DispatcherServlet</strong>，并且拦截所有URL请求</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springDispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springDispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样的话.js、.css、.jpg等文件的请求也都被DispatcherServlet给拦截了，可是又没有相应的处理方法，因此也就访问不到了。</p>\n<a id=\"more\"></a>\n<h1 id=\"修改springmvx-xml\"><a href=\"#修改springmvx-xml\" class=\"headerlink\" title=\"修改springmvx.xml\"></a>修改springmvx.xml</h1><p>springmvc给了很好的解决办法，这里就介绍一中我感觉最好用的办法<a href=\"mvc:resource/\" target=\"_blank\" rel=\"noopener\">mvc:resource/</a>标签，在springmvc.xml配置文件中添加已下配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/resources/\"</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/resources/**\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/js/\"</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/js/**\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/css/\"</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/css/**\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   location:webapp根目录，如果要放到别的目录的话需要添加目录名称，比如要放到WEB-INF目录下，location=”/WEB-INF/js/“ </p>\n<p>   mapping:这里的**表示该目录下的所有目录，包括子目录</p>\n</blockquote>\n<h1 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/style.css\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/style.css&#125;\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>就可以了</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"开场白\"><a href=\"#开场白\" class=\"headerlink\" title=\"开场白\"></a>开场白</h1><p>不知道为啥，写笔记的时候总是喜欢写开场白，有点自言自语的感觉，哈哈哈。</p>\n<p>初学springmvc的时候，遇到一个坑，就是在页面引用<strong>js</strong>或者<strong>css</strong>文件的时候总是失败，后来上网查资料才明白了原因。</p>\n<p>在使用springmvc的时候，我们首先要在web.xml中配置<strong>DispatcherServlet</strong>，并且拦截所有URL请求</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springDispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:springmvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springDispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样的话.js、.css、.jpg等文件的请求也都被DispatcherServlet给拦截了，可是又没有相应的处理方法，因此也就访问不到了。</p>","more":"<h1 id=\"修改springmvx-xml\"><a href=\"#修改springmvx-xml\" class=\"headerlink\" title=\"修改springmvx.xml\"></a>修改springmvx.xml</h1><p>springmvc给了很好的解决办法，这里就介绍一中我感觉最好用的办法<a href=\"mvc:resource/\" target=\"_blank\" rel=\"noopener\">mvc:resource/</a>标签，在springmvc.xml配置文件中添加已下配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/resources/\"</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/resources/**\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/js/\"</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/js/**\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:resources</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:resources</span> <span class=\"attr\">location</span>=<span class=\"string\">\"/css/\"</span> <span class=\"attr\">mapping</span>=<span class=\"string\">\"/css/**\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">mvc:resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>   location:webapp根目录，如果要放到别的目录的话需要添加目录名称，比如要放到WEB-INF目录下，location=”/WEB-INF/js/“ </p>\n<p>   mapping:这里的**表示该目录下的所有目录，包括子目录</p>\n</blockquote>\n<h1 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/css/style.css\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/css/style.css&#125;\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>就可以了</p>"},{"title":"springsecurity-ifram","date":"2018-10-09T08:32:08.000Z","_content":"\n# 问题\n\n最近在做项目的时候遇到一个问题，在一个页面中使用到了 ``iframe``引入另外一个页面，结果在访问的时候报错：`in a frame because it set 'X-Frame-Options' to 'deny`\n\n后来上网查找资料得知：\n\nspring Security下，X-Frame-Options默认为DENY,非Spring Security环境下，X-Frame-Options的默认大多也是DENY，这种情况下，浏览器拒绝当前页面加载任何Frame页面，设置含义如下：\n\n    DENY：浏览器拒绝当前页面加载任何Frame页面\n    SAMEORIGIN：frame页面的地址只能为同源域名下的页面\n    ALLOW-FROM：origin为允许frame加载的页面地址。\n\n<!-- more -->\n\n# 解决方案\n\n在tomcat8以后的版本中，可以通过在web.xml中定义filter设置X-Frame-Options,如下：\n\n```xml\n<filter>  \n    <filter-name>httpHeaderSecurity</filter-name>  \n    <filter-class>org.apache.catalina.filters.HttpHeaderSecurityFilter</filter-class>  \n    <init-param>  \n        <param-name>antiClickJackingOption</param-name>  \n        <param-value>SAMEORIGIN</param-value>  \n    </init-param>  \n    <async-supported>true</async-supported>  \n</filter>  \n  \n<filter-mapping>  \n    <filter-name>httpHeaderSecurity</filter-name>  \n    <url-pattern>/*</url-pattern>  \n</filter-mapping>  \n```\n\n\n\n或者修改springsecurity.xml配置文件\n\n```xml\n<headers>\n\t<frame-options policy=\"SAMEORIGIN\"/>\n</headers>\n```\n\n再次访问，问题解决了。","source":"_posts/springsecurity-ifram.md","raw":"---\ntitle: springsecurity-ifram\ndate: 2018-10-09 16:32:08\ntags: [security]\n---\n\n# 问题\n\n最近在做项目的时候遇到一个问题，在一个页面中使用到了 ``iframe``引入另外一个页面，结果在访问的时候报错：`in a frame because it set 'X-Frame-Options' to 'deny`\n\n后来上网查找资料得知：\n\nspring Security下，X-Frame-Options默认为DENY,非Spring Security环境下，X-Frame-Options的默认大多也是DENY，这种情况下，浏览器拒绝当前页面加载任何Frame页面，设置含义如下：\n\n    DENY：浏览器拒绝当前页面加载任何Frame页面\n    SAMEORIGIN：frame页面的地址只能为同源域名下的页面\n    ALLOW-FROM：origin为允许frame加载的页面地址。\n\n<!-- more -->\n\n# 解决方案\n\n在tomcat8以后的版本中，可以通过在web.xml中定义filter设置X-Frame-Options,如下：\n\n```xml\n<filter>  \n    <filter-name>httpHeaderSecurity</filter-name>  \n    <filter-class>org.apache.catalina.filters.HttpHeaderSecurityFilter</filter-class>  \n    <init-param>  \n        <param-name>antiClickJackingOption</param-name>  \n        <param-value>SAMEORIGIN</param-value>  \n    </init-param>  \n    <async-supported>true</async-supported>  \n</filter>  \n  \n<filter-mapping>  \n    <filter-name>httpHeaderSecurity</filter-name>  \n    <url-pattern>/*</url-pattern>  \n</filter-mapping>  \n```\n\n\n\n或者修改springsecurity.xml配置文件\n\n```xml\n<headers>\n\t<frame-options policy=\"SAMEORIGIN\"/>\n</headers>\n```\n\n再次访问，问题解决了。","slug":"springsecurity-ifram","published":1,"updated":"2022-11-24T13:38:45.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1fl001x4ovkfruarjdo","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>最近在做项目的时候遇到一个问题，在一个页面中使用到了 <code>iframe</code>引入另外一个页面，结果在访问的时候报错：<code>in a frame because it set &#39;X-Frame-Options&#39; to &#39;deny</code></p>\n<p>后来上网查找资料得知：</p>\n<p>spring Security下，X-Frame-Options默认为DENY,非Spring Security环境下，X-Frame-Options的默认大多也是DENY，这种情况下，浏览器拒绝当前页面加载任何Frame页面，设置含义如下：</p>\n<pre><code>DENY：浏览器拒绝当前页面加载任何Frame页面\nSAMEORIGIN：frame页面的地址只能为同源域名下的页面\nALLOW-FROM：origin为允许frame加载的页面地址。\n</code></pre><a id=\"more\"></a>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>在tomcat8以后的版本中，可以通过在web.xml中定义filter设置X-Frame-Options,如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>httpHeaderSecurity<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.catalina.filters.HttpHeaderSecurityFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>antiClickJackingOption<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>SAMEORIGIN<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">async-supported</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">async-supported</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>httpHeaderSecurity<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>或者修改springsecurity.xml配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">headers</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">frame-options</span> <span class=\"attr\">policy</span>=<span class=\"string\">\"SAMEORIGIN\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">headers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>再次访问，问题解决了。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>最近在做项目的时候遇到一个问题，在一个页面中使用到了 <code>iframe</code>引入另外一个页面，结果在访问的时候报错：<code>in a frame because it set &#39;X-Frame-Options&#39; to &#39;deny</code></p>\n<p>后来上网查找资料得知：</p>\n<p>spring Security下，X-Frame-Options默认为DENY,非Spring Security环境下，X-Frame-Options的默认大多也是DENY，这种情况下，浏览器拒绝当前页面加载任何Frame页面，设置含义如下：</p>\n<pre><code>DENY：浏览器拒绝当前页面加载任何Frame页面\nSAMEORIGIN：frame页面的地址只能为同源域名下的页面\nALLOW-FROM：origin为允许frame加载的页面地址。\n</code></pre>","more":"<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>在tomcat8以后的版本中，可以通过在web.xml中定义filter设置X-Frame-Options,如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>httpHeaderSecurity<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>org.apache.catalina.filters.HttpHeaderSecurityFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>antiClickJackingOption<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span>  </span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>SAMEORIGIN<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">async-supported</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">async-supported</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span>  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>httpHeaderSecurity<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>或者修改springsecurity.xml配置文件</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">headers</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">frame-options</span> <span class=\"attr\">policy</span>=<span class=\"string\">\"SAMEORIGIN\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">headers</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>再次访问，问题解决了。</p>"},{"title":"springmvc使用thymeleaf","date":"2017-11-29T04:47:05.000Z","_content":"\n# thymeleaf简介\n\n之前开发javaWEB项目大多都是用JSP作为页面显示，但是JSP和HTML还是有很大区别，渲染的效果有时候也是有差异的。thymeleaf和HTMl更像，去掉了JSTL和spring提供的标签，可以在web容器之外的环境下用浏览器直接打开。前端人员可以直接查看样式，当有后台传输数据过来后，会动态的替换页面中的静态内容。\n\n<!-- more -->\n\n# springmvc配置thymeleaf视图解析器\n\n## 添加jar依赖\n\n这里使用maven\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4 -->\n\t\t<dependency>\n\t\t\t<groupId>org.thymeleaf</groupId>\n\t\t\t<artifactId>thymeleaf-spring4</artifactId>\n\t\t\t<version>3.0.7.RELEASE</version>\n\t\t</dependency>\n\n\t\t<!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf -->\n\t\t<dependency>\n\t\t\t<groupId>org.thymeleaf</groupId>\n\t\t\t<artifactId>thymeleaf</artifactId>\n\t\t\t<version>3.0.9.RELEASE</version>\n\t\t</dependency>\n```\n\n## 在spring配置文件中添加视图映射\n\n```xml\n<!-- 设置thymeleaf模板解析器 -->\n\t<bean id=\"templateResolver\"\n\t\tclass=\"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver\">\n\t\t<property name=\"prefix\" value=\"/WEB-INF/templates/\"></property>\n\t\t<property name=\"suffix\" value=\".html\"></property>\n\t\t<property name=\"templateMode\" value=\"HTML\"></property>\n\t\t<property name=\"characterEncoding\" value=\"UTF-8\"></property>\n\t\t<property name=\"cacheable\" value=\"false\"></property>\n\t</bean>\n\t<!-- 设置模板引擎 -->\n\t<bean id=\"templateEngine\" class=\"org.thymeleaf.spring4.SpringTemplateEngine\">\n\t\t<property name=\"templateResolver\" ref=\"templateResolver\"></property>\n\t\t<property name=\"enableSpringELCompiler\" value=\"true\"></property>\n\t</bean>\n\t<!-- 配置thymeleaf视图解析器 -->\n\t<bean class=\"org.thymeleaf.spring4.view.ThymeleafViewResolver\">\n\t\t<property name=\"templateEngine\" ref=\"templateEngine\"></property>\n\t\t<property name=\"characterEncoding\" value=\"UTF-8\" />\n\t\t<property name=\"order\" value=\"1\"></property>\n\t</bean>\n```\n\n注意：\n\n>    1.   在开发阶段**cacheable**属性设置为false，不设置缓存，这样我们修改页面内容后，可以更快的看到变化，部署到线上环境后设置为true。\n>    2.   **enableSpringELCompiler**属性用来设置是否允许前端页面使用*SpEL*\n>    3.   记得设置**characterEncoding**属性，防止乱码\n\n配置好以上内容，就可以使用thymeleaf了。编写代码测试一下\n\n## 编写@controller\n\n```java\npackage springmvc.controller;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport springmvc.pojo.User;\n\n@Controller\n@RequestMapping(value = \"/person\")\npublic class PersonController {\n\n\tpublic PersonController() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\n\t@RequestMapping(value = \"/index\", method = RequestMethod.GET)\n\tpublic String index() {\n\t\treturn \"person/index\";\n\t}\n\n\t@RequestMapping(value = \"/register\", method = RequestMethod.GET)\n\tpublic String register(Model model) {\n\t\tUser user = new User();\n\t\tmodel.addAttribute(user);\n\t\treturn \"person/register\";\n\t}\n\n\t@RequestMapping(value = \"register\", method = RequestMethod.POST)\n\tpublic String register(User user) throws UnsupportedEncodingException {\n\t\tSystem.out.println(user.toString());\n\t\treturn \"redirect:/person/model/\" + URLEncoder.encode(user.getUname(), \"UTF-8\")+\"/\"+URLEncoder.encode(user.getMome(), \"utf-8\");\n\t}\n\n\t@RequestMapping(value = \"/model/{uname}/{mome}\", method = RequestMethod.GET)\n\tpublic String model(@PathVariable(\"uname\") String uname,@PathVariable(\"mome\") String mome, Model model) {\n\t\tSystem.out.println(uname);\n\t\tUser u = new User();\n\t\tu.setUname(uname);\n\t\tu.setMome(mome);\n\t\tmodel.addAttribute(u);\n\t\treturn \"person/model\";\n\t}\n\n}\n\n```\n\n## 编写html\n\nindex.html\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<!-- 添加 xmlns:th=\"http://www.thymeleaf.org\"-->\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>welcome thymeleaf!</title>\n</head>\n<body>\n<a th:href=\"@{register}\">注册</a>\n</body>\n</html>\n```\n\n超链接使用@{}\n\nregister.html\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\n<form th:action=\"@{/person/register}\" th:object=\"${user}\" th:method=\"post\" >\n\tuname:<input type=\"text\" th:field=\"*{uname}\" th:placeholder=\"请填写真实姓名\"><br>\n\tmome:<input type=\"text\" th:field=\"*{mome}\"><br>\n\t<input type=\"submit\" value=\"提 交\">\n</form>\n\n</body>\n</html>\n```\n\nmodel.html\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\t<form th:action=\"@{/person/register}\" th:object=\"${user}\"\n\t\tth:method=\"post\">\n\t\tuname:<input type=\"text\" th:field=\"*{uname}\"\n\t\t\tth:unless=\"'' eq ${user.uname} or null eq ${user.uname}\"\n\t\t\tth:placeholder=\"请填写真实姓名\"><br> mome:<input type=\"text\"\n\t\t\tth:field=\"*{mome}\"><br> <input type=\"submit\" value=\"提 交\">\n\t</form>\n</body>\n</html>\n```\n\n## 运行\n\n运行正常，图片就不帖了，初学的注意一下乱码问题，还有前端页面显示的问题。如果在controller中需要向页面中传值，前端需要有一个html表情承载才会显示例如：我需要在前端页面显示username，前端页面需要有一个lable标签\n\n```html\n<!-- 当username没有值的时候，显示张高峰，有值的时候就会显示username的值 -->\n<lable th:text=\"${username}\">张高峰</lable>\n```\n\n因为thymeleaf模板创建的页面，可作为静态资源直接在浏览器端显示，又可在运行时承载后台传输过来的数据，这种模式更好的把前端设计人员和后台开发人员工作分离，并又很好的对接。\n\n## data-th-text\n\n我们上面的文件感觉像是是HTML5，可以由任何浏览器正确显示，因为它不包括任何非HTML标签（浏览器忽略他们不明白的所有属性，如：th:text）。但是这个模板并不是一个真正有效的HTML5文档，因为HTML5规范不允许在th：*形式中使用这些非标准属性。 事实上，我们甚至在我们的<html>标签中添加了一个xmlns：th属性，这绝对是非HTML5标准。\n\n那么如何使这个HTML5模板有效呢？ Easy：切换到Thymeleaf的数据属性语法，使用data-属性名称和连字符（ - ）分隔符的数据前缀而不是分号（:)：\n\n```html\n<p data-th-text=\"#{home.welcome}\">Welcome to our grocery store!</p>\n```\n\n```html\n<p th:text=\"#{home.welcome}\">Welcome to our grocery store!</p>\n```\n\n这两个效果是一样的。","source":"_posts/thymeleaf.md","raw":"---\ntitle: springmvc使用thymeleaf\ndate: 2017-11-29 12:47:05\ntags: [springmvc,thymeleaf]\n---\n\n# thymeleaf简介\n\n之前开发javaWEB项目大多都是用JSP作为页面显示，但是JSP和HTML还是有很大区别，渲染的效果有时候也是有差异的。thymeleaf和HTMl更像，去掉了JSTL和spring提供的标签，可以在web容器之外的环境下用浏览器直接打开。前端人员可以直接查看样式，当有后台传输数据过来后，会动态的替换页面中的静态内容。\n\n<!-- more -->\n\n# springmvc配置thymeleaf视图解析器\n\n## 添加jar依赖\n\n这里使用maven\n\n```xml\n<!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4 -->\n\t\t<dependency>\n\t\t\t<groupId>org.thymeleaf</groupId>\n\t\t\t<artifactId>thymeleaf-spring4</artifactId>\n\t\t\t<version>3.0.7.RELEASE</version>\n\t\t</dependency>\n\n\t\t<!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf -->\n\t\t<dependency>\n\t\t\t<groupId>org.thymeleaf</groupId>\n\t\t\t<artifactId>thymeleaf</artifactId>\n\t\t\t<version>3.0.9.RELEASE</version>\n\t\t</dependency>\n```\n\n## 在spring配置文件中添加视图映射\n\n```xml\n<!-- 设置thymeleaf模板解析器 -->\n\t<bean id=\"templateResolver\"\n\t\tclass=\"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver\">\n\t\t<property name=\"prefix\" value=\"/WEB-INF/templates/\"></property>\n\t\t<property name=\"suffix\" value=\".html\"></property>\n\t\t<property name=\"templateMode\" value=\"HTML\"></property>\n\t\t<property name=\"characterEncoding\" value=\"UTF-8\"></property>\n\t\t<property name=\"cacheable\" value=\"false\"></property>\n\t</bean>\n\t<!-- 设置模板引擎 -->\n\t<bean id=\"templateEngine\" class=\"org.thymeleaf.spring4.SpringTemplateEngine\">\n\t\t<property name=\"templateResolver\" ref=\"templateResolver\"></property>\n\t\t<property name=\"enableSpringELCompiler\" value=\"true\"></property>\n\t</bean>\n\t<!-- 配置thymeleaf视图解析器 -->\n\t<bean class=\"org.thymeleaf.spring4.view.ThymeleafViewResolver\">\n\t\t<property name=\"templateEngine\" ref=\"templateEngine\"></property>\n\t\t<property name=\"characterEncoding\" value=\"UTF-8\" />\n\t\t<property name=\"order\" value=\"1\"></property>\n\t</bean>\n```\n\n注意：\n\n>    1.   在开发阶段**cacheable**属性设置为false，不设置缓存，这样我们修改页面内容后，可以更快的看到变化，部署到线上环境后设置为true。\n>    2.   **enableSpringELCompiler**属性用来设置是否允许前端页面使用*SpEL*\n>    3.   记得设置**characterEncoding**属性，防止乱码\n\n配置好以上内容，就可以使用thymeleaf了。编写代码测试一下\n\n## 编写@controller\n\n```java\npackage springmvc.controller;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport springmvc.pojo.User;\n\n@Controller\n@RequestMapping(value = \"/person\")\npublic class PersonController {\n\n\tpublic PersonController() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\n\t@RequestMapping(value = \"/index\", method = RequestMethod.GET)\n\tpublic String index() {\n\t\treturn \"person/index\";\n\t}\n\n\t@RequestMapping(value = \"/register\", method = RequestMethod.GET)\n\tpublic String register(Model model) {\n\t\tUser user = new User();\n\t\tmodel.addAttribute(user);\n\t\treturn \"person/register\";\n\t}\n\n\t@RequestMapping(value = \"register\", method = RequestMethod.POST)\n\tpublic String register(User user) throws UnsupportedEncodingException {\n\t\tSystem.out.println(user.toString());\n\t\treturn \"redirect:/person/model/\" + URLEncoder.encode(user.getUname(), \"UTF-8\")+\"/\"+URLEncoder.encode(user.getMome(), \"utf-8\");\n\t}\n\n\t@RequestMapping(value = \"/model/{uname}/{mome}\", method = RequestMethod.GET)\n\tpublic String model(@PathVariable(\"uname\") String uname,@PathVariable(\"mome\") String mome, Model model) {\n\t\tSystem.out.println(uname);\n\t\tUser u = new User();\n\t\tu.setUname(uname);\n\t\tu.setMome(mome);\n\t\tmodel.addAttribute(u);\n\t\treturn \"person/model\";\n\t}\n\n}\n\n```\n\n## 编写html\n\nindex.html\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<!-- 添加 xmlns:th=\"http://www.thymeleaf.org\"-->\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>welcome thymeleaf!</title>\n</head>\n<body>\n<a th:href=\"@{register}\">注册</a>\n</body>\n</html>\n```\n\n超链接使用@{}\n\nregister.html\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\n<form th:action=\"@{/person/register}\" th:object=\"${user}\" th:method=\"post\" >\n\tuname:<input type=\"text\" th:field=\"*{uname}\" th:placeholder=\"请填写真实姓名\"><br>\n\tmome:<input type=\"text\" th:field=\"*{mome}\"><br>\n\t<input type=\"submit\" value=\"提 交\">\n</form>\n\n</body>\n</html>\n```\n\nmodel.html\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n\t<form th:action=\"@{/person/register}\" th:object=\"${user}\"\n\t\tth:method=\"post\">\n\t\tuname:<input type=\"text\" th:field=\"*{uname}\"\n\t\t\tth:unless=\"'' eq ${user.uname} or null eq ${user.uname}\"\n\t\t\tth:placeholder=\"请填写真实姓名\"><br> mome:<input type=\"text\"\n\t\t\tth:field=\"*{mome}\"><br> <input type=\"submit\" value=\"提 交\">\n\t</form>\n</body>\n</html>\n```\n\n## 运行\n\n运行正常，图片就不帖了，初学的注意一下乱码问题，还有前端页面显示的问题。如果在controller中需要向页面中传值，前端需要有一个html表情承载才会显示例如：我需要在前端页面显示username，前端页面需要有一个lable标签\n\n```html\n<!-- 当username没有值的时候，显示张高峰，有值的时候就会显示username的值 -->\n<lable th:text=\"${username}\">张高峰</lable>\n```\n\n因为thymeleaf模板创建的页面，可作为静态资源直接在浏览器端显示，又可在运行时承载后台传输过来的数据，这种模式更好的把前端设计人员和后台开发人员工作分离，并又很好的对接。\n\n## data-th-text\n\n我们上面的文件感觉像是是HTML5，可以由任何浏览器正确显示，因为它不包括任何非HTML标签（浏览器忽略他们不明白的所有属性，如：th:text）。但是这个模板并不是一个真正有效的HTML5文档，因为HTML5规范不允许在th：*形式中使用这些非标准属性。 事实上，我们甚至在我们的<html>标签中添加了一个xmlns：th属性，这绝对是非HTML5标准。\n\n那么如何使这个HTML5模板有效呢？ Easy：切换到Thymeleaf的数据属性语法，使用data-属性名称和连字符（ - ）分隔符的数据前缀而不是分号（:)：\n\n```html\n<p data-th-text=\"#{home.welcome}\">Welcome to our grocery store!</p>\n```\n\n```html\n<p th:text=\"#{home.welcome}\">Welcome to our grocery store!</p>\n```\n\n这两个效果是一样的。","slug":"thymeleaf","published":1,"updated":"2022-11-24T13:38:45.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1fn00204ovkyrj9ru8u","content":"<h1 id=\"thymeleaf简介\"><a href=\"#thymeleaf简介\" class=\"headerlink\" title=\"thymeleaf简介\"></a>thymeleaf简介</h1><p>之前开发javaWEB项目大多都是用JSP作为页面显示，但是JSP和HTML还是有很大区别，渲染的效果有时候也是有差异的。thymeleaf和HTMl更像，去掉了JSTL和spring提供的标签，可以在web容器之外的环境下用浏览器直接打开。前端人员可以直接查看样式，当有后台传输数据过来后，会动态的替换页面中的静态内容。</p>\n<a id=\"more\"></a>\n<h1 id=\"springmvc配置thymeleaf视图解析器\"><a href=\"#springmvc配置thymeleaf视图解析器\" class=\"headerlink\" title=\"springmvc配置thymeleaf视图解析器\"></a>springmvc配置thymeleaf视图解析器</h1><h2 id=\"添加jar依赖\"><a href=\"#添加jar依赖\" class=\"headerlink\" title=\"添加jar依赖\"></a>添加jar依赖</h2><p>这里使用maven</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>thymeleaf-spring4<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在spring配置文件中添加视图映射\"><a href=\"#在spring配置文件中添加视图映射\" class=\"headerlink\" title=\"在spring配置文件中添加视图映射\"></a>在spring配置文件中添加视图映射</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 设置thymeleaf模板解析器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"templateResolver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/templates/\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"templateMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"HTML\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"characterEncoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cacheable\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 设置模板引擎 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"templateEngine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.thymeleaf.spring4.SpringTemplateEngine\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"templateResolver\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"templateResolver\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSpringELCompiler\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置thymeleaf视图解析器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.thymeleaf.spring4.view.ThymeleafViewResolver\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"templateEngine\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"templateEngine\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"characterEncoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"order\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<blockquote>\n<ol>\n<li>在开发阶段<strong>cacheable</strong>属性设置为false，不设置缓存，这样我们修改页面内容后，可以更快的看到变化，部署到线上环境后设置为true。</li>\n<li><strong>enableSpringELCompiler</strong>属性用来设置是否允许前端页面使用<em>SpEL</em></li>\n<li>记得设置<strong>characterEncoding</strong>属性，防止乱码</li>\n</ol>\n</blockquote>\n<p>配置好以上内容，就可以使用thymeleaf了。编写代码测试一下</p>\n<h2 id=\"编写-controller\"><a href=\"#编写-controller\" class=\"headerlink\" title=\"编写@controller\"></a>编写@controller</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/person\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PersonController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/index\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"person/index\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/register\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tUser user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">\t\tmodel.addAttribute(user);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"person/register\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"register\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register</span><span class=\"params\">(User user)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(user.toString());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/person/model/\"</span> + URLEncoder.encode(user.getUname(), <span class=\"string\">\"UTF-8\"</span>)+<span class=\"string\">\"/\"</span>+URLEncoder.encode(user.getMome(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/model/&#123;uname&#125;/&#123;mome&#125;\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">model</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"uname\"</span>)</span> String uname,@<span class=\"title\">PathVariable</span><span class=\"params\">(<span class=\"string\">\"mome\"</span>)</span> String mome, Model model) </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(uname);</span><br><span class=\"line\">\t\tUser u = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">\t\tu.setUname(uname);</span><br><span class=\"line\">\t\tu.setMome(mome);</span><br><span class=\"line\">\t\tmodel.addAttribute(u);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"person/model\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写html\"><a href=\"#编写html\" class=\"headerlink\" title=\"编写html\"></a>编写html</h2><p>index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 添加 xmlns:th=\"http://www.thymeleaf.org\"--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>welcome thymeleaf!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;register&#125;\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>超链接使用@{}</p>\n<p>register.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/person/register&#125;\"</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;user&#125;\"</span> <span class=\"attr\">th:method</span>=<span class=\"string\">\"post\"</span> &gt;</span></span><br><span class=\"line\">\tuname:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;uname&#125;\"</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">\"请填写真实姓名\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\tmome:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;mome&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提 交\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>model.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/person/register&#125;\"</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;user&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">th:method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\tuname:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;uname&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">th:unless</span>=<span class=\"string\">\"'' eq $&#123;user.uname&#125; or null eq $&#123;user.uname&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">th:placeholder</span>=<span class=\"string\">\"请填写真实姓名\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span> mome:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;mome&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提 交\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>运行正常，图片就不帖了，初学的注意一下乱码问题，还有前端页面显示的问题。如果在controller中需要向页面中传值，前端需要有一个html表情承载才会显示例如：我需要在前端页面显示username，前端页面需要有一个lable标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 当username没有值的时候，显示张高峰，有值的时候就会显示username的值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">lable</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;username&#125;\"</span>&gt;</span>张高峰<span class=\"tag\">&lt;/<span class=\"name\">lable</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因为thymeleaf模板创建的页面，可作为静态资源直接在浏览器端显示，又可在运行时承载后台传输过来的数据，这种模式更好的把前端设计人员和后台开发人员工作分离，并又很好的对接。</p>\n<h2 id=\"data-th-text\"><a href=\"#data-th-text\" class=\"headerlink\" title=\"data-th-text\"></a>data-th-text</h2><p>我们上面的文件感觉像是是HTML5，可以由任何浏览器正确显示，因为它不包括任何非HTML标签（浏览器忽略他们不明白的所有属性，如：th:text）。但是这个模板并不是一个真正有效的HTML5文档，因为HTML5规范不允许在th：*形式中使用这些非标准属性。 事实上，我们甚至在我们的<html>标签中添加了一个xmlns：th属性，这绝对是非HTML5标准。</html></p>\n<p>那么如何使这个HTML5模板有效呢？ Easy：切换到Thymeleaf的数据属性语法，使用data-属性名称和连字符（ - ）分隔符的数据前缀而不是分号（:)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">data-th-text</span>=<span class=\"string\">\"#&#123;home.welcome&#125;\"</span>&gt;</span>Welcome to our grocery store!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;home.welcome&#125;\"</span>&gt;</span>Welcome to our grocery store!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这两个效果是一样的。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"thymeleaf简介\"><a href=\"#thymeleaf简介\" class=\"headerlink\" title=\"thymeleaf简介\"></a>thymeleaf简介</h1><p>之前开发javaWEB项目大多都是用JSP作为页面显示，但是JSP和HTML还是有很大区别，渲染的效果有时候也是有差异的。thymeleaf和HTMl更像，去掉了JSTL和spring提供的标签，可以在web容器之外的环境下用浏览器直接打开。前端人员可以直接查看样式，当有后台传输数据过来后，会动态的替换页面中的静态内容。</p>","more":"<h1 id=\"springmvc配置thymeleaf视图解析器\"><a href=\"#springmvc配置thymeleaf视图解析器\" class=\"headerlink\" title=\"springmvc配置thymeleaf视图解析器\"></a>springmvc配置thymeleaf视图解析器</h1><h2 id=\"添加jar依赖\"><a href=\"#添加jar依赖\" class=\"headerlink\" title=\"添加jar依赖\"></a>添加jar依赖</h2><p>这里使用maven</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>thymeleaf-spring4<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.7.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.9.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"在spring配置文件中添加视图映射\"><a href=\"#在spring配置文件中添加视图映射\" class=\"headerlink\" title=\"在spring配置文件中添加视图映射\"></a>在spring配置文件中添加视图映射</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 设置thymeleaf模板解析器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"templateResolver\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">class</span>=<span class=\"string\">\"org.thymeleaf.spring4.templateresolver.SpringResourceTemplateResolver\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/WEB-INF/templates/\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".html\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"templateMode\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"HTML\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"characterEncoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"cacheable\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"false\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 设置模板引擎 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"templateEngine\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.thymeleaf.spring4.SpringTemplateEngine\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"templateResolver\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"templateResolver\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"enableSpringELCompiler\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 配置thymeleaf视图解析器 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.thymeleaf.spring4.view.ThymeleafViewResolver\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"templateEngine\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"templateEngine\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"characterEncoding\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"order\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<blockquote>\n<ol>\n<li>在开发阶段<strong>cacheable</strong>属性设置为false，不设置缓存，这样我们修改页面内容后，可以更快的看到变化，部署到线上环境后设置为true。</li>\n<li><strong>enableSpringELCompiler</strong>属性用来设置是否允许前端页面使用<em>SpEL</em></li>\n<li>记得设置<strong>characterEncoding</strong>属性，防止乱码</li>\n</ol>\n</blockquote>\n<p>配置好以上内容，就可以使用thymeleaf了。编写代码测试一下</p>\n<h2 id=\"编写-controller\"><a href=\"#编写-controller\" class=\"headerlink\" title=\"编写@controller\"></a>编写@controller</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLEncoder;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/person\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PersonController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/index\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">index</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"person/index\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/register\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register</span><span class=\"params\">(Model model)</span> </span>&#123;</span><br><span class=\"line\">\t\tUser user = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">\t\tmodel.addAttribute(user);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"person/register\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"register\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register</span><span class=\"params\">(User user)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(user.toString());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/person/model/\"</span> + URLEncoder.encode(user.getUname(), <span class=\"string\">\"UTF-8\"</span>)+<span class=\"string\">\"/\"</span>+URLEncoder.encode(user.getMome(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/model/&#123;uname&#125;/&#123;mome&#125;\"</span>, method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">model</span><span class=\"params\">(@PathVariable(<span class=\"string\">\"uname\"</span>)</span> String uname,@<span class=\"title\">PathVariable</span><span class=\"params\">(<span class=\"string\">\"mome\"</span>)</span> String mome, Model model) </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(uname);</span><br><span class=\"line\">\t\tUser u = <span class=\"keyword\">new</span> User();</span><br><span class=\"line\">\t\tu.setUname(uname);</span><br><span class=\"line\">\t\tu.setMome(mome);</span><br><span class=\"line\">\t\tmodel.addAttribute(u);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"person/model\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写html\"><a href=\"#编写html\" class=\"headerlink\" title=\"编写html\"></a>编写html</h2><p>index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 添加 xmlns:th=\"http://www.thymeleaf.org\"--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>welcome thymeleaf!<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;register&#125;\"</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>超链接使用@{}</p>\n<p>register.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/person/register&#125;\"</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;user&#125;\"</span> <span class=\"attr\">th:method</span>=<span class=\"string\">\"post\"</span> &gt;</span></span><br><span class=\"line\">\tuname:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;uname&#125;\"</span> <span class=\"attr\">th:placeholder</span>=<span class=\"string\">\"请填写真实姓名\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\tmome:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;mome&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提 交\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>model.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">th:action</span>=<span class=\"string\">\"@&#123;/person/register&#125;\"</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;user&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">th:method</span>=<span class=\"string\">\"post\"</span>&gt;</span></span><br><span class=\"line\">\t\tuname:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;uname&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">th:unless</span>=<span class=\"string\">\"'' eq $&#123;user.uname&#125; or null eq $&#123;user.uname&#125;\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">th:placeholder</span>=<span class=\"string\">\"请填写真实姓名\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span> mome:<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t\t<span class=\"attr\">th:field</span>=<span class=\"string\">\"*&#123;mome&#125;\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"提 交\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>运行正常，图片就不帖了，初学的注意一下乱码问题，还有前端页面显示的问题。如果在controller中需要向页面中传值，前端需要有一个html表情承载才会显示例如：我需要在前端页面显示username，前端页面需要有一个lable标签</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 当username没有值的时候，显示张高峰，有值的时候就会显示username的值 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">lable</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;username&#125;\"</span>&gt;</span>张高峰<span class=\"tag\">&lt;/<span class=\"name\">lable</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>因为thymeleaf模板创建的页面，可作为静态资源直接在浏览器端显示，又可在运行时承载后台传输过来的数据，这种模式更好的把前端设计人员和后台开发人员工作分离，并又很好的对接。</p>\n<h2 id=\"data-th-text\"><a href=\"#data-th-text\" class=\"headerlink\" title=\"data-th-text\"></a>data-th-text</h2><p>我们上面的文件感觉像是是HTML5，可以由任何浏览器正确显示，因为它不包括任何非HTML标签（浏览器忽略他们不明白的所有属性，如：th:text）。但是这个模板并不是一个真正有效的HTML5文档，因为HTML5规范不允许在th：*形式中使用这些非标准属性。 事实上，我们甚至在我们的<html>标签中添加了一个xmlns：th属性，这绝对是非HTML5标准。</html></p>\n<p>那么如何使这个HTML5模板有效呢？ Easy：切换到Thymeleaf的数据属性语法，使用data-属性名称和连字符（ - ）分隔符的数据前缀而不是分号（:)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">data-th-text</span>=<span class=\"string\">\"#&#123;home.welcome&#125;\"</span>&gt;</span>Welcome to our grocery store!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"#&#123;home.welcome&#125;\"</span>&gt;</span>Welcome to our grocery store!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这两个效果是一样的。</p>"},{"title":"在开发中常见的标签以及作用","date":"2017-12-14T09:11:46.000Z","_content":"\n在做项目的时候，经常用到一些xml配置文件，一开始我们只是去模仿如何配置，时间久了，就想了解我们使用的这些标签都是什么意思，有什么作用，从现在开始以后就记录下来，一点一点的去了解。\n\n<!-- more -->\n\n# web.xml\n\n---\n\n## `<context-param>`\n\n1.   启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点: `<listener></listener>` 和` <context-param></context-param>`\n2.   紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文.\n3.   容器将`<context-param></context-param>`转化为键值对,并交给ServletContext.\n4.   容器创建`<listener></listener>`中的类实例,即创建监听.\n5.   在监听中会有contextInitialized(ServletContextEvent args)初始化方法,在这个方法中获得ServletContext = ServletContextEvent.getServletContext();\n\n[参考Blog](http://blog.csdn.net/sxbjffsg163/article/details/9955479)\n\n\n\n# spring.xml\n\n---\n\n## `<context:component-scan>`\n\n通常情况下我们在创建spring项目的时候在xml配置文件中都会配置这个标签，配置完这个标签后，spring就会去自动扫描base-package对应的路径或者该路径的子包下面的java文件，如果扫描到文件中带有@Service,@Component,@Repository,@Controller等这些注解的类，则把这些类注册为bean\n\n**注：**如果配置了`<context:component-scan>`那么`<context:annotation-config>`标签就可以不用在xml中再配置了，因为前者包含了后者。\n\n[详情参考](http://blog.csdn.net/liuxingsiye/article/details/52171508)\n\n","source":"_posts/tag-web.md","raw":"---\ntitle: 在开发中常见的标签以及作用\ndate: 2017-12-14 17:11:46\ntags: [javaweb]\n---\n\n在做项目的时候，经常用到一些xml配置文件，一开始我们只是去模仿如何配置，时间久了，就想了解我们使用的这些标签都是什么意思，有什么作用，从现在开始以后就记录下来，一点一点的去了解。\n\n<!-- more -->\n\n# web.xml\n\n---\n\n## `<context-param>`\n\n1.   启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点: `<listener></listener>` 和` <context-param></context-param>`\n2.   紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文.\n3.   容器将`<context-param></context-param>`转化为键值对,并交给ServletContext.\n4.   容器创建`<listener></listener>`中的类实例,即创建监听.\n5.   在监听中会有contextInitialized(ServletContextEvent args)初始化方法,在这个方法中获得ServletContext = ServletContextEvent.getServletContext();\n\n[参考Blog](http://blog.csdn.net/sxbjffsg163/article/details/9955479)\n\n\n\n# spring.xml\n\n---\n\n## `<context:component-scan>`\n\n通常情况下我们在创建spring项目的时候在xml配置文件中都会配置这个标签，配置完这个标签后，spring就会去自动扫描base-package对应的路径或者该路径的子包下面的java文件，如果扫描到文件中带有@Service,@Component,@Repository,@Controller等这些注解的类，则把这些类注册为bean\n\n**注：**如果配置了`<context:component-scan>`那么`<context:annotation-config>`标签就可以不用在xml中再配置了，因为前者包含了后者。\n\n[详情参考](http://blog.csdn.net/liuxingsiye/article/details/52171508)\n\n","slug":"tag-web","published":1,"updated":"2022-11-24T13:38:45.606Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1fp00224ovk2obo22p1","content":"<p>在做项目的时候，经常用到一些xml配置文件，一开始我们只是去模仿如何配置，时间久了，就想了解我们使用的这些标签都是什么意思，有什么作用，从现在开始以后就记录下来，一点一点的去了解。</p>\n<a id=\"more\"></a>\n<h1 id=\"web-xml\"><a href=\"#web-xml\" class=\"headerlink\" title=\"web.xml\"></a>web.xml</h1><hr>\n<h2 id=\"lt-context-param-gt\"><a href=\"#lt-context-param-gt\" class=\"headerlink\" title=\"&lt;context-param&gt;\"></a><code>&lt;context-param&gt;</code></h2><ol>\n<li>启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点: <code>&lt;listener&gt;&lt;/listener&gt;</code> 和<code>&lt;context-param&gt;&lt;/context-param&gt;</code></li>\n<li>紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文.</li>\n<li>容器将<code>&lt;context-param&gt;&lt;/context-param&gt;</code>转化为键值对,并交给ServletContext.</li>\n<li>容器创建<code>&lt;listener&gt;&lt;/listener&gt;</code>中的类实例,即创建监听.</li>\n<li>在监听中会有contextInitialized(ServletContextEvent args)初始化方法,在这个方法中获得ServletContext = ServletContextEvent.getServletContext();</li>\n</ol>\n<p><a href=\"http://blog.csdn.net/sxbjffsg163/article/details/9955479\" target=\"_blank\" rel=\"noopener\">参考Blog</a></p>\n<h1 id=\"spring-xml\"><a href=\"#spring-xml\" class=\"headerlink\" title=\"spring.xml\"></a>spring.xml</h1><hr>\n<h2 id=\"lt-context-component-scan-gt\"><a href=\"#lt-context-component-scan-gt\" class=\"headerlink\" title=\"&lt;context:component-scan&gt;\"></a><code>&lt;context:component-scan&gt;</code></h2><p>通常情况下我们在创建spring项目的时候在xml配置文件中都会配置这个标签，配置完这个标签后，spring就会去自动扫描base-package对应的路径或者该路径的子包下面的java文件，如果扫描到文件中带有@Service,@Component,@Repository,@Controller等这些注解的类，则把这些类注册为bean</p>\n<p><strong>注：</strong>如果配置了<code>&lt;context:component-scan&gt;</code>那么<code>&lt;context:annotation-config&gt;</code>标签就可以不用在xml中再配置了，因为前者包含了后者。</p>\n<p><a href=\"http://blog.csdn.net/liuxingsiye/article/details/52171508\" target=\"_blank\" rel=\"noopener\">详情参考</a></p>\n","site":{"data":{}},"excerpt":"<p>在做项目的时候，经常用到一些xml配置文件，一开始我们只是去模仿如何配置，时间久了，就想了解我们使用的这些标签都是什么意思，有什么作用，从现在开始以后就记录下来，一点一点的去了解。</p>","more":"<h1 id=\"web-xml\"><a href=\"#web-xml\" class=\"headerlink\" title=\"web.xml\"></a>web.xml</h1><hr>\n<h2 id=\"lt-context-param-gt\"><a href=\"#lt-context-param-gt\" class=\"headerlink\" title=\"&lt;context-param&gt;\"></a><code>&lt;context-param&gt;</code></h2><ol>\n<li>启动一个WEB项目的时候,容器(如:Tomcat)会去读它的配置文件web.xml.读两个节点: <code>&lt;listener&gt;&lt;/listener&gt;</code> 和<code>&lt;context-param&gt;&lt;/context-param&gt;</code></li>\n<li>紧接着,容器创建一个ServletContext(上下文),这个WEB项目所有部分都将共享这个上下文.</li>\n<li>容器将<code>&lt;context-param&gt;&lt;/context-param&gt;</code>转化为键值对,并交给ServletContext.</li>\n<li>容器创建<code>&lt;listener&gt;&lt;/listener&gt;</code>中的类实例,即创建监听.</li>\n<li>在监听中会有contextInitialized(ServletContextEvent args)初始化方法,在这个方法中获得ServletContext = ServletContextEvent.getServletContext();</li>\n</ol>\n<p><a href=\"http://blog.csdn.net/sxbjffsg163/article/details/9955479\" target=\"_blank\" rel=\"noopener\">参考Blog</a></p>\n<h1 id=\"spring-xml\"><a href=\"#spring-xml\" class=\"headerlink\" title=\"spring.xml\"></a>spring.xml</h1><hr>\n<h2 id=\"lt-context-component-scan-gt\"><a href=\"#lt-context-component-scan-gt\" class=\"headerlink\" title=\"&lt;context:component-scan&gt;\"></a><code>&lt;context:component-scan&gt;</code></h2><p>通常情况下我们在创建spring项目的时候在xml配置文件中都会配置这个标签，配置完这个标签后，spring就会去自动扫描base-package对应的路径或者该路径的子包下面的java文件，如果扫描到文件中带有@Service,@Component,@Repository,@Controller等这些注解的类，则把这些类注册为bean</p>\n<p><strong>注：</strong>如果配置了<code>&lt;context:component-scan&gt;</code>那么<code>&lt;context:annotation-config&gt;</code>标签就可以不用在xml中再配置了，因为前者包含了后者。</p>\n<p><a href=\"http://blog.csdn.net/liuxingsiye/article/details/52171508\" target=\"_blank\" rel=\"noopener\">详情参考</a></p>"},{"title":"thymeleaf标签属性的实际演示","date":"2017-12-01T05:18:36.000Z","_content":"\nThymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。Thymeleaf的模板还可以用作工作原型，Thymeleaf会在运行期替换掉静态值。\n\n# bean值替换\n\n当该html作为静态资源的时候，显示*张高峰*，在运行期间会解析*${uname}*的值，如果uname没有值的话，会显示空白\n\n<!-- more -->\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\n\txmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<label th:text=\"${uname}\">张高峰</label>\n</body>\n</html>\n```\n\n# 简单数据替换(数字，日期)\n\n```html\n\n<!-- 静态资源显示：180；运行时显示： 180.00-->\n价格：<label th:text=\"${#numbers.formatDecimal(price,1,2)}\">180</label><br>\n<!-- 静态资源显示：2017/12/01；运行时显示：2017-12-01 11:49:35-->\n日期：<label th:text=\"${#dates.format(times,'yyyy-MM-dd HH:mm:ss')}\">2017/12/01</label>\n\n```\n\n\n\n# 迭代\n\n```html\n<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<td>编号</td>\n\t\t\t\t<td>姓名</td>\n\t\t\t\t<td>二货</td>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody th:remove=\"all-but-first\">\n\t\t\t<tr th:each=\"user:${ulist}\">\n\t\t\t\t<td th:text=\"${user.id}\">id</td>\n\t\t\t\t<td th:text=\"${user.uname}\">name</td>\n\t\t\t\t<td th:text=\"${user.mome}\">mome</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>s</td>\n\t\t\t\t<td>e</td>\n\t\t\t\t<td>r5</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n```\n\n# th:text和th:utext\n\n前面已经多次使用th:text属性，这个是为了显示文本的。但是当我们要显示的文本中出现一些特殊符号的时候，就会被转义例如：**Welcome to our <b>fantastic</b> grocery store!**\n\n如果使用th:text 那么显示出来的就会是：\n\n>    Welcome to our <b>fantastic</b> grocery store!\n\n我们并不希望浏览器给我们转义,这个时候就需要用到th:utext了\n\n```html\n<p th:utext=\"#{home.welcome}\">Welcome to our grocery store!</p>\n```\n\n>    <p>Welcome to our <b>fantastic</b> grocery store!</p>\n\n# 简单表达式\n\n>    1.   变量表达式：${...} 和springEl表达式基本相同\n>    2.   选择变量表达式：*{...} 结合th:object属性使用\n>    3.   消息表达式：#{...} 用来读取properties文件\n>    4.   链接网址表达式：@{...}\n>    5.   片段表达式：~{...}\n\n```html\n<div th:object=\"${session.user}\">\n<p>Name: <span th:text=\"*{firstName}\">Sebastian</span>\n.</p>\n<p>Surname: <span th:text=\"*{lastName}\">Pepper</span>.\n</p>\n<p>Nationality: <span th:text=\"*{nationality}\">Saturn<\n  /span>.</p>\n</div>\n```\n\n```html\n<div>\n<p>Name: <span th:text=\"${session.user.firstName}\">Sebas\ntian</span>.</p>\n<p>Surname: <span th:text=\"${session.user.lastName}\">Pep\nper</span>.</p>\n<p>Nationality: <span th:text=\"${session.user.nationalit\ny}\">Saturn</span>.</p>\n</div>\n```\n\n以上两段代码效果相同，这两种表达式也可以混合使用\n\n# 比较和相等运算符\n\n>    1.   比较运算符:>,<,>=,<=(gt,lt,ge,le)\n>    2.   相等运算符：==,!=(eq,ne)\n\n# ","source":"_posts/thymeleaf2.md","raw":"---\ntitle: thymeleaf标签属性的实际演示\ndate: 2017-12-01 13:18:36\ntags: [thymeleaf]\n---\n\nThymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。Thymeleaf的模板还可以用作工作原型，Thymeleaf会在运行期替换掉静态值。\n\n# bean值替换\n\n当该html作为静态资源的时候，显示*张高峰*，在运行期间会解析*${uname}*的值，如果uname没有值的话，会显示空白\n\n<!-- more -->\n\n```html\n<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\"\n\txmlns:th=\"http://www.thymeleaf.org\">\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n<title>Insert title here</title>\n</head>\n<body>\n<label th:text=\"${uname}\">张高峰</label>\n</body>\n</html>\n```\n\n# 简单数据替换(数字，日期)\n\n```html\n\n<!-- 静态资源显示：180；运行时显示： 180.00-->\n价格：<label th:text=\"${#numbers.formatDecimal(price,1,2)}\">180</label><br>\n<!-- 静态资源显示：2017/12/01；运行时显示：2017-12-01 11:49:35-->\n日期：<label th:text=\"${#dates.format(times,'yyyy-MM-dd HH:mm:ss')}\">2017/12/01</label>\n\n```\n\n\n\n# 迭代\n\n```html\n<table>\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<td>编号</td>\n\t\t\t\t<td>姓名</td>\n\t\t\t\t<td>二货</td>\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody th:remove=\"all-but-first\">\n\t\t\t<tr th:each=\"user:${ulist}\">\n\t\t\t\t<td th:text=\"${user.id}\">id</td>\n\t\t\t\t<td th:text=\"${user.uname}\">name</td>\n\t\t\t\t<td th:text=\"${user.mome}\">mome</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>s</td>\n\t\t\t\t<td>e</td>\n\t\t\t\t<td>r5</td>\n\t\t\t</tr>\n\t\t</tbody>\n\t</table>\n```\n\n# th:text和th:utext\n\n前面已经多次使用th:text属性，这个是为了显示文本的。但是当我们要显示的文本中出现一些特殊符号的时候，就会被转义例如：**Welcome to our <b>fantastic</b> grocery store!**\n\n如果使用th:text 那么显示出来的就会是：\n\n>    Welcome to our <b>fantastic</b> grocery store!\n\n我们并不希望浏览器给我们转义,这个时候就需要用到th:utext了\n\n```html\n<p th:utext=\"#{home.welcome}\">Welcome to our grocery store!</p>\n```\n\n>    <p>Welcome to our <b>fantastic</b> grocery store!</p>\n\n# 简单表达式\n\n>    1.   变量表达式：${...} 和springEl表达式基本相同\n>    2.   选择变量表达式：*{...} 结合th:object属性使用\n>    3.   消息表达式：#{...} 用来读取properties文件\n>    4.   链接网址表达式：@{...}\n>    5.   片段表达式：~{...}\n\n```html\n<div th:object=\"${session.user}\">\n<p>Name: <span th:text=\"*{firstName}\">Sebastian</span>\n.</p>\n<p>Surname: <span th:text=\"*{lastName}\">Pepper</span>.\n</p>\n<p>Nationality: <span th:text=\"*{nationality}\">Saturn<\n  /span>.</p>\n</div>\n```\n\n```html\n<div>\n<p>Name: <span th:text=\"${session.user.firstName}\">Sebas\ntian</span>.</p>\n<p>Surname: <span th:text=\"${session.user.lastName}\">Pep\nper</span>.</p>\n<p>Nationality: <span th:text=\"${session.user.nationalit\ny}\">Saturn</span>.</p>\n</div>\n```\n\n以上两段代码效果相同，这两种表达式也可以混合使用\n\n# 比较和相等运算符\n\n>    1.   比较运算符:>,<,>=,<=(gt,lt,ge,le)\n>    2.   相等运算符：==,!=(eq,ne)\n\n# ","slug":"thymeleaf2","published":1,"updated":"2022-11-24T13:38:45.607Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1fq00254ovk5xrypmjy","content":"<p>Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。Thymeleaf的模板还可以用作工作原型，Thymeleaf会在运行期替换掉静态值。</p>\n<h1 id=\"bean值替换\"><a href=\"#bean值替换\" class=\"headerlink\" title=\"bean值替换\"></a>bean值替换</h1><p>当该html作为静态资源的时候，显示<em>张高峰</em>，在运行期间会解析<em>${uname}</em>的值，如果uname没有值的话，会显示空白</p>\n<a id=\"more\"></a>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span>&gt;</span>张高峰<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"简单数据替换-数字，日期\"><a href=\"#简单数据替换-数字，日期\" class=\"headerlink\" title=\"简单数据替换(数字，日期)\"></a>简单数据替换(数字，日期)</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 静态资源显示：180；运行时显示： 180.00--&gt;</span></span><br><span class=\"line\">价格：<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#numbers.formatDecimal(price,1,2)&#125;\"</span>&gt;</span>180<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 静态资源显示：2017/12/01；运行时显示：2017-12-01 11:49:35--&gt;</span></span><br><span class=\"line\">日期：<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#dates.format(times,'yyyy-MM-dd HH:mm:ss')&#125;\"</span>&gt;</span>2017/12/01<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>编号<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>二货<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tbody</span> <span class=\"attr\">th:remove</span>=<span class=\"string\">\"all-but-first\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"user:$&#123;ulist&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.id&#125;\"</span>&gt;</span>id<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.uname&#125;\"</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.mome&#125;\"</span>&gt;</span>mome<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>s<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>e<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>r5<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"th-text和th-utext\"><a href=\"#th-text和th-utext\" class=\"headerlink\" title=\"th:text和th:utext\"></a>th:text和th:utext</h1><p>前面已经多次使用th:text属性，这个是为了显示文本的。但是当我们要显示的文本中出现一些特殊符号的时候，就会被转义例如：<strong>Welcome to our <b>fantastic</b> grocery store!</strong></p>\n<p>如果使用th:text 那么显示出来的就会是：</p>\n<blockquote>\n<p>   Welcome to our <b>fantastic</b> grocery store!</p>\n</blockquote>\n<p>我们并不希望浏览器给我们转义,这个时候就需要用到th:utext了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:utext</span>=<span class=\"string\">\"#&#123;home.welcome&#125;\"</span>&gt;</span>Welcome to our grocery store!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n   <p>Welcome to our <b>fantastic</b> grocery store!</p>\n</blockquote>\n<h1 id=\"简单表达式\"><a href=\"#简单表达式\" class=\"headerlink\" title=\"简单表达式\"></a>简单表达式</h1><blockquote>\n<ol>\n<li>变量表达式：${…} 和springEl表达式基本相同</li>\n<li>选择变量表达式：*{…} 结合th:object属性使用</li>\n<li>消息表达式：#{…} 用来读取properties文件</li>\n<li>链接网址表达式：@{…}</li>\n<li>片段表达式：~{…}</li>\n</ol>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;session.user&#125;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Name: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;firstName&#125;\"</span>&gt;</span>Sebastian<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Surname: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;lastName&#125;\"</span>&gt;</span>Pepper<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nationality: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;nationality&#125;\"</span>&gt;</span>Saturn<span class=\"tag\">&lt;</span></span><br><span class=\"line\"><span class=\"tag\">  /<span class=\"attr\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Name: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.firstName&#125;\"</span>&gt;</span>Sebas</span><br><span class=\"line\">tian<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Surname: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.lastName&#125;\"</span>&gt;</span>Pep</span><br><span class=\"line\">per<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nationality: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.nationalit</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">y&#125;\"</span>&gt;</span>Saturn<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以上两段代码效果相同，这两种表达式也可以混合使用</p>\n<h1 id=\"比较和相等运算符\"><a href=\"#比较和相等运算符\" class=\"headerlink\" title=\"比较和相等运算符\"></a>比较和相等运算符</h1><blockquote>\n<ol>\n<li>比较运算符:&gt;,&lt;,&gt;=,&lt;=(gt,lt,ge,le)</li>\n<li>相等运算符：==,!=(eq,ne)</li>\n</ol>\n</blockquote>\n<p># </p>\n","site":{"data":{}},"excerpt":"<p>Thymeleaf的主要目标在于提供一种可被浏览器正确显示的、格式良好的模板创建方式，因此也可以用作静态建模。Thymeleaf的模板还可以用作工作原型，Thymeleaf会在运行期替换掉静态值。</p>\n<h1 id=\"bean值替换\"><a href=\"#bean值替换\" class=\"headerlink\" title=\"bean值替换\"></a>bean值替换</h1><p>当该html作为静态资源的时候，显示<em>张高峰</em>，在运行期间会解析<em>${uname}</em>的值，如果uname没有值的话，会显示空白</p>","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://www.w3.org/1999/xhtml\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:th</span>=<span class=\"string\">\"http://www.thymeleaf.org\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"Content-Type\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"text/html; charset=UTF-8\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Insert title here<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;uname&#125;\"</span>&gt;</span>张高峰<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"简单数据替换-数字，日期\"><a href=\"#简单数据替换-数字，日期\" class=\"headerlink\" title=\"简单数据替换(数字，日期)\"></a>简单数据替换(数字，日期)</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 静态资源显示：180；运行时显示： 180.00--&gt;</span></span><br><span class=\"line\">价格：<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#numbers.formatDecimal(price,1,2)&#125;\"</span>&gt;</span>180<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 静态资源显示：2017/12/01；运行时显示：2017-12-01 11:49:35--&gt;</span></span><br><span class=\"line\">日期：<span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;#dates.format(times,'yyyy-MM-dd HH:mm:ss')&#125;\"</span>&gt;</span>2017/12/01<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>编号<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>姓名<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>二货<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">tbody</span> <span class=\"attr\">th:remove</span>=<span class=\"string\">\"all-but-first\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">th:each</span>=<span class=\"string\">\"user:$&#123;ulist&#125;\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.id&#125;\"</span>&gt;</span>id<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.uname&#125;\"</span>&gt;</span>name<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;user.mome&#125;\"</span>&gt;</span>mome<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>s<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>e<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>r5<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"th-text和th-utext\"><a href=\"#th-text和th-utext\" class=\"headerlink\" title=\"th:text和th:utext\"></a>th:text和th:utext</h1><p>前面已经多次使用th:text属性，这个是为了显示文本的。但是当我们要显示的文本中出现一些特殊符号的时候，就会被转义例如：<strong>Welcome to our <b>fantastic</b> grocery store!</strong></p>\n<p>如果使用th:text 那么显示出来的就会是：</p>\n<blockquote>\n<p>   Welcome to our <b>fantastic</b> grocery store!</p>\n</blockquote>\n<p>我们并不希望浏览器给我们转义,这个时候就需要用到th:utext了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">th:utext</span>=<span class=\"string\">\"#&#123;home.welcome&#125;\"</span>&gt;</span>Welcome to our grocery store!<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n   <p>Welcome to our <b>fantastic</b> grocery store!</p>\n</blockquote>\n<h1 id=\"简单表达式\"><a href=\"#简单表达式\" class=\"headerlink\" title=\"简单表达式\"></a>简单表达式</h1><blockquote>\n<ol>\n<li>变量表达式：${…} 和springEl表达式基本相同</li>\n<li>选择变量表达式：*{…} 结合th:object属性使用</li>\n<li>消息表达式：#{…} 用来读取properties文件</li>\n<li>链接网址表达式：@{…}</li>\n<li>片段表达式：~{…}</li>\n</ol>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:object</span>=<span class=\"string\">\"$&#123;session.user&#125;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Name: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;firstName&#125;\"</span>&gt;</span>Sebastian<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Surname: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;lastName&#125;\"</span>&gt;</span>Pepper<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nationality: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"*&#123;nationality&#125;\"</span>&gt;</span>Saturn<span class=\"tag\">&lt;</span></span><br><span class=\"line\"><span class=\"tag\">  /<span class=\"attr\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Name: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.firstName&#125;\"</span>&gt;</span>Sebas</span><br><span class=\"line\">tian<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Surname: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.lastName&#125;\"</span>&gt;</span>Pep</span><br><span class=\"line\">per<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Nationality: <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$&#123;session.user.nationalit</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"string\">y&#125;\"</span>&gt;</span>Saturn<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span>.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以上两段代码效果相同，这两种表达式也可以混合使用</p>\n<h1 id=\"比较和相等运算符\"><a href=\"#比较和相等运算符\" class=\"headerlink\" title=\"比较和相等运算符\"></a>比较和相等运算符</h1><blockquote>\n<ol>\n<li>比较运算符:&gt;,&lt;,&gt;=,&lt;=(gt,lt,ge,le)</li>\n<li>相等运算符：==,!=(eq,ne)</li>\n</ol>\n</blockquote>\n<p># </p>"},{"title":"springmvc数据有效验证（validator）","date":"2017-11-29T09:18:15.000Z","_content":"\n# 开篇\n\n数据有效性验证，就是保证从前台传输到后台的数据是有效的正确数据。因此前端和后台都要添加数据的有效性验证。springmvc对数据的有效性验证有很好的支持。\n\n<!-- more -->\n\n# spring validator接口验证\n\n## 导入需要的jar\n\n这里使用maven\n\n```xml\n<dependency>\n\t<groupId>javax.validation</groupId>\n\t<artifactId>validation-api</artifactId>\n\t<version>2.0.0.Final</version>\n</dependency>\n```\n\n\n\n## 需要一个实体类\n\n```java\npackage springmvc.pojo;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Size;\n\npublic class User {\n\tprivate String uname;\n\tprivate String mome;\n\tpublic User() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t//get set。。。。\n\n```\n\n## 需要一个验证类\n\n验证类需要实现org.springframework.validation.Valdator接口，并重写supports()和validate()方法\n\n```java\npackage springmvc;\n\nimport org.springframework.validation.Errors;\nimport org.springframework.validation.Validator;\n\nimport springmvc.pojo.User;\n\npublic class UserValidator implements Validator {\n\n\tpublic UserValidator() {\n\t}\n\n\t/**\n\t * 确定该验证类只对哪个实体类有效\n\t */\n\tpublic boolean supports(Class<?> clazz) {\n\t\treturn User.class.equals(clazz);\n\t}\n\n\t/**\n\t * 实际验证操作\n\t */\n\tpublic void validate(Object obj, Errors error) {\n\t\tUser user = (User)obj;\n\t\tif(null == user.getUname() || \"\".equals(user.getUname())) {\n\t\t\terror.reject(\"uname\", null, \"uname is empty\");\n\t\t}\n\t}\n\n}\n\n```\n\n## 使用该验证类\n\n准备工作已经做好，下面看一下怎么在controller中对需要验证的类验证呢\n\n```java\npackage springmvc.controller;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.List;\n\nimport javax.validation.Valid;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.DataBinder;\nimport org.springframework.validation.ObjectError;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport springmvc.UserValidator;\nimport springmvc.pojo.User;\n\n@Controller\n@RequestMapping(value = \"/person\")\npublic class PersonController {\n\n\tpublic PersonController() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t\n  \t/**\n\t * 可以通过DataBinder来指定需要使用的Validator，\n\t * 可以通过@InitBinder标记的方法initBinder设置当前Controller需要使用的Validator是UserValidator。\n\t * \n\t * @param binder\n\t */\n\t@InitBinder\n\tpublic void initBinder(DataBinder binder) {\n\t\tbinder.setValidator(new UserValidator());\n\t}\n\n\t/**\n\t * 1.需要验证的对象需要用@Valid进行标注的\n\t * Validation对它的实现。\n\t * 2.处理器方法必须给定包含Errors的参数，这可以是Errors本身，也可以是它的子类BindingResult，使用了Errors参数就是告诉\n\t * Spring关于表单对象数据校验的错误将由我们自己来处理，否则Spring会直接抛出异常\n\t * 3.Errors这个参数是必须紧挨着@Valid参数的，即必须紧挨着需要校验的参数，这就意味着我们有多少个@Valid参数就需要有多少个对应的Errors参数，它们是一一对应的。\n\t * @param model\n\t * @return\n\t */\n\t@RequestMapping(value = \"register\", method = RequestMethod.POST)\n\tpublic String register(@Valid User user, BindingResult result, Model model) throws UnsupportedEncodingException {\n\t\tif (result.hasErrors()) {\n\t\t\tList<ObjectError> list = result.getAllErrors();\n\t\t\tfor (ObjectError e : list) {\n\t\t\t\tSystem.out.println(e.getDefaultMessage());\n\t\t\t}\n\t\t\treturn register(model);\n\t\t}\n\t\tSystem.out.println(user.toString());\n\t\treturn \"redirect:/person/model/\" + URLEncoder.encode(user.getUname(), \"UTF-8\") + \"/\"\n\t\t\t\t+ URLEncoder.encode(user.getMome(), \"utf-8\");\n\t}\n\t\n}\n```\n\n以上就是接口验证方式，这种方式UserValidator验证类只对PersonController有效。如果想在多个controller中都能使用该验证类，需要在springmvc配置文件中添加bean\n\n```xml\n<mvc:annotation-driven validator=\"userValidator\"/>\n<bean id=\"userValidator\" class=\"....UserValidator\"></bean>\n```\n\n# 使用注解进行验证\n\n## 导入要用的jar\n\n JSR-303是一个数据验证的规范,当我们在SpringMVC中需要使用到JSR-303的时候就需要我们提供一个对JSR-303规范的实现，Hibernate Validator是实现了这一规范的。JSR-303的校验是基于注解的，它内部已经定义好了一系列的限制注解，我们只需要把这些注解标记在需要验证的实体类的属性上或是其对应的get方法上。这里需要到如Hibernate Validator 的jar包，这个是和ORM框架无关的。\n\n```xml\n<!-- 数据校验 -->\n<dependency>\n\t<groupId>javax.validation</groupId>\n\t<artifactId>validation-api</artifactId>\n\t<version>2.0.0.Final</version>\n</dependency>\n<dependency>\n\t<groupId>org.hibernate.validator</groupId>\n\t<artifactId>hibernate-validator</artifactId>\n\t<version>6.0.2.Final</version>\n</dependency>\n```\n\n## 修改之前的User实体类\n\n```java\npackage springmvc.pojo;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Size;\npublic class User {\n\t@NotNull(message = \"用户名不能为空\")\n\t@Size(min = 6, max = 30)\n\tprivate String uname;\n\n\tprivate String mome;\n\n\tpublic User() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t//get set....\n}\n\n```\n\n\n\n## 开启注解扫描\n\n这里要注意，在springmvc配置文件中要开启 <mvc:annotation-driven/>\n\n我使用的是springmvc 4.2.6，我感觉4.0以后的版本这个配置都行。\n\n><mvc:annotation-driven /> 是一种简写形式，完全可以手动配置替代这种简写形式，简写形式可以让初学都快速应用默认配置方案。<mvc:annotation-driven /> 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的。\n>并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）。\n\n```xml\n<!-- 在springmvc配置文件中添加以下配置 -->\n<mvc:annotation-driven/>\n```\n\n## controller\n\n这里就不需要\n\n```java\n@InitBinder\npublic void initBinder(DataBinder binder) {\n\tbinder.setValidator(new UserValidator());\n}\n```\n\n\n\n```java\npackage springmvc.controller;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.List;\n\nimport javax.validation.Valid;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.DataBinder;\nimport org.springframework.validation.ObjectError;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport springmvc.UserValidator;\nimport springmvc.pojo.User;\n\n@Controller\n@RequestMapping(value = \"/person\")\npublic class PersonController {\n\n\tpublic PersonController() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t/**\n\t * 1.需要验证的对象需要用@Valid进行标注的\n\t * Validation对它的实现。\n\t * 2.处理器方法必须给定包含Errors的参数，这可以是Errors本身，也可以是它的子类BindingResult，使用了Errors参数就是告诉\n\t * Spring关于表单对象数据校验的错误将由我们自己来处理，否则Spring会直接抛出异常\n\t * 3.Errors这个参数是必须紧挨着@Valid参数的，即必须紧挨着需要校验的参数，这就意味着我们有多少个@Valid参数就需要有多少个对应的Errors参数，它们是一一对应的。\n\t * @param model\n\t * @return\n\t */\n\t@RequestMapping(value = \"register\", method = RequestMethod.POST)\n\tpublic String register(@Valid User user, BindingResult result, Model model) throws UnsupportedEncodingException {\n\t\tif (result.hasErrors()) {\n\t\t\tList<ObjectError> list = result.getAllErrors();\n\t\t\tfor (ObjectError e : list) {\n\t\t\t\tSystem.out.println(e.getDefaultMessage());\n\t\t\t}\n\t\t\treturn register(model);\n\t\t}\n\t\tSystem.out.println(user.toString());\n\t\treturn \"redirect:/person/model/\" + URLEncoder.encode(user.getUname(), \"UTF-8\") + \"/\"\n\t\t\t\t+ URLEncoder.encode(user.getMome(), \"utf-8\");\n\t}\n\t\n}\n```\n\n# 分组验证\n\n校验规则是在pojo制定的，而同一个pojo可以被多个Controller使用，此时会有问题，即：不同的Controller方法对同一个pojo进行校验，此时这些校验信息是共享在这不同的Controller方法中，但是实际上每个Controller方法可能需要不同的校验，在这种情况下，就需要使用分组校验来解决这种问题，通俗的讲，一个pojo中有很多属性，controller中的方法1可能只需要校验pojo中的属性1，controller中的方法2只需要校验pojo中的属性2，但是pojo中的校验注解有很多，怎样才能使方法1只校验属性1，方法二只校验属性2呢？就需要用分组校验来解决了。\n\n## 创建两个空接口\n\n```java\npackage springmvc.validator;\n\n/**\n * 分组校验\n * @author Administrator\n *\n */\npublic interface IValidator1 {\n\n}\n```\n\n```java\npackage springmvc.validator;\n\npublic interface IValidator2 {\n\n}\n```\n\n## 修改实体类\n\n在验证注解中，可以设置groups属性，设置不同的接口作为分组\n\n```java\npackage springmvc.pojo;\n\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.Size;\n\nimport springmvc.validator.IValidator1;\nimport springmvc.validator.IValidator2;\n\npublic class User {\n\n\tprivate Long id;\n\n\t@NotBlank(message = \"用户名不能为空\",groups= {IValidator2.class})\n\t@Size(min = 6, max = 30,groups= {IValidator1.class})\n\tprivate String uname;\n\n\tprivate String mome;\n\n\tpublic User() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n  //get  set\n\n}\n\n```\n\n## 在controller中也使用groups属性\n\n```java\n@RequestMapping(value = \"register\", method = RequestMethod.POST)\n\tpublic String register(@Validated(value= {IValidator2.class}) User user, BindingResult result, Model model) throws UnsupportedEncodingException {\n\t\tif (result.hasErrors()) {\n\t\t\tList<ObjectError> list = result.getAllErrors();\n\t\t\tfor (ObjectError e : list) {\n\t\t\t\tSystem.out.println(e.getDefaultMessage());\n\t\t\t}\n\t\t\treturn register(model);\n\t\t}\n\t\tSystem.out.println(user.toString());\n\t\treturn \"redirect:/person/model/\" + URLEncoder.encode(user.getUname(), \"UTF-8\") + \"/\"\n\t\t\t\t+ URLEncoder.encode(user.getMome(), \"utf-8\");\n\t}\n```\n\n\n\n# 总结\n\nspring版本有很多，有些配置也是不一样的，大家在查看资料的时候，要注意。校验基本上就讲到这，后面在研究一下自定义校验。\n\n\n\n\n\n","source":"_posts/validator.md","raw":"---\ntitle: springmvc数据有效验证（validator）\ndate: 2017-11-29 17:18:15\ntags: [springmvc]\n---\n\n# 开篇\n\n数据有效性验证，就是保证从前台传输到后台的数据是有效的正确数据。因此前端和后台都要添加数据的有效性验证。springmvc对数据的有效性验证有很好的支持。\n\n<!-- more -->\n\n# spring validator接口验证\n\n## 导入需要的jar\n\n这里使用maven\n\n```xml\n<dependency>\n\t<groupId>javax.validation</groupId>\n\t<artifactId>validation-api</artifactId>\n\t<version>2.0.0.Final</version>\n</dependency>\n```\n\n\n\n## 需要一个实体类\n\n```java\npackage springmvc.pojo;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Size;\n\npublic class User {\n\tprivate String uname;\n\tprivate String mome;\n\tpublic User() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t//get set。。。。\n\n```\n\n## 需要一个验证类\n\n验证类需要实现org.springframework.validation.Valdator接口，并重写supports()和validate()方法\n\n```java\npackage springmvc;\n\nimport org.springframework.validation.Errors;\nimport org.springframework.validation.Validator;\n\nimport springmvc.pojo.User;\n\npublic class UserValidator implements Validator {\n\n\tpublic UserValidator() {\n\t}\n\n\t/**\n\t * 确定该验证类只对哪个实体类有效\n\t */\n\tpublic boolean supports(Class<?> clazz) {\n\t\treturn User.class.equals(clazz);\n\t}\n\n\t/**\n\t * 实际验证操作\n\t */\n\tpublic void validate(Object obj, Errors error) {\n\t\tUser user = (User)obj;\n\t\tif(null == user.getUname() || \"\".equals(user.getUname())) {\n\t\t\terror.reject(\"uname\", null, \"uname is empty\");\n\t\t}\n\t}\n\n}\n\n```\n\n## 使用该验证类\n\n准备工作已经做好，下面看一下怎么在controller中对需要验证的类验证呢\n\n```java\npackage springmvc.controller;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.List;\n\nimport javax.validation.Valid;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.DataBinder;\nimport org.springframework.validation.ObjectError;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport springmvc.UserValidator;\nimport springmvc.pojo.User;\n\n@Controller\n@RequestMapping(value = \"/person\")\npublic class PersonController {\n\n\tpublic PersonController() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t\n  \t/**\n\t * 可以通过DataBinder来指定需要使用的Validator，\n\t * 可以通过@InitBinder标记的方法initBinder设置当前Controller需要使用的Validator是UserValidator。\n\t * \n\t * @param binder\n\t */\n\t@InitBinder\n\tpublic void initBinder(DataBinder binder) {\n\t\tbinder.setValidator(new UserValidator());\n\t}\n\n\t/**\n\t * 1.需要验证的对象需要用@Valid进行标注的\n\t * Validation对它的实现。\n\t * 2.处理器方法必须给定包含Errors的参数，这可以是Errors本身，也可以是它的子类BindingResult，使用了Errors参数就是告诉\n\t * Spring关于表单对象数据校验的错误将由我们自己来处理，否则Spring会直接抛出异常\n\t * 3.Errors这个参数是必须紧挨着@Valid参数的，即必须紧挨着需要校验的参数，这就意味着我们有多少个@Valid参数就需要有多少个对应的Errors参数，它们是一一对应的。\n\t * @param model\n\t * @return\n\t */\n\t@RequestMapping(value = \"register\", method = RequestMethod.POST)\n\tpublic String register(@Valid User user, BindingResult result, Model model) throws UnsupportedEncodingException {\n\t\tif (result.hasErrors()) {\n\t\t\tList<ObjectError> list = result.getAllErrors();\n\t\t\tfor (ObjectError e : list) {\n\t\t\t\tSystem.out.println(e.getDefaultMessage());\n\t\t\t}\n\t\t\treturn register(model);\n\t\t}\n\t\tSystem.out.println(user.toString());\n\t\treturn \"redirect:/person/model/\" + URLEncoder.encode(user.getUname(), \"UTF-8\") + \"/\"\n\t\t\t\t+ URLEncoder.encode(user.getMome(), \"utf-8\");\n\t}\n\t\n}\n```\n\n以上就是接口验证方式，这种方式UserValidator验证类只对PersonController有效。如果想在多个controller中都能使用该验证类，需要在springmvc配置文件中添加bean\n\n```xml\n<mvc:annotation-driven validator=\"userValidator\"/>\n<bean id=\"userValidator\" class=\"....UserValidator\"></bean>\n```\n\n# 使用注解进行验证\n\n## 导入要用的jar\n\n JSR-303是一个数据验证的规范,当我们在SpringMVC中需要使用到JSR-303的时候就需要我们提供一个对JSR-303规范的实现，Hibernate Validator是实现了这一规范的。JSR-303的校验是基于注解的，它内部已经定义好了一系列的限制注解，我们只需要把这些注解标记在需要验证的实体类的属性上或是其对应的get方法上。这里需要到如Hibernate Validator 的jar包，这个是和ORM框架无关的。\n\n```xml\n<!-- 数据校验 -->\n<dependency>\n\t<groupId>javax.validation</groupId>\n\t<artifactId>validation-api</artifactId>\n\t<version>2.0.0.Final</version>\n</dependency>\n<dependency>\n\t<groupId>org.hibernate.validator</groupId>\n\t<artifactId>hibernate-validator</artifactId>\n\t<version>6.0.2.Final</version>\n</dependency>\n```\n\n## 修改之前的User实体类\n\n```java\npackage springmvc.pojo;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Size;\npublic class User {\n\t@NotNull(message = \"用户名不能为空\")\n\t@Size(min = 6, max = 30)\n\tprivate String uname;\n\n\tprivate String mome;\n\n\tpublic User() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t//get set....\n}\n\n```\n\n\n\n## 开启注解扫描\n\n这里要注意，在springmvc配置文件中要开启 <mvc:annotation-driven/>\n\n我使用的是springmvc 4.2.6，我感觉4.0以后的版本这个配置都行。\n\n><mvc:annotation-driven /> 是一种简写形式，完全可以手动配置替代这种简写形式，简写形式可以让初学都快速应用默认配置方案。<mvc:annotation-driven /> 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的。\n>并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）。\n\n```xml\n<!-- 在springmvc配置文件中添加以下配置 -->\n<mvc:annotation-driven/>\n```\n\n## controller\n\n这里就不需要\n\n```java\n@InitBinder\npublic void initBinder(DataBinder binder) {\n\tbinder.setValidator(new UserValidator());\n}\n```\n\n\n\n```java\npackage springmvc.controller;\n\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.List;\n\nimport javax.validation.Valid;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.DataBinder;\nimport org.springframework.validation.ObjectError;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\nimport springmvc.UserValidator;\nimport springmvc.pojo.User;\n\n@Controller\n@RequestMapping(value = \"/person\")\npublic class PersonController {\n\n\tpublic PersonController() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n\t/**\n\t * 1.需要验证的对象需要用@Valid进行标注的\n\t * Validation对它的实现。\n\t * 2.处理器方法必须给定包含Errors的参数，这可以是Errors本身，也可以是它的子类BindingResult，使用了Errors参数就是告诉\n\t * Spring关于表单对象数据校验的错误将由我们自己来处理，否则Spring会直接抛出异常\n\t * 3.Errors这个参数是必须紧挨着@Valid参数的，即必须紧挨着需要校验的参数，这就意味着我们有多少个@Valid参数就需要有多少个对应的Errors参数，它们是一一对应的。\n\t * @param model\n\t * @return\n\t */\n\t@RequestMapping(value = \"register\", method = RequestMethod.POST)\n\tpublic String register(@Valid User user, BindingResult result, Model model) throws UnsupportedEncodingException {\n\t\tif (result.hasErrors()) {\n\t\t\tList<ObjectError> list = result.getAllErrors();\n\t\t\tfor (ObjectError e : list) {\n\t\t\t\tSystem.out.println(e.getDefaultMessage());\n\t\t\t}\n\t\t\treturn register(model);\n\t\t}\n\t\tSystem.out.println(user.toString());\n\t\treturn \"redirect:/person/model/\" + URLEncoder.encode(user.getUname(), \"UTF-8\") + \"/\"\n\t\t\t\t+ URLEncoder.encode(user.getMome(), \"utf-8\");\n\t}\n\t\n}\n```\n\n# 分组验证\n\n校验规则是在pojo制定的，而同一个pojo可以被多个Controller使用，此时会有问题，即：不同的Controller方法对同一个pojo进行校验，此时这些校验信息是共享在这不同的Controller方法中，但是实际上每个Controller方法可能需要不同的校验，在这种情况下，就需要使用分组校验来解决这种问题，通俗的讲，一个pojo中有很多属性，controller中的方法1可能只需要校验pojo中的属性1，controller中的方法2只需要校验pojo中的属性2，但是pojo中的校验注解有很多，怎样才能使方法1只校验属性1，方法二只校验属性2呢？就需要用分组校验来解决了。\n\n## 创建两个空接口\n\n```java\npackage springmvc.validator;\n\n/**\n * 分组校验\n * @author Administrator\n *\n */\npublic interface IValidator1 {\n\n}\n```\n\n```java\npackage springmvc.validator;\n\npublic interface IValidator2 {\n\n}\n```\n\n## 修改实体类\n\n在验证注解中，可以设置groups属性，设置不同的接口作为分组\n\n```java\npackage springmvc.pojo;\n\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.Size;\n\nimport springmvc.validator.IValidator1;\nimport springmvc.validator.IValidator2;\n\npublic class User {\n\n\tprivate Long id;\n\n\t@NotBlank(message = \"用户名不能为空\",groups= {IValidator2.class})\n\t@Size(min = 6, max = 30,groups= {IValidator1.class})\n\tprivate String uname;\n\n\tprivate String mome;\n\n\tpublic User() {\n\t\t// TODO Auto-generated constructor stub\n\t}\n  //get  set\n\n}\n\n```\n\n## 在controller中也使用groups属性\n\n```java\n@RequestMapping(value = \"register\", method = RequestMethod.POST)\n\tpublic String register(@Validated(value= {IValidator2.class}) User user, BindingResult result, Model model) throws UnsupportedEncodingException {\n\t\tif (result.hasErrors()) {\n\t\t\tList<ObjectError> list = result.getAllErrors();\n\t\t\tfor (ObjectError e : list) {\n\t\t\t\tSystem.out.println(e.getDefaultMessage());\n\t\t\t}\n\t\t\treturn register(model);\n\t\t}\n\t\tSystem.out.println(user.toString());\n\t\treturn \"redirect:/person/model/\" + URLEncoder.encode(user.getUname(), \"UTF-8\") + \"/\"\n\t\t\t\t+ URLEncoder.encode(user.getMome(), \"utf-8\");\n\t}\n```\n\n\n\n# 总结\n\nspring版本有很多，有些配置也是不一样的，大家在查看资料的时候，要注意。校验基本上就讲到这，后面在研究一下自定义校验。\n\n\n\n\n\n","slug":"validator","published":1,"updated":"2022-11-24T13:38:45.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1fr00274ovk5qzntizs","content":"<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><p>数据有效性验证，就是保证从前台传输到后台的数据是有效的正确数据。因此前端和后台都要添加数据的有效性验证。springmvc对数据的有效性验证有很好的支持。</p>\n<a id=\"more\"></a>\n<h1 id=\"spring-validator接口验证\"><a href=\"#spring-validator接口验证\" class=\"headerlink\" title=\"spring validator接口验证\"></a>spring validator接口验证</h1><h2 id=\"导入需要的jar\"><a href=\"#导入需要的jar\" class=\"headerlink\" title=\"导入需要的jar\"></a>导入需要的jar</h2><p>这里使用maven</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.validation<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>validation-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.0.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"需要一个实体类\"><a href=\"#需要一个实体类\" class=\"headerlink\" title=\"需要一个实体类\"></a>需要一个实体类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.pojo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.NotNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.Size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String uname;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String mome;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//get set。。。。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"需要一个验证类\"><a href=\"#需要一个验证类\" class=\"headerlink\" title=\"需要一个验证类\"></a>需要一个验证类</h2><p>验证类需要实现org.springframework.validation.Valdator接口，并重写supports()和validate()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.Errors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.Validator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserValidator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Validator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserValidator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 确定该验证类只对哪个实体类有效</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> User.class.equals(clazz);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 实际验证操作</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">validate</span><span class=\"params\">(Object obj, Errors error)</span> </span>&#123;</span><br><span class=\"line\">\t\tUser user = (User)obj;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == user.getUname() || <span class=\"string\">\"\"</span>.equals(user.getUname())) &#123;</span><br><span class=\"line\">\t\t\terror.reject(<span class=\"string\">\"uname\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"uname is empty\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用该验证类\"><a href=\"#使用该验证类\" class=\"headerlink\" title=\"使用该验证类\"></a>使用该验证类</h2><p>准备工作已经做好，下面看一下怎么在controller中对需要验证的类验证呢</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.Valid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.BindingResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.DataBinder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.ObjectError;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.InitBinder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.UserValidator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/person\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PersonController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  \t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 可以通过DataBinder来指定需要使用的Validator，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 可以通过<span class=\"doctag\">@InitBinder</span>标记的方法initBinder设置当前Controller需要使用的Validator是UserValidator。</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> binder</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@InitBinder</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initBinder</span><span class=\"params\">(DataBinder binder)</span> </span>&#123;</span><br><span class=\"line\">\t\tbinder.setValidator(<span class=\"keyword\">new</span> UserValidator());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 1.需要验证的对象需要用<span class=\"doctag\">@Valid</span>进行标注的</span></span><br><span class=\"line\"><span class=\"comment\">\t * Validation对它的实现。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 2.处理器方法必须给定包含Errors的参数，这可以是Errors本身，也可以是它的子类BindingResult，使用了Errors参数就是告诉</span></span><br><span class=\"line\"><span class=\"comment\">\t * Spring关于表单对象数据校验的错误将由我们自己来处理，否则Spring会直接抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">\t * 3.Errors这个参数是必须紧挨着<span class=\"doctag\">@Valid</span>参数的，即必须紧挨着需要校验的参数，这就意味着我们有多少个<span class=\"doctag\">@Valid</span>参数就需要有多少个对应的Errors参数，它们是一一对应的。</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"register\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register</span><span class=\"params\">(@Valid User user, BindingResult result, Model model)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result.hasErrors()) &#123;</span><br><span class=\"line\">\t\t\tList&lt;ObjectError&gt; list = result.getAllErrors();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (ObjectError e : list) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(e.getDefaultMessage());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> register(model);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(user.toString());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/person/model/\"</span> + URLEncoder.encode(user.getUname(), <span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"/\"</span></span><br><span class=\"line\">\t\t\t\t+ URLEncoder.encode(user.getMome(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是接口验证方式，这种方式UserValidator验证类只对PersonController有效。如果想在多个controller中都能使用该验证类，需要在springmvc配置文件中添加bean</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> <span class=\"attr\">validator</span>=<span class=\"string\">\"userValidator\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userValidator\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"....UserValidator\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用注解进行验证\"><a href=\"#使用注解进行验证\" class=\"headerlink\" title=\"使用注解进行验证\"></a>使用注解进行验证</h1><h2 id=\"导入要用的jar\"><a href=\"#导入要用的jar\" class=\"headerlink\" title=\"导入要用的jar\"></a>导入要用的jar</h2><p> JSR-303是一个数据验证的规范,当我们在SpringMVC中需要使用到JSR-303的时候就需要我们提供一个对JSR-303规范的实现，Hibernate Validator是实现了这一规范的。JSR-303的校验是基于注解的，它内部已经定义好了一系列的限制注解，我们只需要把这些注解标记在需要验证的实体类的属性上或是其对应的get方法上。这里需要到如Hibernate Validator 的jar包，这个是和ORM框架无关的。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 数据校验 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.validation<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>validation-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.0.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate.validator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-validator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.0.2.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改之前的User实体类\"><a href=\"#修改之前的User实体类\" class=\"headerlink\" title=\"修改之前的User实体类\"></a>修改之前的User实体类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.pojo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.NotNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.Size;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@NotNull</span>(message = <span class=\"string\">\"用户名不能为空\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Size</span>(min = <span class=\"number\">6</span>, max = <span class=\"number\">30</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String uname;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String mome;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//get set....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"开启注解扫描\"><a href=\"#开启注解扫描\" class=\"headerlink\" title=\"开启注解扫描\"></a>开启注解扫描</h2><p>这里要注意，在springmvc配置文件中要开启 <a href=\"mvc:annotation-driven/\" target=\"_blank\" rel=\"noopener\">mvc:annotation-driven/</a></p>\n<p>我使用的是springmvc 4.2.6，我感觉4.0以后的版本这个配置都行。</p>\n<blockquote>\n<p>&lt;mvc:annotation-driven /&gt; 是一种简写形式，完全可以手动配置替代这种简写形式，简写形式可以让初学都快速应用默认配置方案。&lt;mvc:annotation-driven /&gt; 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的。<br>并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在springmvc配置文件中添加以下配置 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h2><p>这里就不需要</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@InitBinder</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initBinder</span><span class=\"params\">(DataBinder binder)</span> </span>&#123;</span><br><span class=\"line\">\tbinder.setValidator(<span class=\"keyword\">new</span> UserValidator());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.Valid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.BindingResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.DataBinder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.ObjectError;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.InitBinder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.UserValidator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/person\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PersonController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 1.需要验证的对象需要用<span class=\"doctag\">@Valid</span>进行标注的</span></span><br><span class=\"line\"><span class=\"comment\">\t * Validation对它的实现。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 2.处理器方法必须给定包含Errors的参数，这可以是Errors本身，也可以是它的子类BindingResult，使用了Errors参数就是告诉</span></span><br><span class=\"line\"><span class=\"comment\">\t * Spring关于表单对象数据校验的错误将由我们自己来处理，否则Spring会直接抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">\t * 3.Errors这个参数是必须紧挨着<span class=\"doctag\">@Valid</span>参数的，即必须紧挨着需要校验的参数，这就意味着我们有多少个<span class=\"doctag\">@Valid</span>参数就需要有多少个对应的Errors参数，它们是一一对应的。</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"register\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register</span><span class=\"params\">(@Valid User user, BindingResult result, Model model)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result.hasErrors()) &#123;</span><br><span class=\"line\">\t\t\tList&lt;ObjectError&gt; list = result.getAllErrors();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (ObjectError e : list) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(e.getDefaultMessage());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> register(model);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(user.toString());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/person/model/\"</span> + URLEncoder.encode(user.getUname(), <span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"/\"</span></span><br><span class=\"line\">\t\t\t\t+ URLEncoder.encode(user.getMome(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"分组验证\"><a href=\"#分组验证\" class=\"headerlink\" title=\"分组验证\"></a>分组验证</h1><p>校验规则是在pojo制定的，而同一个pojo可以被多个Controller使用，此时会有问题，即：不同的Controller方法对同一个pojo进行校验，此时这些校验信息是共享在这不同的Controller方法中，但是实际上每个Controller方法可能需要不同的校验，在这种情况下，就需要使用分组校验来解决这种问题，通俗的讲，一个pojo中有很多属性，controller中的方法1可能只需要校验pojo中的属性1，controller中的方法2只需要校验pojo中的属性2，但是pojo中的校验注解有很多，怎样才能使方法1只校验属性1，方法二只校验属性2呢？就需要用分组校验来解决了。</p>\n<h2 id=\"创建两个空接口\"><a href=\"#创建两个空接口\" class=\"headerlink\" title=\"创建两个空接口\"></a>创建两个空接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.validator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分组校验</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Administrator</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IValidator1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.validator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IValidator2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改实体类\"><a href=\"#修改实体类\" class=\"headerlink\" title=\"修改实体类\"></a>修改实体类</h2><p>在验证注解中，可以设置groups属性，设置不同的接口作为分组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.NotBlank;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.Size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.validator.IValidator1;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.validator.IValidator2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@NotBlank</span>(message = <span class=\"string\">\"用户名不能为空\"</span>,groups= &#123;IValidator2.class&#125;)</span><br><span class=\"line\">\t<span class=\"meta\">@Size</span>(min = <span class=\"number\">6</span>, max = <span class=\"number\">30</span>,groups= &#123;IValidator1.class&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String uname;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String mome;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"comment\">//get  set</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在controller中也使用groups属性\"><a href=\"#在controller中也使用groups属性\" class=\"headerlink\" title=\"在controller中也使用groups属性\"></a>在controller中也使用groups属性</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"register\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register</span><span class=\"params\">(@Validated(value= &#123;IValidator2.class&#125;)</span> User user, BindingResult result, Model model) <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result.hasErrors()) &#123;</span><br><span class=\"line\">\t\t\tList&lt;ObjectError&gt; list = result.getAllErrors();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (ObjectError e : list) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(e.getDefaultMessage());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> register(model);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(user.toString());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/person/model/\"</span> + URLEncoder.encode(user.getUname(), <span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"/\"</span></span><br><span class=\"line\">\t\t\t\t+ URLEncoder.encode(user.getMome(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>spring版本有很多，有些配置也是不一样的，大家在查看资料的时候，要注意。校验基本上就讲到这，后面在研究一下自定义校验。</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"开篇\"><a href=\"#开篇\" class=\"headerlink\" title=\"开篇\"></a>开篇</h1><p>数据有效性验证，就是保证从前台传输到后台的数据是有效的正确数据。因此前端和后台都要添加数据的有效性验证。springmvc对数据的有效性验证有很好的支持。</p>","more":"<h1 id=\"spring-validator接口验证\"><a href=\"#spring-validator接口验证\" class=\"headerlink\" title=\"spring validator接口验证\"></a>spring validator接口验证</h1><h2 id=\"导入需要的jar\"><a href=\"#导入需要的jar\" class=\"headerlink\" title=\"导入需要的jar\"></a>导入需要的jar</h2><p>这里使用maven</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.validation<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>validation-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.0.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"需要一个实体类\"><a href=\"#需要一个实体类\" class=\"headerlink\" title=\"需要一个实体类\"></a>需要一个实体类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.pojo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.NotNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.Size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String uname;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String mome;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//get set。。。。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"需要一个验证类\"><a href=\"#需要一个验证类\" class=\"headerlink\" title=\"需要一个验证类\"></a>需要一个验证类</h2><p>验证类需要实现org.springframework.validation.Valdator接口，并重写supports()和validate()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.Errors;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.Validator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserValidator</span> <span class=\"keyword\">implements</span> <span class=\"title\">Validator</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">UserValidator</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 确定该验证类只对哪个实体类有效</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">supports</span><span class=\"params\">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> User.class.equals(clazz);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 实际验证操作</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">validate</span><span class=\"params\">(Object obj, Errors error)</span> </span>&#123;</span><br><span class=\"line\">\t\tUser user = (User)obj;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">null</span> == user.getUname() || <span class=\"string\">\"\"</span>.equals(user.getUname())) &#123;</span><br><span class=\"line\">\t\t\terror.reject(<span class=\"string\">\"uname\"</span>, <span class=\"keyword\">null</span>, <span class=\"string\">\"uname is empty\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用该验证类\"><a href=\"#使用该验证类\" class=\"headerlink\" title=\"使用该验证类\"></a>使用该验证类</h2><p>准备工作已经做好，下面看一下怎么在controller中对需要验证的类验证呢</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.Valid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.BindingResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.DataBinder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.ObjectError;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.InitBinder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.UserValidator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/person\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PersonController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">  \t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 可以通过DataBinder来指定需要使用的Validator，</span></span><br><span class=\"line\"><span class=\"comment\">\t * 可以通过<span class=\"doctag\">@InitBinder</span>标记的方法initBinder设置当前Controller需要使用的Validator是UserValidator。</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> binder</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@InitBinder</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initBinder</span><span class=\"params\">(DataBinder binder)</span> </span>&#123;</span><br><span class=\"line\">\t\tbinder.setValidator(<span class=\"keyword\">new</span> UserValidator());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 1.需要验证的对象需要用<span class=\"doctag\">@Valid</span>进行标注的</span></span><br><span class=\"line\"><span class=\"comment\">\t * Validation对它的实现。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 2.处理器方法必须给定包含Errors的参数，这可以是Errors本身，也可以是它的子类BindingResult，使用了Errors参数就是告诉</span></span><br><span class=\"line\"><span class=\"comment\">\t * Spring关于表单对象数据校验的错误将由我们自己来处理，否则Spring会直接抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">\t * 3.Errors这个参数是必须紧挨着<span class=\"doctag\">@Valid</span>参数的，即必须紧挨着需要校验的参数，这就意味着我们有多少个<span class=\"doctag\">@Valid</span>参数就需要有多少个对应的Errors参数，它们是一一对应的。</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"register\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register</span><span class=\"params\">(@Valid User user, BindingResult result, Model model)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result.hasErrors()) &#123;</span><br><span class=\"line\">\t\t\tList&lt;ObjectError&gt; list = result.getAllErrors();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (ObjectError e : list) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(e.getDefaultMessage());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> register(model);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(user.toString());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/person/model/\"</span> + URLEncoder.encode(user.getUname(), <span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"/\"</span></span><br><span class=\"line\">\t\t\t\t+ URLEncoder.encode(user.getMome(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上就是接口验证方式，这种方式UserValidator验证类只对PersonController有效。如果想在多个controller中都能使用该验证类，需要在springmvc配置文件中添加bean</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span> <span class=\"attr\">validator</span>=<span class=\"string\">\"userValidator\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"userValidator\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"....UserValidator\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用注解进行验证\"><a href=\"#使用注解进行验证\" class=\"headerlink\" title=\"使用注解进行验证\"></a>使用注解进行验证</h1><h2 id=\"导入要用的jar\"><a href=\"#导入要用的jar\" class=\"headerlink\" title=\"导入要用的jar\"></a>导入要用的jar</h2><p> JSR-303是一个数据验证的规范,当我们在SpringMVC中需要使用到JSR-303的时候就需要我们提供一个对JSR-303规范的实现，Hibernate Validator是实现了这一规范的。JSR-303的校验是基于注解的，它内部已经定义好了一系列的限制注解，我们只需要把这些注解标记在需要验证的实体类的属性上或是其对应的get方法上。这里需要到如Hibernate Validator 的jar包，这个是和ORM框架无关的。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 数据校验 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>javax.validation<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>validation-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.0.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate.validator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-validator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>6.0.2.Final<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改之前的User实体类\"><a href=\"#修改之前的User实体类\" class=\"headerlink\" title=\"修改之前的User实体类\"></a>修改之前的User实体类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.pojo;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.NotNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.Size;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@NotNull</span>(message = <span class=\"string\">\"用户名不能为空\"</span>)</span><br><span class=\"line\">\t<span class=\"meta\">@Size</span>(min = <span class=\"number\">6</span>, max = <span class=\"number\">30</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String uname;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String mome;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//get set....</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"开启注解扫描\"><a href=\"#开启注解扫描\" class=\"headerlink\" title=\"开启注解扫描\"></a>开启注解扫描</h2><p>这里要注意，在springmvc配置文件中要开启 <a href=\"mvc:annotation-driven/\" target=\"_blank\" rel=\"noopener\">mvc:annotation-driven/</a></p>\n<p>我使用的是springmvc 4.2.6，我感觉4.0以后的版本这个配置都行。</p>\n<blockquote>\n<p>&lt;mvc:annotation-driven /&gt; 是一种简写形式，完全可以手动配置替代这种简写形式，简写形式可以让初学都快速应用默认配置方案。&lt;mvc:annotation-driven /&gt; 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,是spring MVC为@Controllers分发请求所必须的。<br>并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 在springmvc配置文件中添加以下配置 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"controller\"><a href=\"#controller\" class=\"headerlink\" title=\"controller\"></a>controller</h2><p>这里就不需要</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@InitBinder</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initBinder</span><span class=\"params\">(DataBinder binder)</span> </span>&#123;</span><br><span class=\"line\">\tbinder.setValidator(<span class=\"keyword\">new</span> UserValidator());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.controller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.UnsupportedEncodingException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URLEncoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.Valid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.ui.Model;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.BindingResult;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.DataBinder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.validation.ObjectError;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.InitBinder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.UserValidator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.pojo.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"/person\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PersonController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PersonController</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 1.需要验证的对象需要用<span class=\"doctag\">@Valid</span>进行标注的</span></span><br><span class=\"line\"><span class=\"comment\">\t * Validation对它的实现。</span></span><br><span class=\"line\"><span class=\"comment\">\t * 2.处理器方法必须给定包含Errors的参数，这可以是Errors本身，也可以是它的子类BindingResult，使用了Errors参数就是告诉</span></span><br><span class=\"line\"><span class=\"comment\">\t * Spring关于表单对象数据校验的错误将由我们自己来处理，否则Spring会直接抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">\t * 3.Errors这个参数是必须紧挨着<span class=\"doctag\">@Valid</span>参数的，即必须紧挨着需要校验的参数，这就意味着我们有多少个<span class=\"doctag\">@Valid</span>参数就需要有多少个对应的Errors参数，它们是一一对应的。</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> model</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"register\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register</span><span class=\"params\">(@Valid User user, BindingResult result, Model model)</span> <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result.hasErrors()) &#123;</span><br><span class=\"line\">\t\t\tList&lt;ObjectError&gt; list = result.getAllErrors();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (ObjectError e : list) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(e.getDefaultMessage());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> register(model);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(user.toString());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/person/model/\"</span> + URLEncoder.encode(user.getUname(), <span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"/\"</span></span><br><span class=\"line\">\t\t\t\t+ URLEncoder.encode(user.getMome(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"分组验证\"><a href=\"#分组验证\" class=\"headerlink\" title=\"分组验证\"></a>分组验证</h1><p>校验规则是在pojo制定的，而同一个pojo可以被多个Controller使用，此时会有问题，即：不同的Controller方法对同一个pojo进行校验，此时这些校验信息是共享在这不同的Controller方法中，但是实际上每个Controller方法可能需要不同的校验，在这种情况下，就需要使用分组校验来解决这种问题，通俗的讲，一个pojo中有很多属性，controller中的方法1可能只需要校验pojo中的属性1，controller中的方法2只需要校验pojo中的属性2，但是pojo中的校验注解有很多，怎样才能使方法1只校验属性1，方法二只校验属性2呢？就需要用分组校验来解决了。</p>\n<h2 id=\"创建两个空接口\"><a href=\"#创建两个空接口\" class=\"headerlink\" title=\"创建两个空接口\"></a>创建两个空接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.validator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 分组校验</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Administrator</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IValidator1</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.validator;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IValidator2</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改实体类\"><a href=\"#修改实体类\" class=\"headerlink\" title=\"修改实体类\"></a>修改实体类</h2><p>在验证注解中，可以设置groups属性，设置不同的接口作为分组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> springmvc.pojo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.NotBlank;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.validation.constraints.Size;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.validator.IValidator1;</span><br><span class=\"line\"><span class=\"keyword\">import</span> springmvc.validator.IValidator2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@NotBlank</span>(message = <span class=\"string\">\"用户名不能为空\"</span>,groups= &#123;IValidator2.class&#125;)</span><br><span class=\"line\">\t<span class=\"meta\">@Size</span>(min = <span class=\"number\">6</span>, max = <span class=\"number\">30</span>,groups= &#123;IValidator1.class&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String uname;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String mome;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">User</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// TODO Auto-generated constructor stub</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  <span class=\"comment\">//get  set</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在controller中也使用groups属性\"><a href=\"#在controller中也使用groups属性\" class=\"headerlink\" title=\"在controller中也使用groups属性\"></a>在controller中也使用groups属性</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(value = <span class=\"string\">\"register\"</span>, method = RequestMethod.POST)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">register</span><span class=\"params\">(@Validated(value= &#123;IValidator2.class&#125;)</span> User user, BindingResult result, Model model) <span class=\"keyword\">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (result.hasErrors()) &#123;</span><br><span class=\"line\">\t\t\tList&lt;ObjectError&gt; list = result.getAllErrors();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (ObjectError e : list) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(e.getDefaultMessage());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> register(model);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println(user.toString());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"redirect:/person/model/\"</span> + URLEncoder.encode(user.getUname(), <span class=\"string\">\"UTF-8\"</span>) + <span class=\"string\">\"/\"</span></span><br><span class=\"line\">\t\t\t\t+ URLEncoder.encode(user.getMome(), <span class=\"string\">\"utf-8\"</span>);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>spring版本有很多，有些配置也是不一样的，大家在查看资料的时候，要注意。校验基本上就讲到这，后面在研究一下自定义校验。</p>"},{"title":"thymeleaf处理URL连接","date":"2017-12-04T11:07:15.000Z","_content":"\nURL是Web应用程序模板中的一等公民，而Thymeleaf标准方言具有特殊的语法，@语法：@ {...}\n\n# th:href\n\n## @语法:@{...}\n\n```html\n<!-- 绝对网址-->\n<a href=\"details.html\" th:href=\"@{http://localhost:8080/gtvg/order/details(orderId=${o.id})}\">view</a>\n<!-- 服务器相对路径 -->\n<a href=\"details.html\" th:href=\"@{/order/details(orderId=${o.id})}\">view</a>\n<!-- 路径中也可以使用变量模板-->\n<a href=\"details.html\" th:href=\"@{/order/{orderId}/details(orderId=${o.id})}\">view</a>\n```\n\n注意：\n\n>    1.   th:href是一个修饰符属性：一旦处理，它将计算要使用的连接URL，并将该值设置为<a>表情的href属性的值。\n>    2.   URL中的参数也可以用表达式，例如http://localhost:8080/gtvg/order/details(orderId=${o.id})，所需的URL参数编码，thymeleaf也会自动执行。\n>    3.   如果需要多个参数，可以用逗号隔开@ {/order/process(execId=${execId},execType='FAST')} \n>    4.   URL路径中也允许使用变量模板：@{/order/{orderId}/details(orderId=${orderId})}\n>    5.   以/开头的请求，会自动匹配上下文前缀\n>    6.   th:href属性允许和静态的href属性共存，这样我们可以在浏览器直接打开原型查看效果\n\n与消息语法（#{...}）的情况一样，URL基数也可以是计算另一个表达式的结果：\n\n```html\n<a th:href=\"@{${url}(orderId=${o.id})}\">view</a>\n<a th:href=\"@{'/details/'+${user.login}(orderId=${o.id})}\">view</a>\n```\n\n","source":"_posts/thymeleaf3.md","raw":"---\ntitle: thymeleaf处理URL连接\ndate: 2017-12-04 19:07:15\ntags: [thymeleaf]\n---\n\nURL是Web应用程序模板中的一等公民，而Thymeleaf标准方言具有特殊的语法，@语法：@ {...}\n\n# th:href\n\n## @语法:@{...}\n\n```html\n<!-- 绝对网址-->\n<a href=\"details.html\" th:href=\"@{http://localhost:8080/gtvg/order/details(orderId=${o.id})}\">view</a>\n<!-- 服务器相对路径 -->\n<a href=\"details.html\" th:href=\"@{/order/details(orderId=${o.id})}\">view</a>\n<!-- 路径中也可以使用变量模板-->\n<a href=\"details.html\" th:href=\"@{/order/{orderId}/details(orderId=${o.id})}\">view</a>\n```\n\n注意：\n\n>    1.   th:href是一个修饰符属性：一旦处理，它将计算要使用的连接URL，并将该值设置为<a>表情的href属性的值。\n>    2.   URL中的参数也可以用表达式，例如http://localhost:8080/gtvg/order/details(orderId=${o.id})，所需的URL参数编码，thymeleaf也会自动执行。\n>    3.   如果需要多个参数，可以用逗号隔开@ {/order/process(execId=${execId},execType='FAST')} \n>    4.   URL路径中也允许使用变量模板：@{/order/{orderId}/details(orderId=${orderId})}\n>    5.   以/开头的请求，会自动匹配上下文前缀\n>    6.   th:href属性允许和静态的href属性共存，这样我们可以在浏览器直接打开原型查看效果\n\n与消息语法（#{...}）的情况一样，URL基数也可以是计算另一个表达式的结果：\n\n```html\n<a th:href=\"@{${url}(orderId=${o.id})}\">view</a>\n<a th:href=\"@{'/details/'+${user.login}(orderId=${o.id})}\">view</a>\n```\n\n","slug":"thymeleaf3","published":1,"updated":"2022-11-24T13:38:45.608Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxwl1gb00364ovkvprz9ksz","content":"<p>URL是Web应用程序模板中的一等公民，而Thymeleaf标准方言具有特殊的语法，@语法：@ {…}</p>\n<h1 id=\"th-href\"><a href=\"#th-href\" class=\"headerlink\" title=\"th:href\"></a>th:href</h1><h2 id=\"语法-…\"><a href=\"#语法-…\" class=\"headerlink\" title=\"@语法:@{…}\"></a>@语法:@{…}</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 绝对网址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"details.html\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;http://localhost:8080/gtvg/order/details(orderId=$&#123;o.id&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 服务器相对路径 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"details.html\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 路径中也可以使用变量模板--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"details.html\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<blockquote>\n<ol>\n<li>th:href是一个修饰符属性：一旦处理，它将计算要使用的连接URL，并将该值设置为<a>表情的href属性的值。</a></li>\n<li>URL中的参数也可以用表达式，例如<a href=\"http://localhost:8080/gtvg/order/details(orderId=${o.id})，所需的URL参数编码，thymeleaf也会自动执行。\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/gtvg/order/details(orderId=${o.id})，所需的URL参数编码，thymeleaf也会自动执行。</a></li>\n<li>如果需要多个参数，可以用逗号隔开@ {/order/process(execId=${execId},execType=’FAST’)} </li>\n<li>URL路径中也允许使用变量模板：@{/order/{orderId}/details(orderId=${orderId})}</li>\n<li>以/开头的请求，会自动匹配上下文前缀</li>\n<li>th:href属性允许和静态的href属性共存，这样我们可以在浏览器直接打开原型查看效果</li>\n</ol>\n</blockquote>\n<p>与消息语法（#{…}）的情况一样，URL基数也可以是计算另一个表达式的结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;$&#123;url&#125;(orderId=$&#123;o.id&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;'/details/'+$&#123;user.login&#125;(orderId=$&#123;o.id&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>URL是Web应用程序模板中的一等公民，而Thymeleaf标准方言具有特殊的语法，@语法：@ {…}</p>\n<h1 id=\"th-href\"><a href=\"#th-href\" class=\"headerlink\" title=\"th:href\"></a>th:href</h1><h2 id=\"语法-…\"><a href=\"#语法-…\" class=\"headerlink\" title=\"@语法:@{…}\"></a>@语法:@{…}</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 绝对网址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"details.html\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;http://localhost:8080/gtvg/order/details(orderId=$&#123;o.id&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 服务器相对路径 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"details.html\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/order/details(orderId=$&#123;o.id&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 路径中也可以使用变量模板--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"details.html\"</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;/order/&#123;orderId&#125;/details(orderId=$&#123;o.id&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<blockquote>\n<ol>\n<li>th:href是一个修饰符属性：一旦处理，它将计算要使用的连接URL，并将该值设置为<a>表情的href属性的值。</a></li>\n<li>URL中的参数也可以用表达式，例如<a href=\"http://localhost:8080/gtvg/order/details(orderId=${o.id})，所需的URL参数编码，thymeleaf也会自动执行。\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/gtvg/order/details(orderId=${o.id})，所需的URL参数编码，thymeleaf也会自动执行。</a></li>\n<li>如果需要多个参数，可以用逗号隔开@ {/order/process(execId=${execId},execType=’FAST’)} </li>\n<li>URL路径中也允许使用变量模板：@{/order/{orderId}/details(orderId=${orderId})}</li>\n<li>以/开头的请求，会自动匹配上下文前缀</li>\n<li>th:href属性允许和静态的href属性共存，这样我们可以在浏览器直接打开原型查看效果</li>\n</ol>\n</blockquote>\n<p>与消息语法（#{…}）的情况一样，URL基数也可以是计算另一个表达式的结果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;$&#123;url&#125;(orderId=$&#123;o.id&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:href</span>=<span class=\"string\">\"@&#123;'/details/'+$&#123;user.login&#125;(orderId=$&#123;o.id&#125;)&#125;\"</span>&gt;</span>view<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"claxwl1dp00004ovkr79mt24h","tag_id":"claxwl1dx00024ovkw0do7owc","_id":"claxwl1e300074ovk8qsedxum"},{"post_id":"claxwl1du00014ovkrgtj0v3l","tag_id":"claxwl1e200064ovkrhrwgc0f","_id":"claxwl1e9000c4ovkdrifitv9"},{"post_id":"claxwl1e8000b4ovkc0xehqb0","tag_id":"claxwl1e200064ovkrhrwgc0f","_id":"claxwl1ec000f4ovkwi3clc1m"},{"post_id":"claxwl1dz00034ovkgwrtoy27","tag_id":"claxwl1dx00024ovkw0do7owc","_id":"claxwl1ee000h4ovkteddv1wh"},{"post_id":"claxwl1ec000g4ovk8ztkkyvu","tag_id":"claxwl1e200064ovkrhrwgc0f","_id":"claxwl1eh000k4ovkme4gupwp"},{"post_id":"claxwl1e000044ovkqbnzcnmd","tag_id":"claxwl1ec000e4ovkpthqj67m","_id":"claxwl1em000p4ovklbnje2t5"},{"post_id":"claxwl1e000044ovkqbnzcnmd","tag_id":"claxwl1eg000j4ovky8g109tw","_id":"claxwl1eo000r4ovkyx583fp6"},{"post_id":"claxwl1e100054ovk4fxz5wev","tag_id":"claxwl1e200064ovkrhrwgc0f","_id":"claxwl1ep000u4ovk4hqdb588"},{"post_id":"claxwl1e400084ovk09t8rf3y","tag_id":"claxwl1eo000s4ovkamsr0iha","_id":"claxwl1eu000y4ovkcg5ljr80"},{"post_id":"claxwl1e500094ovknbuw4400","tag_id":"claxwl1er000x4ovkku57ih8z","_id":"claxwl1ez00134ovkl1w104v4"},{"post_id":"claxwl1ea000d4ovk9jwk5rpe","tag_id":"claxwl1ey00114ovk28q1r3g4","_id":"claxwl1f500174ovkm6pbz77t"},{"post_id":"claxwl1ee000i4ovkln3q5nv5","tag_id":"claxwl1f000154ovkwh7lrdfs","_id":"claxwl1f8001b4ovkero8aayl"},{"post_id":"claxwl1f8001c4ovkrunh52bi","tag_id":"claxwl1f000154ovkwh7lrdfs","_id":"claxwl1fb001f4ovkj05nbzxr"},{"post_id":"claxwl1f9001d4ovkkku6bfic","tag_id":"claxwl1ec000e4ovkpthqj67m","_id":"claxwl1fd001h4ovkd4wxrvuy"},{"post_id":"claxwl1fb001g4ovkwl0td9jw","tag_id":"claxwl1eo000s4ovkamsr0iha","_id":"claxwl1ff001k4ovkagortx7e"},{"post_id":"claxwl1eh000l4ovkp9xqa0wp","tag_id":"claxwl1f600194ovk9dejhmxt","_id":"claxwl1fg001m4ovkkxdygihi"},{"post_id":"claxwl1eh000l4ovkp9xqa0wp","tag_id":"claxwl1eo000s4ovkamsr0iha","_id":"claxwl1fh001p4ovkl1o46qw7"},{"post_id":"claxwl1fd001i4ovkac0k80gm","tag_id":"claxwl1ec000e4ovkpthqj67m","_id":"claxwl1fj001r4ovk4l7axcv7"},{"post_id":"claxwl1ej000m4ovk6ejmf18q","tag_id":"claxwl1fe001j4ovkjxshfvvn","_id":"claxwl1fk001u4ovkwa1sqs20"},{"post_id":"claxwl1fg001n4ovk8ixu508s","tag_id":"claxwl1ec000e4ovkpthqj67m","_id":"claxwl1fl001w4ovk20tuwm5k"},{"post_id":"claxwl1fi001q4ovkc3ajuc3j","tag_id":"claxwl1eo000s4ovkamsr0iha","_id":"claxwl1fn001z4ovku6lmt83l"},{"post_id":"claxwl1el000o4ovkfqk2jxry","tag_id":"claxwl1f000154ovkwh7lrdfs","_id":"claxwl1fo00214ovk5na7vr0g"},{"post_id":"claxwl1fk001v4ovks3s4xynf","tag_id":"claxwl1eo000s4ovkamsr0iha","_id":"claxwl1fq00244ovkrmf7chlg"},{"post_id":"claxwl1en000q4ovkxap853bi","tag_id":"claxwl1fk001t4ovkn712zi8g","_id":"claxwl1fr00264ovku00qoaiu"},{"post_id":"claxwl1eo000t4ovkmcvjx05m","tag_id":"claxwl1f000154ovkwh7lrdfs","_id":"claxwl1fs00284ovk69508b2q"},{"post_id":"claxwl1fp00224ovk2obo22p1","tag_id":"claxwl1f600194ovk9dejhmxt","_id":"claxwl1fu002a4ovkeldmj31g"},{"post_id":"claxwl1eq000v4ovkkixajbyq","tag_id":"claxwl1fp00234ovkyo2q97r6","_id":"claxwl1fu002b4ovkybt4y0x1"},{"post_id":"claxwl1fr00274ovk5qzntizs","tag_id":"claxwl1eo000s4ovkamsr0iha","_id":"claxwl1fv002d4ovkid3cox6r"},{"post_id":"claxwl1er000w4ovkamigxmms","tag_id":"claxwl1f600194ovk9dejhmxt","_id":"claxwl1fv002e4ovkc3rpp609"},{"post_id":"claxwl1er000w4ovkamigxmms","tag_id":"claxwl1eo000s4ovkamsr0iha","_id":"claxwl1fw002g4ovk4r7am7j0"},{"post_id":"claxwl1eu000z4ovk3oidxrci","tag_id":"claxwl1fk001t4ovkn712zi8g","_id":"claxwl1fw002h4ovk9no4jid7"},{"post_id":"claxwl1ew00104ovk3mz5zdbt","tag_id":"claxwl1f600194ovk9dejhmxt","_id":"claxwl1fx002j4ovk3ajq4amh"},{"post_id":"claxwl1ey00124ovkgrouqo1h","tag_id":"claxwl1fw002i4ovkx39p0879","_id":"claxwl1fy002l4ovkeer5tyll"},{"post_id":"claxwl1ez00144ovkhznzxuqe","tag_id":"claxwl1eo000s4ovkamsr0iha","_id":"claxwl1fz002n4ovk43hn4j1f"},{"post_id":"claxwl1ez00144ovkhznzxuqe","tag_id":"claxwl1fx002k4ovkqre895x1","_id":"claxwl1fz002o4ovkwfune0ni"},{"post_id":"claxwl1f100164ovkmvr8fjh1","tag_id":"claxwl1fx002k4ovkqre895x1","_id":"claxwl1g0002q4ovkruun7h30"},{"post_id":"claxwl1f500184ovk0r4sv4r8","tag_id":"claxwl1fx002k4ovkqre895x1","_id":"claxwl1g0002s4ovk3ddh863z"},{"post_id":"claxwl1f7001a4ovk1ba1nva5","tag_id":"claxwl1g0002r4ovkjkgl00r5","_id":"claxwl1g1002u4ovk0o0yhczf"},{"post_id":"claxwl1ff001l4ovk73h5yu5j","tag_id":"claxwl1g1002t4ovk66m9i5r2","_id":"claxwl1g2002w4ovkfdnbbs5p"},{"post_id":"claxwl1fj001s4ovk4v3tpcdm","tag_id":"claxwl1eo000s4ovkamsr0iha","_id":"claxwl1g3002y4ovk9so4zcfv"},{"post_id":"claxwl1fj001s4ovk4v3tpcdm","tag_id":"claxwl1g2002v4ovkrb0f1t95","_id":"claxwl1g3002z4ovkomlh514l"},{"post_id":"claxwl1fl001x4ovkfruarjdo","tag_id":"claxwl1fx002k4ovkqre895x1","_id":"claxwl1g400314ovkitbgxpf9"},{"post_id":"claxwl1fn00204ovkyrj9ru8u","tag_id":"claxwl1eo000s4ovkamsr0iha","_id":"claxwl1g600334ovktnmw6g1l"},{"post_id":"claxwl1fn00204ovkyrj9ru8u","tag_id":"claxwl1g2002v4ovkrb0f1t95","_id":"claxwl1g600344ovksjub5yxq"},{"post_id":"claxwl1fq00254ovk5xrypmjy","tag_id":"claxwl1g2002v4ovkrb0f1t95","_id":"claxwl1g700354ovkco31sawo"},{"post_id":"claxwl1gb00364ovkvprz9ksz","tag_id":"claxwl1g2002v4ovkrb0f1t95","_id":"claxwl1gc00374ovk3ypwmg5y"}],"Tag":[{"name":"vue","_id":"claxwl1dx00024ovkw0do7owc"},{"name":"Git","_id":"claxwl1e200064ovkrhrwgc0f"},{"name":"spring","_id":"claxwl1ec000e4ovkpthqj67m"},{"name":"maven","_id":"claxwl1eg000j4ovky8g109tw"},{"name":"springmvc","_id":"claxwl1eo000s4ovkamsr0iha"},{"name":"Gradle","_id":"claxwl1er000x4ovkku57ih8z"},{"name":"hexo","_id":"claxwl1ey00114ovk28q1r3g4"},{"name":"java","_id":"claxwl1f000154ovkwh7lrdfs"},{"name":"javaweb","_id":"claxwl1f600194ovk9dejhmxt"},{"name":"test","_id":"claxwl1fe001j4ovkjxshfvvn"},{"name":"mybatis","_id":"claxwl1fk001t4ovkn712zi8g"},{"name":"mongoDB","_id":"claxwl1fp00234ovkyo2q97r6"},{"name":"redis","_id":"claxwl1fw002i4ovkx39p0879"},{"name":"security","_id":"claxwl1fx002k4ovkqre895x1"},{"name":"Index","_id":"claxwl1g0002r4ovkjkgl00r5"},{"name":"springboot","_id":"claxwl1g1002t4ovk66m9i5r2"},{"name":"thymeleaf","_id":"claxwl1g2002v4ovkrb0f1t95"}]}}